{"version":3,"file":"index.js","sources":["../src/utils/getKey.ts","../src/utils/groupBy.tsx","../src/features/define/utils/Model.ts","../src/features/localization/bidi.ts","../src/utils/createNonNullableContext.tsx","../src/features/repeater/RepeaterPropsContext.ts","../src/features/repeater/RepeaterItem.tsx","../src/utils/contexts/BuilderContext.ts","../src/utils/contexts/StoreContext.tsx","../src/features/annotation/types/annotations/Annotation.tsx","../src/features/annotation/types/annotations/ContainerAnnotation.tsx","../src/features/annotation/types/annotations/EventAnnotation.tsx","../src/features/annotation/types/annotations/ModuleAnnotation.tsx","../src/features/annotation/types/annotations/PropertyAnnotation.tsx","../src/features/annotation/types/annotations/StyleAnnotation.tsx","../src/features/annotation/consts.ts","../src/features/annotation/utils/builders/BaseBuilder.ts","../src/features/annotation/utils/builders/TypedBuilder.ts","../src/features/annotation/utils/builders/ArrayBuilder.ts","../src/features/annotation/utils/builders/QuantifierBuilder.ts","../src/features/annotation/utils/builders/OneOfBuilder.ts","../src/features/annotation/utils/builders/SomeOfBuilder.ts","../src/features/annotation/utils/builders/AnnotationBuilder.ts","../src/features/annotation/utils/index.ts","../src/features/annotation/utils/builders/NodeAnnotationBuilder.ts","../src/features/annotation/utils/isUniqueKey.tsx","../src/features/annotation/index.tsx","../src/features/annotation/toArray.ts","../src/features/annotation/toStyleProperties.ts","../src/features/repeater/repeaterModel.tsx","../src/utils/AsyncFunction.ts","../src/features/event/types.ts","../src/features/event/consts/index.ts","../src/features/event/utils/ActionEventArgs.ts","../src/features/define/constants.ts","../src/features/define/utils/Meta.ts","../src/consts.ts","../src/utils/observableNaming.ts","../src/stores/ComponentStore.ts","../src/utils/index.ts","../src/features/localization/dots.ts","../src/features/localization/getFluentCompatibleId.ts","../src/features/localization/isFluentVariable.ts","../src/features/localization/getFluentData.ts","../src/utils/SyncEvent.ts","../src/utils/treeUtils.ts","../src/utils/contexts/ComponentDataContext.tsx","../src/features/form-viewer/components/ViewerPropsContext.ts","../src/utils/useSafeState.ts","../src/features/licensing/assemblyDate.ts","../src/features/licensing/consts.ts","../src/features/licensing/utils.ts","../src/features/licensing/verifySign.ts","../src/features/licensing/TrialMessage.tsx","../src/features/localization/emotionCache.ts","../src/features/localization/ViewerLocalizationProvider.tsx","../src/features/ui/SuppressResizeObserverErrors.tsx","../src/features/event/utils/EventStream.ts","../src/features/ui/ComponentTreeContext.ts","../src/utils/CalculableResult.ts","../src/features/calculation/propertyCalculator.ts","../src/stores/ComponentState.tsx","../src/utils/needRender.ts","../src/utils/getChildren.tsx","../src/utils/useTooltipType.ts","../src/utils/useWrapperState.ts","../src/features/tooltip/TooltipWrapper.tsx","../src/utils/useErrorModel.ts","../src/features/validation/components/Erroneous.tsx","../src/features/validation/utils/DataValidator.ts","../src/features/ui/DefaultWrapper.tsx","../src/features/ui/ComponentViewer.tsx","../src/features/ui/ComponentTreeItem.tsx","../src/features/ui/ComponentTree.tsx","../src/features/form-viewer/components/Viewer.tsx","../src/features/form-viewer/CustomActions.ts","../src/stores/FormViewerPropsStore.ts","../src/features/validation/utils/calculateProperty.ts","../src/features/validation/utils/dataPart.ts","../src/features/validation/utils/validatorsResolver.tsx","../src/features/validation/utils/RepeaterField.ts","../src/features/event/consts/repeaterActions.ts","../src/features/event/consts/actions.ts","../src/features/ui/PropertyBlockType.ts","../src/features/localization/localizer.ts","../src/features/localization/types.ts","../src/features/ui/screenModel.tsx","../src/features/ui/internalErrorModel.tsx","../src/features/ui/templateUtil.ts","../src/features/validation/utils/ruleBuilder.ts","../src/features/validation/rules/zodAnyToValidator.ts","../src/features/validation/rules/ZodArrayRules.ts","../src/features/validation/rules/ZodBooleanRules.ts","../src/features/validation/rules/ZodDateRules.ts","../src/features/validation/rules/ZodNumberRules.ts","../src/features/validation/rules/ZodObjectRules.ts","../src/features/validation/rules/ZodStringRules.ts","../src/features/validation/rules/ZodTimeRules.ts","../src/features/validation/utils/consts.tsx","../src/features/validation/utils/autoConvertField.ts","../src/features/validation/utils/SimpleField.ts","../src/features/validation/utils/util.ts","../src/features/validation/utils/TemplateField.ts","../src/utils/generateUniqueName.ts","../src/stores/Form.ts","../src/stores/LocalizationStore.ts","../src/stores/PersistedForm.ts","../src/stores/Store.ts","../src/utils/useDisposable.ts","../src/features/form-viewer/components/ViewerStoreProvider.tsx","../src/features/form-viewer/setupMobx.ts","../src/features/form-viewer/FormViewer.tsx","../src/features/template/templateModel.tsx","../src/features/template/slotModel.tsx","../src/features/template/slotMeta.tsx","../src/features/template/templateMeta.tsx","../src/features/template/fragmentModel.tsx","../src/features/define/utils/View.ts","../src/features/define/utils/Definer.ts","../src/features/validation/components/DefaultErrorMessage.tsx","../src/features/components/internalErrorMeta.tsx","../src/features/components/screenMeta.tsx","../src/features/repeater/repeaterMeta.tsx","../src/features/validation/errorMessageMeta.ts","../src/features/define/utils/BuilderView.ts","../src/utils/IFormData.ts","../src/features/annotation/utils/LabeledValue.ts","../src/utils/resourceLoader.ts","../src/utils/reactVersion.ts","../src/utils/forwardRefShim.tsx"],"sourcesContent":["/**\n * Generates the random string. **Internal use only.**\n * @returns the generated random string.\n */\nexport const getKey = () => {\n  return (Math.random() * 1e18).toString(36).slice(0, 5).toUpperCase() + ''\n}\n","/**\n * Groups the array of values by function predicate. **Internal use only.**\n * @param array the array of values.\n * @param predicate the function that returns a string to group the values of the array.\n * @returns the Record with grouped values.\n */\nexport function groupBy<T>(array: T[], predicate: (value: T, index: number, array: T[]) => string) {\n  return array.reduce((acc, value, index, array) => {\n    (acc[predicate(value, index, array)] ||= []).push(value)\n    return acc\n  }, {} as Record<string, T[]>)\n}\n","import {observer} from 'mobx-react'\nimport type {ComponentType} from 'react'\nimport type {Css} from '../../style/types'\nimport type {SchemaType} from '../../validation'\nimport type {ActionsInitializer, ComponentKind} from '../types'\nimport type {ComponentPropertyBindType} from './ComponentPropertyBindType'\n\n/**\n * Represents component metadata for the form viewer.\n * @template T the type of React component properties.\n */\nexport class Model<T = any> {\n  readonly #name?: string\n  /**\n   * The React component.\n   */\n  readonly component: ComponentType<T>\n\n  /**\n   * Creates component metadata for the form viewer.\n   * @param component the React component.\n   * @param name the component name.\n   * @param actionsInitializer the function to initialize actions in the component.\n   * @param valued the name of the component property where the component value is stored.\n   * @param valueType the type of the component value.\n   * @param defaultProps the component's default property values.\n   * @param css the component's CSS values.\n   * @param wrapperCss the component's wrapper CSS values.\n   * @param typeName the component type name.\n   * @param kind the component kind.\n   * @param readOnly the name of the component property that stores the read-only flag.\n   * @param propsBindingTypes the component property binding types.\n   * @template T the type of React component properties.\n   */\n  constructor(\n    component: ComponentType<T>,\n    name?: string,\n    readonly actionsInitializer?: ActionsInitializer,\n    readonly valued?: string,\n    readonly valueType?: SchemaType,\n    readonly defaultProps?: Readonly<Record<string, any>>,\n    readonly css?: Css,\n    readonly wrapperCss?: Css,\n    readonly typeName?: string,\n    readonly kind: ComponentKind = 'component',\n    readonly readOnly?: string,\n    readonly propsBindingTypes: Readonly<Record<string, ComponentPropertyBindType>> = {},\n  ) {\n    this.component = observer(component)\n    this.component.displayName = component.displayName || component.name\n    this.#name = name\n  }\n\n  /**\n   * @returns the component name, or type if there is no component name.\n   */\n  get name() {\n    return this.#name ?? this.type\n  }\n\n  /**\n   * @returns the component type name.\n   */\n  get type(): string {\n    return this.typeName || this.component.displayName || this.component.name\n  }\n}\n","/**\n * The enumeration of bidirectional text layout types.\n */\nexport enum BiDi {\n\n  /**\n   * Left to right.\n   */\n  LTR = 'ltr',\n\n  /**\n   * Right to left.\n   */\n  RTL = 'rtl',\n}\n","import type {Context, Provider} from 'react'\nimport {createContext, useContext} from 'react'\n\n/**\n * Creates non-nullable React context. **Internal use only.**\n * @param name the context name.\n * @param defaultValue the optional default value.\n * @returns the tuple [hook, provider, and common context] for interactions with a non-nullable context.\n */\nexport function createNonNullableContext<T>(name: string, defaultValue: T | null = null): [() => T, Provider<T>, Context<T | null>] {\n  const context = createContext<T | null>(defaultValue)\n  context.displayName = name\n\n  const hook = createContextHook(context)\n  const provider = createProvider(context)\n\n  return [hook, provider, context]\n}\n\nfunction createContextHook<T, >(context: Context<T>) {\n  return () => {\n    const value = useContext(context)\n\n    if (!value) throw new Error(`The context ${context.displayName} didn't found!`)\n\n    return value\n  }\n}\n\nfunction createProvider<T, >(context: Context<T | null>) {\n  const value = context as Context<T>\n  return value.Provider\n}\n","import {createNonNullableContext} from '../../utils/createNonNullableContext'\nimport type {RepeaterProps} from './RepeaterProps'\n\nexport const [\n  /**\n   * **Internal use only.**\n   */\n  useRepeaterProps,\n  /**\n   * **Internal use only.**\n   */\n  RepeaterPropsProvider] = createNonNullableContext<RepeaterProps>('RepeaterPropsContext')\n","import type {ReactNode} from 'react'\nimport {Model} from '../define'\nimport {useRepeaterProps} from './RepeaterPropsContext'\n\n/**\n * The RepeaterItem component properties.\n */\nexport interface RepeaterItemProps {\n  /**\n   * The React child node.\n   */\n  children: ReactNode\n}\n\n/**\n * The React component that displays a Repeater item.\n * @param props the React component properties.\n * @returns the React element.\n */\nexport const RepeaterItem = (props: RepeaterItemProps) => {\n  const {className} = useRepeaterProps()\n  return <div className={className}>{props.children}</div>\n}\nRepeaterItem.displayName = 'RepeaterItem'\n\nexport const repeaterItemModel = new Model(RepeaterItem, 'RepeaterItem')\n","import {createNonNullableContext} from '../createNonNullableContext'\nimport type {BuilderMode} from './BuilderMode'\n\n/**\n * The FormBuilder context properties.\n */\nexport type BuilderContextType = {\n  /**\n   * Form builder mode. Builder or viewer.\n   */\n  builderMode: BuilderMode\n  /**\n   * The function for translate builder labels.\n   * @param key the translation key.\n   * @returns the translated label.\n   */\n  translate?: (key: string) => string\n}\n\nexport const [\n  /**\n   * @returns the {@link BuilderContext} value.\n   */\n  useBuilderContext,\n  /**\n   * The FormBuilder context provider.\n   */\n  BuilderContextProvider,\n  /**\n   * The FormBuilder context.\n   */\n  BuilderContext,\n] = createNonNullableContext<BuilderContextType>('BuilderContext', {\n  builderMode: 'viewer'\n})\n","import type {Store} from '../../stores/Store'\nimport {createNonNullableContext} from '../createNonNullableContext'\n\nexport const [\n  /**\n   * **Internal use only.**\n   */\n  useStore,\n  /**\n   * **Internal use only.**\n   */\n  StoreProvider,\n  /**\n   * **Internal use only.**\n   */\n  StoreContext] = createNonNullableContext<Store>('StoreContext')\n","import type {ReactNode} from 'react'\nimport type {ComponentPropertyBindType} from '../../../define/utils/ComponentPropertyBindType'\nimport type {RuleValidator, SchemaType} from '../../../validation'\nimport type {ErrorMap} from '../../../validation/ErrorMap'\nimport type {EditorType} from './EditorType'\n\n/**\n * Basic metadata class for a React component property for the form builder.\n */\nexport class Annotation {\n\n  /**\n   * The component property key.\n   */\n  readonly key: string\n\n  /**\n   * The component property name.\n   */\n  readonly name: string\n\n  /**\n   * The name of the component's property editor.\n   */\n  readonly editor!: EditorType\n\n  /**\n   * The hint for the component property.\n   */\n  readonly hint?: ReactNode\n\n  /**\n   * True if the property value can be localized, false otherwise.\n   */\n  readonly localizable: boolean = false\n\n  /**\n   * True if the property value is bound to form data, false otherwise.\n   */\n  readonly valued: boolean = false\n\n  /**\n   * True if the property value controls a read-only flag, false otherwise.\n   */\n  readonly readOnly: boolean = false\n\n  /**\n   * Additional properties for the component property editor.\n   */\n  readonly editorProps?: any\n\n  /**\n   * The default property value.\n   */\n  readonly default?: any\n\n  /**\n   * The data type for the value of the property.\n   */\n  readonly type?: SchemaType\n\n  /**\n   * True if the component property is required, false otherwise.\n   */\n  readonly required: boolean = false\n\n  /**\n   * The function for validating the property value.\n   */\n  readonly validator?: RuleValidator\n\n  /**\n   * Message and/or error code for the validation function.\n   */\n  readonly errorMap?: ErrorMap\n\n  /**\n   * True if the property value can be a calculated property, false otherwise.\n   */\n  readonly calculable: boolean = true\n\n  /**\n   * A function that returns a string containing the source code of the function to bind child components.\n   * @param props the properties of the component, which are available only inside Form Builder Designer.\n   */\n  readonly slotConditionBuilder?: (props: any) => string\n\n  /**\n   *  The component property binding type.\n   */\n  readonly bindingType?: ComponentPropertyBindType\n\n  /**\n   * Creates metadata for a React component property.\n   * @param key the property name.\n   * @param name the human-readable property name.\n   */\n  constructor(key: string, name: string) {\n    this.key = key\n    this.name = name\n  }\n\n  /**\n   * @returns the metadata clone.\n   */\n  clone() {\n    return Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this))\n  }\n}\n","import {Annotation} from './Annotation'\n\n/**\n * Metadata for the component container property for the form builder.\n * The Container property of a component can contain other React components.\n */\nexport class ContainerAnnotation extends Annotation {\n}\n","import {Annotation} from './Annotation'\n\n/**\n * Metadata for the component event property for the form builder.\n */\nexport class EventAnnotation extends Annotation {\n}\n","import {Annotation} from './Annotation'\n\n/**\n * Metadata for a component property that is not a property of the component itself,\n * but is supplied by the form builder.\n */\nexport class ModuleAnnotation extends Annotation {\n}\n","import type {LabeledValue} from '../../utils/LabeledValue'\nimport {Annotation} from './Annotation'\n\n/**\n * Metadata for the component property for the form builder.\n */\nexport class PropertyAnnotation extends Annotation {\n  /**\n   * Possible values for the property.\n   */\n  data!: LabeledValue[]\n}\n\n/**\n * Type predicate, asserts that the value is an instance of PropertyAnnotation. **Internal use only.**\n * @param value the value.\n * @returns true if the value is an instance of PropertyAnnotation, false otherwise.\n */\nexport const isProperty = (value: Annotation): value is PropertyAnnotation => {\n  return value instanceof PropertyAnnotation\n}\n","import {Annotation} from './Annotation'\n\n/**\n * Metadata for the component style property for the form builder.\n */\nexport class StyleAnnotation extends Annotation {\n}\n","import type {AnnotationType} from './types'\nimport type {Annotation} from './types/annotations/Annotation'\nimport {ContainerAnnotation} from './types/annotations/ContainerAnnotation'\nimport {EventAnnotation} from './types/annotations/EventAnnotation'\nimport {ModuleAnnotation} from './types/annotations/ModuleAnnotation'\nimport {PropertyAnnotation} from './types/annotations/PropertyAnnotation'\nimport {StyleAnnotation} from './types/annotations/StyleAnnotation'\n\n/**\n * The string format for a value of the Time type.\n */\nexport const timeFormat = 'HH:mm:ss'\n\nexport const AnnotationMap: Record<AnnotationType, typeof Annotation> = {\n  Property: PropertyAnnotation,\n  Container: ContainerAnnotation,\n  Event: EventAnnotation,\n  Module: ModuleAnnotation,\n  Style: StyleAnnotation,\n}\n","import {assign, clone as lodashClone, startCase} from 'lodash-es'\nimport type {ReactNode} from 'react'\nimport {AnnotationMap} from '../../consts'\nimport type {AnnotationType} from '../../types'\nimport type {Annotation} from '../../types/annotations/Annotation'\n\n/**\n * Options for building an annotation.\n */\nexport class BuilderOptions {\n  /**\n   * Type of component property description in the form builder.\n   */\n  annotationType: AnnotationType = 'Module'\n  /**\n   * Flag if true, the property name will be automatically converted in the designer from a camel case string to a human-readable string.\n   */\n  autoName = true\n}\n\n/**\n * Type for component property metadata without the 'key' property, but with the 'editor' property.\n */\nexport type PreAnnotation = Partial<Omit<Annotation, 'key'>> & Pick<Annotation, 'editor'>\n\n/**\n * The type representing custom options for the component's property metadata builder.\n */\nexport type BuilderSetup = Partial<PreAnnotation & BuilderOptions>\n\n/**\n * The base builder class to define the metadata property of the form builder component.\n * @template T the property type.\n */\nexport class BaseBuilder<T> {\n  /**\n   * Partial metadata for a component property.\n   */\n  annotation!: PreAnnotation\n  /**\n   * Options for building an annotation.\n   */\n  options = new BuilderOptions()\n\n  /**\n   * @returns the main component property that is used as form data and for validation rules.\n   */\n  get valued() {\n    return this.setup({valued: true})\n  }\n\n  /**\n   * @returns the component property that can be localized.\n   */\n  get localize() {\n    return this.setup({localizable: true})\n  }\n\n  /**\n   * @returns the non-localizable component property.\n   */\n  get notLocalize() {\n    return this.setup({localizable: false})\n  }\n\n  /**\n   * Specifies the name of the component property.\n   * @param name the property name.\n   * @returns the modified instance of the builder.\n   */\n  named(name: string) {\n    return this.setup({name})\n  }\n\n  /**\n   * Adds the hint to the property name of the component.\n   * @param hint the hint.\n   * @returns the modified instance of the builder.\n   */\n  hinted(hint: ReactNode) {\n    return this.setup({hint})\n  }\n\n  /**\n   * Marks the component property as calculable.\n   * @param calculable true if the property is calculable.\n   * @returns the modified instance of the builder.\n   */\n  calculable(calculable: boolean) {\n    return this.setup({calculable})\n  }\n\n  /**\n   * Modifies the component property metadata builder with custom options.\n   * @param options the custom options.\n   * @returns the modified instance of the builder.\n   */\n  setup(options: BuilderSetup): this {\n    const {annotationType, autoName, ...annotation} = options\n    const clone = this.clone()\n    clone.options.annotationType = annotationType ?? clone.options.annotationType\n    clone.options.autoName = autoName ?? clone.options.autoName\n    assign(clone.annotation, annotation)\n    return clone\n  }\n\n  /**\n   * Clones the instance of the builder.\n   * @returns the cloned instance of the builder.\n   */\n  clone(): this {\n    const clone = lodashClone(this)\n    clone.options = lodashClone(this.options)\n    clone.annotation = lodashClone(this.annotation)\n    clone.annotation ??= {} as PreAnnotation\n    return clone\n  }\n\n  /**\n   * Creates component property metadata for the form builder.\n   * @param key the unique key of the component property.\n   * @returns the instance of the component property metadata for the form builder.\n   */\n  build(key: string): Annotation {\n    const name = this.getName(key)\n    const annotation = new AnnotationMap[this.options.annotationType](key, name)\n    assign(annotation, this.annotation)\n    return annotation\n  }\n\n  /**\n   * Sets custom properties for the component's property editor.\n   * @param props the custom properties\n   * @returns the modified instance of the builder.\n   */\n  withEditorProps(props: any): this {\n    const clone = this.clone()\n    assign(clone.annotation, {editorProps: props})\n    return clone\n  }\n\n  /**\n   * Hides the component property editor.\n   * @returns the modified instance of the builder.\n   */\n  hideEditor(): this {\n    const clone = this.clone()\n    assign(clone.annotation, {editor: undefined})\n    return clone\n  }\n\n  /**\n   * Returns the annotation name.\n   * @param key the property name\n   * @returns the annotation name.\n   */\n  protected getName(key: string) {\n    return this.annotation.name ?? (this.options.autoName ? startCase(key) : key)\n  }\n}\n\n","import type {RuleValidator} from '../../../validation'\nimport type {ErrorMap} from '../../../validation/ErrorMap'\nimport {BaseBuilder} from './BaseBuilder'\n\n/**\n * The builder class to define the metadata property of the form builder component.\n * Used for properties where the property value can be validated.\n * @template T the property type.\n */\nexport class TypedBuilder<T> extends BaseBuilder<T> {\n\n  /**\n   * Marks the component property as required.\n   * @returns the modified instance of the builder.\n   */\n  get required(): TypedBuilder<NonNullable<T>> {\n    return this.setup({required: true}) as TypedBuilder<NonNullable<T>>\n  }\n\n  /**\n   * Sets the default value for the component property.\n   * @param value the default value.\n   * @returns the modified instance of the builder.\n   */\n  default(value: T): this {\n    return this.setup({default: value})\n  }\n\n  /**\n   * Modifies the component property metadata builder with validation properties.\n   * @param validator the validation function.\n   * @param errorMap the validation error settings.\n   * @returns the modified instance of the builder.\n   */\n  validated(validator: RuleValidator<T>, errorMap: ErrorMap): this {\n    return this.setup({validator, errorMap})\n  }\n}\n","import type {SchemaType} from '../../../validation'\nimport {TypedBuilder} from './TypedBuilder'\n\n/**\n * The builder class to define the metadata property of the form builder component.\n * Used for properties where the property value is an array.\n * @template T the property type.\n */\nexport class ArrayBuilder<T> extends TypedBuilder<T> {\n  subType?: SchemaType\n\n  /**\n   * Sets the component's value type to an array of strings.\n   * @returns the modified instance of the builder.\n   */\n  get ofString() {\n    const builder = new ArrayBuilder<string[] | undefined>()\n      .setup({...this.options, ...this.annotation, type: 'array', editor: 'arrayOfString'})\n    builder.subType = 'string'\n    return builder\n  }\n\n  /**\n   * Sets the component's value type to an array of objects.\n   * @returns the modified instance of the builder.\n   */\n  get ofObject() {\n    const builder = new ArrayBuilder<object[] | undefined>()\n      .setup({...this.options, ...this.annotation, type: 'array'})\n    builder.subType = 'object'\n    return builder\n  }\n}\n","import {startCase} from 'lodash-es'\nimport type {Annotation} from '../../types/annotations/Annotation'\nimport type {PropertyAnnotation} from '../../types/annotations/PropertyAnnotation'\nimport {TypedBuilder} from './TypedBuilder'\n\n/**\n * The abstract builder class to define the metadata property of the form builder component.\n * Used for properties where the property value can be selected from predefined values.\n * @template T the property type.\n */\nexport abstract class QuantifierBuilder<T> extends TypedBuilder<T> {\n  /**\n   * Possible values for the property.\n   */\n  values!: (string | number)[]\n  /**\n   * Labels for the possible values of the property.\n   */\n  labels?: string[]\n\n  /**\n   * Marks the component property as required.\n   * @returns the modified instance of the builder.\n   */\n  get required(): QuantifierBuilder<NonNullable<T>> {\n    return super.required as QuantifierBuilder<NonNullable<T>>\n  }\n\n  /**\n   * Sets the labels for predefined values.\n   * @param labels the labels.\n   * @returns the modified instance of the builder.\n   */\n  labeled(...labels: string[]) {\n    const clone = this.clone()\n    clone.labels = labels\n    return clone\n  }\n\n  /**\n   * Creates component property metadata for the form builder.\n   * @param key the unique key of the component property.\n   * @returns the instance of the component property metadata for the form builder.\n   */\n  build(key: string): Annotation {\n    const result = super.build(key) as PropertyAnnotation\n    result.data = this.values.map((value, index) => {\n      const label = this.labels?.[index] ?? startCase(value.toString())\n      return {label, value}\n    })\n\n    return result\n  }\n\n  /**\n   * Sets the default value for the component property.\n   * @param value the default value, can be an array of values.\n   * @returns the modified instance of the builder.\n   */\n  default(value: T | T[]): this {\n    return this.setup({default: value})\n  }\n}\n","import {QuantifierBuilder} from './QuantifierBuilder'\n\n/**\n * The builder class to define the metadata property of the form builder component.\n * Used for properties where the property value can be selected from one of the predefined values.\n * @template T the property type.\n */\nexport class OneOfBuilder<T> extends QuantifierBuilder<T> {\n\n  /**\n   * Sets the radio buttons as the component's property editor.\n   * @returns the modified instance of the builder.\n   */\n  radio() {\n    return this.setup({editor: 'radio'})\n  }\n\n  /**\n   * Sets the default value for the component property.\n   * @param value the default value.\n   * @returns the modified instance of the builder.\n   */\n  default(value: T): this {\n    return super.default(value)\n  }\n}\n","import {QuantifierBuilder} from './QuantifierBuilder'\n\n/**\n * The builder class to define the metadata property of the form builder component.\n * Used for properties where the property value can be a set of predefined values.\n * @template T the property type.\n */\nexport class SomeOfBuilder<T> extends QuantifierBuilder<T> {\n\n  /**\n   * Sets the default value for the component property.\n   * @param value the default value.\n   * @returns the modified instance of the builder.\n   */\n  default(value: T[]): this {\n    return super.default(value)\n  }\n}\n","import type {SchemaType, SchemaTypeMap} from '../../../validation'\nimport type {EditorType} from '../../types/annotations/EditorType'\nimport {ArrayBuilder} from './ArrayBuilder'\nimport {BaseBuilder} from './BaseBuilder'\nimport {OneOfBuilder} from './OneOfBuilder'\nimport {SomeOfBuilder} from './SomeOfBuilder'\nimport {TypedBuilder} from './TypedBuilder'\n\n/**\n * The builder class to define the metadata property of the form builder component.\n * @template T the property type.\n */\nexport class AnnotationBuilder<T> extends BaseBuilder<T> {\n\n  /**\n   * Creates a component property metadata builder.\n   * @param editor the property editor type.\n   * @template T the property type.\n   */\n  constructor(editor: EditorType) {\n    super()\n    this.annotation = {editor}\n  }\n\n  /**\n   * Creates a component property metadata builder.\n   * @param editor the property editor type.\n   * @template T the property type.\n   * @returns the component property metadata builder.\n   */\n  static create = <T>(editor: EditorType) => new this<T>(editor)\n\n  /**\n   * Sets the property as a \"array\" property.\n   * @returns the instance of the metadata property builder.\n   */\n  get array() {\n    return new ArrayBuilder<T[] | undefined>()\n      .setup({...this.options, ...this.annotation, type: 'array'})\n  }\n\n  /**\n   * Sets the field type for the component property.\n   * @param type the field type.\n   * @returns the instance of the metadata property builder.\n   */\n  typed<T extends SchemaType>(type: T) {\n    return new TypedBuilder<SchemaTypeMap[T] | undefined>()\n      .setup({...this.options, ...this.annotation, type})\n  }\n\n  /**\n   * Sets the property as a \"single select\" property.\n   * @param values the possible values for the property.\n   * @returns the instance of the metadata property builder.\n   */\n  oneOf<U extends string | number>(...values: U[]) {\n    const result = new OneOfBuilder<U>().setup({...this.options, ...this.annotation, type: 'enum'})\n    result.values = values\n    return result\n  }\n\n  /**\n   * Sets the property as a \"multiple select\" property.\n   * @param values the possible values for the property.\n   * @returns the instance of the metadata property builder.\n   */\n  someOf<U extends string | number>(...values: U[]) {\n    const result = new SomeOfBuilder<U>().setup({...this.options, ...this.annotation, type: 'enum'})\n    result.values = values\n    return result\n  }\n}\n","import type {FirstParameter} from '../types'\nimport type {Annotation} from '../types/annotations/Annotation'\nimport {ContainerAnnotation} from '../types/annotations/ContainerAnnotation'\nimport {AnnotationBuilder} from './builders/AnnotationBuilder'\n\n/**\n * Type predicate, asserts that the value is an instance of ContainerAnnotation. **Internal use only.**\n * @param value the value.\n * @returns true if the value is an instance of ContainerAnnotation, false otherwise.\n */\nexport const isContainer = (value: Annotation): value is ContainerAnnotation => {\n  return value instanceof ContainerAnnotation\n}\n\nexport const createAnnotation = AnnotationBuilder.create\n\n/**\n * Creates an instance of the builder class to define the property's metadata.\n * @param editor editor type for editing the property.\n * @returns the instance of the builder class to define the property's metadata.\n */\nexport function createProperty(editor: FirstParameter<typeof createAnnotation>) {\n  return createAnnotation(editor).setup({annotationType: 'Property'})\n}\n\n/**\n * Extracts component properties default values from annotations . **Internal use only.**\n * @param annotations the array of component annotations.\n * @returns the object containing component properties default values.\n */\nexport function getDefault(annotations: Annotation[]): Readonly<Record<string, any>> {\n  return annotations.reduce((props, an) => {\n    props[an.key] = an.default\n    return props\n  }, {} as Record<string, any>)\n}\n\n/**\n * Extracts CSS properties default values from annotations . **Internal use only.**\n * @param annotations the array of component annotations.\n * @returns the object with CSS properties default values.\n */\nexport function getDefaultCss(annotations: Annotation[]): Readonly<Record<string, any>> {\n  return ({\n    any: {\n      object: getDefault(annotations)\n    }\n  })\n}\n","import type {EditorType} from '../../types/annotations/EditorType'\nimport {AnnotationBuilder} from './AnnotationBuilder'\n\n/**\n * The builder class to define the node metadata property.\n * @template T the property type.\n */\nexport class NodeAnnotationBuilder<T> extends AnnotationBuilder<T> {\n\n  /**\n   * Creates a component property metadata builder.\n   * @param editor the property editor type.\n   * @template T the property type.\n   */\n  constructor(editor: EditorType) {\n    super(editor)\n  }\n\n  /**\n   * Specifies a function that will create conditions that check if a child component can be bound to a parent slot.\n   * @param slotConditionBuilder the function that returns a string containing the source code of the function to bind child components.\n   * @returns the instance of the metadata property builder.\n   */\n  withSlotConditionBuilder(slotConditionBuilder: (props: any) => string): this {\n    return this.setup({slotConditionBuilder})\n  }\n}\n\n/**\n * Creates a component property metadata builder.\n * @param editor the property editor type.\n * @template T the property type.\n * @returns the NodeAnnotationBuilder instance.\n */\nexport function createNodeAnnotation<T>(editor: EditorType) {\n  return new NodeAnnotationBuilder<T>(editor)\n}\n\n","import type {RuleValidator} from '../../validation'\n\n/**\n * Returns true if the component key is unique across the entire component tree. **Internal use only.**\n * @param value the component key.\n * @param store the form viewer settings.\n * @returns true if the component key is unique across the entire component tree.\n */\nexport const isUniqueKey: RuleValidator<string> = (value, store) =>\n  1 === store.reduceScreen((acc, cd) => cd.key === value ? acc + 1 : acc, 0)\n","import type {ReactNode} from 'react'\nimport {createAnnotation, createProperty} from './utils'\nimport {createNodeAnnotation} from './utils/builders/NodeAnnotationBuilder'\nimport {isUniqueKey} from './utils/isUniqueKey'\n\n/**\n * The annotation for the 'key' property of the component.\n */\nexport const key = createAnnotation('key')\n  .typed('string')\n  .required\n  .hinted('Unique component key')\n  .calculable(false)\n  .validated(isUniqueKey, {code: 'unique_key', message: 'The key must be unique!'})\n  .build('key')\n\n/**\n * The annotation builder for the 'key' property of a component.\n */\nexport const htmlAttributes = createAnnotation('htmlAttributes')\n\n/**\n * The annotation builder for arbitrary HTML attributes of a component.\n */\nexport const validation = createAnnotation('validation')\n\n/**\n * The annotation builder for a component property with type 'string'.\n */\nexport const string = createProperty('string').typed('string').localize\n\n/**\n * The annotation builder for a component property with type 'object'. It can accommodate any nested POJO that contains primitive values.\n */\nexport const object = createProperty('object').typed('object')\n\n/**\n * The annotation builder for a component property with type 'boolean'.\n */\nexport const boolean = createProperty('boolean').typed('boolean')\n\n/**\n * Annotation builder for a read-only property of a component with type 'boolean'.\n */\nexport const readOnly = boolean.setup({readOnly: true})\n\n/**\n * The annotation builder for a component property with type 'number'.\n */\nexport const number = createProperty('number').typed('number')\n\n/**\n * The annotation builder for a component property with type 'CSS unit' (width, height, etc.).\n */\nexport const size = createProperty('size').typed('string')\n\n/**\n * The annotation builder for a component property with type 'Date'.\n */\nexport const date = createProperty('date').typed('date')\n\n/**\n * The annotation builder for a component property with type 'Time'.\n */\nexport const time = createProperty('time').typed('time')\n\n/**\n * The annotation builder for a component property with type 'Array'.\n */\nexport const array = createProperty('array').array\n\n/**\n * The annotation builder for a component property with type 'color' (e.g. rgba(71, 167, 122, 0.72)).\n */\nexport const color = createProperty('color').typed('string')\n\n/**\n * The annotation builder for the form property describing the type of form tooltip.\n */\nexport const tooltipType = createAnnotation('tooltipType').typed('string')\n\n/**\n * The annotation builder for a component property containing a CSS dimension.\n */\nexport const cssSize = createAnnotation('size').setup({calculable: false})\n\n/**\n * The annotation builder for a component property containing a CSS color.\n */\nconst cssColor = createAnnotation('color').setup({calculable: false})\n\n/**\n * The annotation builder for the component property containing the CSS class name.\n */\nexport const className = createProperty('string')\n  .calculable(true)\n  .build('className')\n\n/**\n * The annotation builder for a component property with type 'event' (or event handler, or just a function).\n */\nexport const event = createAnnotation<Function>('event').setup({annotationType: 'Event'})\n\n/**\n * The annotation builder for a component property with type 'ReactNode'.\n */\nexport const node = createNodeAnnotation<ReactNode>('node').setup({annotationType: 'Container'})\n\n/**\n * The annotation builder for a component property with type 'ReactNode[]'.\n */\nexport const nodeArray = createNodeAnnotation<ReactNode[]>('nodeArray')\n  .setup({annotationType: 'Container', bindingType: 'array'})\n\n/**\n * The annotation builder for a component property with type 'enum', the property value can only be one of enum.\n */\nexport const oneOf = createProperty('oneOf').oneOf.bind(createProperty('oneOf'))\n\n/**\n * The annotation builder for a component property with type 'enum', the property value can contain multiple enum values.\n */\nexport const someOf = createProperty('someOf').someOf.bind(createProperty('someOf'))\n\n/**\n * The annotation builder for component tooltip properties.\n */\nexport const tooltipProps = createAnnotation('tooltipProps')\n\n/**\n * The annotation builder for the synthetic 'renderWhen' property of the component.\n */\nexport const renderWhen = createAnnotation('renderWhen').typed('boolean')\n\n/**\n * The annotations for generic CSS properties of a component.\n */\nexport const commonStyles = {\n  width: cssSize.setup({default: '100%'}),\n  height: cssSize,\n  marginTop: cssSize,\n  marginRight: cssSize,\n  marginBottom: cssSize,\n  marginLeft: cssSize,\n  color: cssColor,\n  backgroundColor: cssColor,\n}\n\n/**\n * The annotations for generic CSS properties of a container component.\n */\nexport const containerStyles = {\n  flexDirection: oneOf('column', 'row', 'column-reverse', 'row-reverse'),\n  gap: size,\n  alignItems: oneOf('start', 'center', 'baseline', 'end', 'stretch'),\n  justifyContent: oneOf('flex-start', 'flex-end', 'center', 'space-between', 'space-around',\n    'space-evenly', 'start', 'end', 'left', 'right'),\n  flexWrap: oneOf('wrap', 'nowrap', 'wrap-reverse')\n}\n\nexport * from './utils'\nexport {timeFormat} from './consts'\n","import {reduce} from 'lodash-es'\nimport {string} from './index'\nimport type {Annotation} from './types/annotations/Annotation'\nimport type {Annotations} from './utils/builders/Annotations'\nimport type {BuilderSetup} from './utils/builders/BaseBuilder'\n\n/**\n * Converts the object containing component property metadata into an array. **Internal use only.**\n * @param annotations the object containing component property metadata.\n * @param setup the custom options for the component's property metadata builder.\n * @returns the metadata array of the component properties.\n */\nexport function toArray<T extends object = any>(annotations?: Annotations<T>, setup: BuilderSetup = {}) {\n  return reduce(annotations, (prev: Annotation[], value, key) => {\n    prev.push(value?.setup(setup)?.build(key) ?? string.setup(setup).build(key))\n    return prev\n  }, [])\n}\n","import {toArray} from './toArray'\nimport type {Annotations} from './utils/builders/Annotations'\n\n/**\n * Converts the object containing component property metadata into an array of style properties. **Internal use only.**\n * @param annotations the object containing component property metadata.\n * @returns the object containing component properties default values.\n */\nexport function toStyleProperties(annotations?: Annotations<any>) {\n  return toArray(annotations, {annotationType: 'Style', calculable: false})\n}\n","import {useBuilderContext} from '../../utils/contexts/BuilderContext'\nimport {useStore} from '../../utils/contexts/StoreContext'\nimport {array, containerStyles, getDefaultCss, node, string} from '../annotation'\nimport {toArray} from '../annotation/toArray'\nimport {toStyleProperties} from '../annotation/toStyleProperties'\nimport {Model} from '../define'\nimport {RepeaterItem} from './RepeaterItem'\nimport type {RepeaterProps} from './RepeaterProps'\nimport {RepeaterPropsProvider} from './RepeaterPropsContext'\n\ntype RepeaterContainerProps = Pick<RepeaterProps, 'wrapperClassName' | 'children'>\n\nconst RepeaterContainer = (props: RepeaterContainerProps) => {\n  const viewerMode = useBuilderContext().builderMode === 'viewer'\n  const store = useStore()\n  const insideTemplate = store.parentStore\n\n  if (viewerMode && !props.children) return null\n\n  return <div className={props.wrapperClassName}>\n    {viewerMode || insideTemplate\n      ? props.children\n      : <RepeaterItem>{props.children}</RepeaterItem>\n    }\n  </div>\n}\n\nconst Repeater = (props: RepeaterProps) => {\n  return <RepeaterPropsProvider value={props}>\n    <RepeaterContainer wrapperClassName={props.wrapperClassName}>\n      {props.children}\n    </RepeaterContainer>\n  </RepeaterPropsProvider>\n}\nRepeater.displayName = 'Repeater'\n\nexport const repeaterValuedAnnotation = array.valued\n  .setup({editor: 'arrayOfObject'})\n\nexport const repeaterProps = toArray<RepeaterProps>({\n  itemRenderWhen: string.notLocalize\n    .hinted('The expression or function to conditionally render a repeater item.'),\n  value: repeaterValuedAnnotation,\n  children: node,\n})\n\nconst {flexDirection, gap} = containerStyles\n\nexport const repeaterItemStyleProperties = toStyleProperties({\n  display: string.default('flex').hideEditor(),\n  flexDirection: flexDirection.default('column').named('Item direction').hinted('Item direction'),\n  gap: gap.default('20px').named('Item gap').hinted('Item gap')\n})\n\nconst repeaterItemCss = getDefaultCss(repeaterItemStyleProperties)\n\nexport const repeaterWrapperStyleProperties = toStyleProperties({\n  display: string.default('flex').hideEditor(),\n  flexDirection: flexDirection.default('column').hinted('Repeater direction'),\n  gap: gap.default('20px').hinted('Repeater gap')\n})\n\nconst repeaterWrapperCss = getDefaultCss(repeaterWrapperStyleProperties)\n\nconst repeaterDefaultProps = repeaterProps\n  .filter(an => typeof an.default !== 'undefined')\n  .reduce<Record<string, any>>((acc, an) => {\n    acc[an.key] = an.default\n    return acc\n  }, {})\n\nexport const repeaterModel = new Model(Repeater, 'Repeater', undefined, 'value', 'array',\n  repeaterDefaultProps, repeaterItemCss, repeaterWrapperCss, 'Repeater', 'repeater')\n","/**\n * Asynchronous function constructor.\n */\nexport const AsyncFunction = async function () {}.constructor;\n","import type {KeySymbol} from '../../consts'\nimport {AsyncFunction} from '../../utils/AsyncFunction'\n\n/**\n * The type for the event name.\n */\nexport type EventName = string\n\n/**\n * The type for the parameter name.\n */\nexport type ParameterName = string\n\n/**\n * Parameter type.\n */\nexport type ParameterType = 'string' | 'number' | 'boolean'\n\n/**\n * Represents a set of action parameters.\n */\nexport type ActionParameters = Record<ParameterName, ParameterType>\n\n/**\n * The type of the argument value of the function.\n */\nexport type ArgumentValue = string | number | boolean\n\n/**\n * Action type.\n */\nexport type ActionType = 'common' | 'code' | 'custom'\n\n/**\n * It will be transformed in arguments before passing in action.\n */\nexport type Arguments = Record<ParameterName, ArgumentValue>\n\n/**\n * Action Storage.\n * Used for add a new action, store information about it.\n */\nexport type ActionData = {\n  /**\n   * The unique action key.\n   */\n  [KeySymbol]?: string\n  /**\n   * The action name.\n   */\n  name: string\n  /**\n   * The action type.\n   */\n  type: ActionType\n  /**\n   * The action arguments.\n   */\n  args?: Arguments\n}\n\n/**\n * Represents a set of action definitions.\n */\nexport type ActionValues = Record<string, ActionDefinition>\n\n/**\n * Represents a named action definition.\n */\nexport type NamedActionDefinition = {\n  /**\n   * The name of action definition.\n   */\n  name: string\n  /**\n   * The definition of an action.\n   */\n  actionDefinition: ActionDefinition\n}\n\n/**\n * Represents the definition of an action.\n */\nexport class ActionDefinition {\n\n  /**\n   * Creates a new instance of the ActionDefinition class.\n   * @param func the function of an action.\n   * @param body the source code of the Action.\n   * @param params the parameters of the Action.\n   */\n  constructor(\n    public readonly func: Func,\n    public readonly body?: string,\n    public readonly params: ActionParameters = {},\n  ) {\n  }\n\n  /**\n   * Creates an action from the function.\n   * @param func the function of an action.\n   * @param params the parameters of the Action.\n   * @returns the new instance of the ActionDefinition class.\n   */\n  static functionalAction(func: Func, params: ActionParameters = {}): ActionDefinition {\n    return new ActionDefinition(func, undefined, params)\n  }\n\n  /**\n   * Creates an action from the source code.\n   * @param body the source code of the Action.\n   * @param params the parameters of the Action.\n   * @returns the new instance of the ActionDefinition class.\n   */\n  static sourceAction(body: string, params: ActionParameters = {}): ActionDefinition {\n    const func = AsyncFunction('e, args', body)\n    return new ActionDefinition(func, body, params)\n  }\n\n  /**\n   * Correctly creates the {@link ActionDefinition} from deserialized data.\n   * @param value the deserialized data.\n   * @returns the ActionDefinition instance.\n   */\n  static createFromObject(value: any) {\n    return ActionDefinition.sourceAction(value.body, value.params)\n  }\n}\n\n/**\n * Converts the input object to an ActionValues object. **Internal use only.**\n * @param obj the input object.\n * @returns the converted ActionValues object.\n */\nexport const createActionValuesFromObject = (obj: any) => {\n  const result: ActionValues = {}\n  if (!obj) return result\n\n  Object.keys(obj).forEach(key => {\n    const value = obj[key]\n    result[key] = ActionDefinition.createFromObject(value)\n  })\n  return result\n}\n\n/**\n * The type of arbitrary function that returns void or Promise&lt;void&gt;.\n */\nexport type Func = (...arg: any[]) => void | Promise<void>\n","/**\n * The DidMountEvent event name.\n */\nexport const DidMountEvent = 'onDidMount'\n\n/**\n * The WillUnmountEvent event name.\n */\nexport const WillUnmountEvent = 'onWillUnmount'\n","import type {SyntheticEvent} from 'react'\nimport type {ComponentState} from '../../../stores/ComponentState'\nimport type {Store} from '../../../stores/Store'\nimport type {ComponentData} from '../../../utils/contexts/ComponentDataContext'\n\nfunction createComponentDataProxy(componentData: ComponentData) {\n  return new Proxy(componentData, {\n    get(target, property: string) {\n      if (property === 'toJSON') return () => target.data\n      return target.data[property]\n    },\n    set(target, property: string, value): boolean {\n      target.fields.get(property)?.setValue(value)\n      return true\n    }\n  })\n}\n\n/**\n * Arguments passed to the event handler.\n */\nexport class ActionEventArgs {\n  #componentDataProxy: any\n  #parentComponentDataProxy: any\n  #rootComponentDataProxy: any\n\n  /**\n   * The component properties that were used to render the sender component.\n   */\n  renderedProps: Record<string, any>\n\n  /**\n   * The index of the component in the array, if the component is in the array.\n   */\n  readonly index?: number\n\n  /**\n   * Creates arguments for the event handler.\n   * @param type the event type.\n   * @param sender the component that triggered the event.\n   * @param store the form viewer settings.\n   * @param args the event arguments.\n   * @param state the {@link ComponentState} instance.\n   */\n  constructor(\n    readonly type: string,\n    readonly sender: ComponentData,\n    readonly store: Store,\n    readonly args: any[],\n    state: ComponentState\n  ) {\n    this.renderedProps = state.get\n    this.index = sender.nearestIndex\n    const indexExists = typeof this.index !== undefined\n    const componentData = indexExists\n      ? sender.dataRootProvider?.dataRoot ?? this.store.formData\n      : this.store.formData\n    this.#componentDataProxy = createComponentDataProxy(componentData)\n    if (indexExists) {\n      const parentComponentData = componentData.parent ?? this.store.formData\n      this.#parentComponentDataProxy = createComponentDataProxy(parentComponentData)\n    }\n    this.#rootComponentDataProxy = createComponentDataProxy(this.store.formData)\n  }\n\n  /**\n   * Sets user-defined properties for the React component that override other properties of the component.\n   * @param props the component properties.\n   */\n  setUserDefinedProps = (props?: Record<string, any>) => {\n    this.sender.userDefinedProps = props\n  }\n\n  /**\n   * @returns the event handled by the event handler.\n   */\n  get event(): SyntheticEvent | null {\n    return this.args.find(this.#isEvent)\n  }\n\n  /**\n   * @returns the first element of the event argument array, which is treated as a value.\n   */\n  get value() {\n    return this.args.filter(v => typeof v !== 'undefined').find(this.#isNotEvent)\n  }\n\n  /**\n   * @returns the object for reading and changing form data.\n   */\n  get data(): Record<string, unknown> {\n    return this.#componentDataProxy\n  }\n\n  /**\n   * @returns the object to read and modify parent data (available for array elements).\n   */\n  get parentData(): Record<string, unknown> | undefined {\n    return this.#parentComponentDataProxy\n  }\n\n  /**\n   * @returns the object to read and modify root form data.\n   */\n  get rootData(): Record<string, unknown> {\n    return this.#rootComponentDataProxy\n  }\n\n  #isEvent = (value: any) => Boolean(value && value.target && value.type && value.preventDefault)\n  #isNotEvent = (value: any) => !this.#isEvent(value)\n}\n\n/**\n * Description of the event argument type for the code editor.\n */\nexport const ActionEventArgsDeclaration = `\n/**\n * Arguments passed to the event handler.\n */\ndeclare class ActionEventArgs {\n\n  /**\n   * The event type.\n   */\n  readonly type: string\n\n  /**\n   * The component that triggered the event.\n   */\n  readonly sender: ComponentData\n  \n  /**\n   * The component properties that were used to render the sender component.\n   */\n  readonly renderedProps: Record<string, any>\n\n  /**\n   * The index of the component in the array, if the component is in the array.\n   */\n  readonly index?: number\n\n  /**\n   * Sets current props of component.\n   */\n  readonly setUserDefinedProps: (props: Record<string, any>) => void\n\n  /**\n   * The form viewer settings.\n   */\n  readonly store: Store\n\n  /**\n   * The event arguments.\n   */\n  readonly args: any[]\n\n  /**\n   * @returns the event handled by the event handler.\n   */\n  get event(): SyntheticEvent | null\n\n  /**\n   * @returns the first element of the event argument array, which is treated as a value.\n   */\n  get value(): any\n  \n  /**\n   * @returns the object for reading and changing form data.\n   */\n  get data(): Record<string, unknown>\n  \n  /**\n   * @returns the object to read and modify parent data (available for array elements).\n   */\n  get parentData(): Record<string, unknown> | undefined\n\n  /**\n   * @returns the object to read and modify root form data.\n   */\n  get rootData(): Record<string, unknown>\n}\n`\n","import {event, htmlAttributes, renderWhen, tooltipProps, validation} from '../annotation'\nimport type {Annotation} from '../annotation/types/annotations/Annotation'\nimport {DidMountEvent, WillUnmountEvent} from '../event'\n\n/**\n * Common metadata for the component for the form builder.\n */\nexport const modules: Annotation[] = [\n  tooltipProps.build('tooltipProps'),\n  renderWhen.build('renderWhen'),\n  htmlAttributes.build('htmlAttributes'),\n  validation.build('validation'),\n  event.build(DidMountEvent),\n  event.build(WillUnmountEvent),\n]\n","import type {ComponentType, ReactNode} from 'react'\nimport type {Annotation} from '../../annotation/types/annotations/Annotation'\nimport type {ComponentKind} from '../types'\nimport type {ComponentMetadataEventListeners} from './ComponentMetadataEventListeners'\n\n/**\n * Component metadata for the form builder.\n */\nexport class Meta {\n  /**\n   * Creates the component metadata for the form builder.\n   * @param type the component type name.\n   * @param properties the component's properties metadata.\n   * @param css the component's CSS metadata.\n   * @param wrapperCss the component's wrapper CSS metadata.\n   * @param modules common metadata for the component.\n   * @param customPreview the custom ReactNode to be drawn on the toolbar.\n   * @param valuedAn the metadata for the component value.\n   * @param kind the component kind.\n   * @param initialJson the JSON source for the component (instance of {@link ComponentStore} class serialised to JSON).\n   * @param eventListeners the component metadata event listeners.\n   * @param icon the component icon.\n   */\n  constructor(\n    readonly type: string,\n    readonly properties: Annotation[],\n    readonly css: Annotation[],\n    readonly wrapperCss: Annotation[],\n    readonly modules: Annotation[],\n    readonly customPreview?: ReactNode,\n    readonly valuedAn?: Annotation,\n    readonly kind: ComponentKind = 'component',\n    readonly initialJson?: string,\n    readonly eventListeners?: ComponentMetadataEventListeners,\n    readonly icon?: ComponentType\n  ) {\n  }\n}\n","/**\n * The unique Symbol for the key property.\n */\nexport const KeySymbol = Symbol('key')\n","/**\n * Computes the autorun name based on the owner, name, and parameters. **Internal use only.**\n * @param owner the owner of the autorun.\n * @param name the name of the autorun.\n * @param params the parameters for specific autorun.\n * @returns the computed autorun name.\n */\nexport function nameAutorun(owner: string, name: string, params: Record<string, any> = {}) {\n  return nameObservableEntity('autorun', owner, name, params)\n}\n\n/**\n * Computes the observable name based on the owner, name, and parameters. **Internal use only.**\n * @param owner the owner of the observable.\n * @param params the parameters for specific observable.\n * @returns the computed observable name.\n */\nexport function nameObservable(owner: string, params: Record<string, any> = {}) {\n  return nameObservableEntity('observable', owner, undefined, params)\n}\n\nfunction nameObservableEntity(observableName: string, owner: string, name?: string, params: Record<string, any> = {}) {\n  const paramsString = Object.keys(params)\n    .map(key => `${key}=${params[key]}`)\n    .join('_')\n  return `${observableName}_${owner}_${name ? `${name}_` : ''}${paramsString}`\n}\n","import {assign} from 'lodash-es'\nimport {makeAutoObservable} from 'mobx'\nimport {KeySymbol} from '../consts'\nimport type {ActionData, EventName} from '../features/event'\nimport type {Css} from '../features/style/types'\nimport type {BoundValueSchema} from '../features/validation'\nimport {nameObservable} from '../utils/observableNaming'\n\nlet actionDataCounter = 0\n\nfunction initActionDataKey(actionData: ActionData) {\n  if (actionData[KeySymbol]) return\n  ++actionDataCounter\n  actionData[KeySymbol] = `actionData_${actionDataCounter}`\n}\n\nfunction initActionDataKeys(componentStore: ComponentStore) {\n  const events = componentStore.events\n  if (events) {\n    Object.values(events)\n      .forEach(data => data.forEach(initActionDataKey))\n  }\n  componentStore.children?.forEach(initActionDataKeys)\n}\n\n/**\n * The component property value type.\n */\nexport type ComponentPropertyComputeType = 'function' | 'localization'\n\n/**\n * The value of the component property.\n */\nexport interface ComponentProperty {\n  /**\n   * The simple value of a component property.\n   */\n  value?: any\n  /**\n   * Source code of the function for calculating the value of a component property.\n   */\n  fnSource?: string\n  /**\n   * Type of the component's calculated property. If not specified - the value from value is used.\n   */\n  computeType?: ComponentPropertyComputeType\n}\n\n/**\n * Returns true if the property value is calculated by the function, otherwise false. **Internal use only.**\n * @param componentProperty the component property.\n * @returns true if the property value is calculated by the function, otherwise false.\n */\nexport function isFunctionalProperty(componentProperty?: ComponentProperty) {\n  return componentProperty?.computeType === 'function'\n}\n\n/**\n * Returns true if the property value is localized, otherwise false. **Internal use only.**\n * @param componentProperty the component property.\n * @returns true if the property value is localized, otherwise false.\n */\nexport function isLocalizedProperty(componentProperty?: ComponentProperty) {\n  return componentProperty?.computeType === 'localization'\n}\n\n/**\n * The arbitrary HTML attributes for the component.\n */\nexport type HtmlAttribute = Record<string, string>\n\n//No functions here\n/**\n * Component settings for serialization in JSON.\n */\nexport class ComponentStore {\n\n  /**\n   * The React component key.\n   */\n  key = ''\n\n  /**\n   * The component type of the form viewer.\n   */\n  type = ''\n\n  /**\n   * The component properties.\n   */\n  props: Record<string, ComponentProperty> = {}\n\n  /**\n   * The component CSS styles.\n   */\n  css?: Css\n\n  /**\n   * The component wrapper CSS styles.\n   */\n  wrapperCss?: Css\n\n  /**\n   * The set of event handlers.\n   */\n  events?: Record<EventName, ActionData[]>\n\n  /**\n   * The array of child components.\n   */\n  children?: ComponentStore[]\n\n  /**\n   * The component value validation settings.\n   */\n  schema?: BoundValueSchema\n\n  /**\n   * The set of arbitrary HTML attributes added to the component.\n   */\n  htmlAttributes?: HtmlAttribute[]\n\n  /**\n   * The tooltip settings.\n   */\n  tooltipProps?: Record<string, ComponentProperty>\n\n  /**\n   * The name of the occupied component property in the parent component.\n   */\n  slot?: string\n\n  /**\n   * The condition for binding a child element to a parent element.\n   */\n  slotCondition?: string\n\n  /**\n   * The expression or function to conditionally render a component.\n   */\n  renderWhen?: ComponentProperty\n\n  /**\n   * Creates the component settings.\n   * @param key the React component key.\n   * @param type the component type of the form viewer.\n   */\n  constructor(key: string, type: string) {\n    this.key = key\n    this.type = type\n    makeAutoObservable(this, undefined, {name: nameObservable('ComponentStore', {key: key})})\n  }\n\n  /**\n   * Correctly creates the {@link ComponentStore} from deserialized data.\n   * @param value the deserialized data.\n   * @returns the component Store.\n   */\n  static createFromObject(value: any) {\n    const result = assign(new ComponentStore(value.key, value.type), value)\n    initActionDataKeys(result)\n    return result\n  }\n\n  /**\n   * Adds the event handler for component.\n   * @param store the target {@link ComponentStore}.\n   * @param eventName the target event name.\n   * @param data the {@link ActionData}.\n   */\n  static addEventHandler(store: ComponentStore, eventName: string, data: ActionData) {\n    initActionDataKey(data)\n    store.events ??= {}\n    store.events[eventName] ??= []\n    store.events[eventName].push(data)\n  }\n}\n","import {observer} from 'mobx-react'\nimport type {ComponentType} from 'react'\nimport {ComponentStore} from '../stores/ComponentStore'\n\n/**\n * Type predicate, asserts that the value is a string. **Internal use only.**\n * @param value the value.\n * @returns true if the value is a string, false otherwise.\n */\nexport function isString(value: any): value is string {\n  return typeof value === 'string'\n}\n\n/**\n * Type predicate, asserts that the value is a number. **Internal use only.**\n * @param value the value.\n * @returns true if the value is a number, false otherwise.\n */\nexport function isNumber(value: any): value is number {\n  return typeof value === 'number'\n}\n\n/**\n * Type predicate, asserts that the value is a Promise. **Internal use only.**\n * @param value the value.\n * @returns true if the value is a Promise, false otherwise.\n */\nexport function isPromise<T = any>(value: any): value is Promise<T> {\n  return typeof value === 'object' && typeof value.then === 'function'\n}\n\n/**\n * Type predicate, asserts that the value is a {@link Record}. **Internal use only.**\n * @param value the value.\n * @returns true if the value is a Record, false otherwise.\n */\nexport function isRecord(value: any): value is Record<string, unknown> {\n  return typeof value === 'object'\n}\n\n/**\n * Creates the observable React component. **Internal use only.**\n * @param displayName the displayName value of the React component.\n * @param component the React component.\n * @returns the observable React component.\n */\nexport function namedObserver<T extends ComponentType<any>>(displayName: string, component: T) {\n  const observerComponent = observer(component)\n  observerComponent.displayName = displayName\n  return observerComponent\n}\n\n/**\n * The empty component settings object. **Internal use only.**\n */\nexport const emptyComponentStore = new ComponentStore('', '')\n","/**\n * The character used to represent a dot.\n */\nconst dotCharacter = '.'\n\n/**\n * The internal value used to replace dots in object keys.\n */\nexport const dotInternalValue = '__DOT__'\n\n/**\n * Replaces all dots in the value with a special character.\n * @param value the value to replace the dots.\n * @returns the value with the dots replaced.\n */\nexport function restoreDots(value: string): string {\n  return value.replace(new RegExp(`\\\\${dotInternalValue}`, 'g'), dotCharacter)\n}\n\n/**\n * Replaces all special characters with dots.\n * @param value the value to replace the special characters.\n * @returns the value with the special characters replaced.\n */\nexport function replaceDots(value: string): string {\n  return value.replace(new RegExp(`\\\\${dotCharacter}`, 'g'), dotInternalValue)\n}\n\n","/**\n * Converts the raw id to a Fluent compatible id, i.e. replaces all the spaces with underscores. **Internal use only.**\n * @param rawId some raw id.\n * @returns the Fluent compatible id.\n */\nexport const getFluentCompatibleId = (rawId: string) => {\n  return rawId.replace(new RegExp(' ', 'g'), '_')\n}\n","import type {FluentVariable} from '@fluent/bundle/esm/bundle'\nimport type {FluentType} from '@fluent/bundle/esm/types.js'\n\n/**\n * The type checker for the {@link FluentVariable} type.\n * @param value the value to check.\n * @returns true if the value is a {@link FluentVariable} type, false otherwise.\n */\nexport const isFluentVariable = (value: any): value is FluentVariable => {\n  if (typeof value === 'string' || typeof value === 'number' || value instanceof Date) {\n    return true\n  }\n\n  return typeof (value as FluentType<unknown>)?.value !== 'undefined'\n}\n","import type {FluentVariable} from '@fluent/bundle/esm/bundle'\nimport {dotInternalValue} from './dots'\nimport {getFluentCompatibleId} from './getFluentCompatibleId'\nimport {isFluentVariable} from './isFluentVariable'\n\n/**\n * Converts the form data to a Fluent compatible. **Internal use only.**\n * @param data the form data.\n * @param parentKey the parent property key.\n * @returns all the form data that is of the FluentVariable type.\n * Additionally, the keys of the returned object are converted to the snake case.\n */\nexport const getFluentData = (data: Record<string, unknown>, parentKey = ''): Record<string, FluentVariable> => {\n  const fluentData: Record<string, FluentVariable> = {}\n  for (const [key, value] of Object.entries(data)) {\n    const newKey = parentKey ? `${parentKey}${dotInternalValue}${key}` : key\n    if (isFluentVariable(value)) {\n      fluentData[getFluentCompatibleId(newKey)] = value\n    } else if (typeof value === 'boolean') {\n      fluentData[getFluentCompatibleId(newKey)] = value ? 'true' : 'false'\n    } else if (typeof value === 'object' && value !== null) {\n      Object.assign(fluentData, getFluentData(value as Record<string, unknown>, newKey))\n    }\n  }\n  return fluentData\n}\n","/**\n * Represents a synchronous event handler.\n * @template TSender the type of the event source.\n * @template TEventArgs the type of the event arguments.\n */\nexport type SyncEventHandler<TSender, TEventArgs> = (source: TSender, eventArgs: TEventArgs) => void\n\n/**\n * Represents a synchronous event that can be subscribed to and invoked. **Internal use only.**\n * @template TSender the type of the object that raises the event.\n * @template TEventArgs the type of the event arguments.\n */\nexport class SyncEvent<TSender, TEventArgs> {\n  private handlers: Array<SyncEventHandler<TSender, TEventArgs>> = []\n\n  /**\n   * Adds a handler to the list of subscribers.\n   * @param handler the handler function to be added.\n   */\n  public subscribe(handler: SyncEventHandler<TSender, TEventArgs>): void {\n    this.handlers.push(handler)\n  }\n\n  /**\n   * Removes the specified event handler from the list of handlers.\n   * @param handler the event handler to remove.\n   */\n  public unsubscribe(handler: SyncEventHandler<TSender, TEventArgs>): void {\n    this.handlers = this.handlers.filter(h => h !== handler)\n  }\n\n  /**\n   * Returns true if the object has subscribers, false otherwise.\n   * @returns true if the object has handlers registered for events, otherwise returns false.\n   */\n  get isSubscribed(): boolean {\n    return this.handlers.length > 0\n  }\n\n  /**\n   * Invokes the event by calling all registered event handlers.\n   * @param sender the sender of the event.\n   * @param eventArgs the event arguments.\n   */\n  public invoke(sender: TSender, eventArgs: TEventArgs): void {\n    // Duplicate the array to avoid side effects during iteration.\n    this.handlers.slice().forEach(handler => handler(sender, eventArgs))\n  }\n\n  /**\n   * Dispose method to release all handlers.\n   */\n  public dispose() {\n    this.handlers = []\n  }\n}\n","/**\n * Executes a given function on each node of a tree. **Internal use only.**\n * @param tree the root node of the tree.\n * @param fn the function to be executed on each node of the tree.\n */\nexport function treeForEach<T extends { children?: T[] }>(tree: T, fn: (treeNode: T) => void) {\n  fn(tree)\n  tree.children?.forEach(child => treeForEach(child, fn))\n}\n\n/**\n * Finds the depth of a given element in a tree. **Internal use only.**\n * @param value the root of the tree.\n * @param element the element to find the depth of.\n * @param depth the current depth of the tree (optional, default is 0).\n * @returns the depth of the element in the tree, or undefined if the element is not found.\n */\nexport function findTreeElementDepth<T extends { children?: T[] }>(value: T, element?: T, depth = 0): number | undefined {\n  if (value === element) return depth\n\n  if (!value.children) return\n\n  depth = depth + 1\n  for (const child of value.children) {\n    const childNode = findTreeElementDepth(child, element, depth)\n    if (childNode) return childNode\n  }\n}\n","import {camelCase, isArray, isEmpty, merge} from 'lodash-es'\nimport type {IReactionDisposer} from 'mobx'\nimport {makeAutoObservable, reaction} from 'mobx'\nimport type {Model} from '../../features/define'\nimport type {FormValidator, FormValidators} from '../../features/form-viewer/FormValidators'\nimport {getFluentData} from '../../features/localization/getFluentData'\nimport type {Field} from '../../features/validation'\nimport type {ComponentStore} from '../../stores/ComponentStore'\nimport {createNonNullableContext} from '../createNonNullableContext'\nimport type {IFormData} from '../IFormData'\nimport {nameObservable} from '../observableNaming'\nimport {SyncEvent} from '../SyncEvent'\nimport {treeForEach} from '../treeUtils'\n\nlet counter = 0\n\nfunction generateId(prefix: string) {\n  return `${prefix}_${++counter}`\n}\n\n/**\n * Represents the event argument for the event when the component key changes.\n */\nexport class ComponentKeyChangedEventArgs {\n  /**\n   * Constructs a new instance of the ComponentKeyChangedEventArgs class.\n   * @param oldKey the old key.\n   * @param newKey the new key.\n   */\n  constructor(readonly oldKey: string, readonly newKey: string) {\n  }\n}\n\n/**\n * Represents a class that holds events related to component data.\n */\nexport class ComponentDataEvents {\n  /**\n   * An event that occurs after a component key change.\n   */\n  readonly onAfterKeyChanged: SyncEvent<ComponentData, ComponentKeyChangedEventArgs> = new SyncEvent()\n  /**\n   * An event that occurs before a component is removed from the component tree.\n   */\n  readonly onBeforeDelete: SyncEvent<ComponentData, undefined> = new SyncEvent()\n\n  /**\n   * Unsubscribe from all events.\n   */\n  dispose() {\n    this.onAfterKeyChanged.dispose()\n    this.onBeforeDelete.dispose()\n  }\n}\n\n/**\n * A provider for a set of components.\n */\nexport interface IComponentDataProvider {\n  /**\n   * @returns the component set.\n   */\n  get componentData(): ComponentData[]\n}\n\n/**\n * Provides the root component for the data in the component tree.\n */\nexport interface IDataRootProvider {\n  /**\n   * @returns the root component for the data in the component tree.\n   */\n  get dataRoot(): ComponentData\n}\n\n/**\n * This tree of elements contains the data required to display the component. It is synchronized with the ComponentStore tree.\n */\nexport class ComponentData implements IFormData {\n  #disposers: IReactionDisposer[]\n  #events?: ComponentDataEvents\n  #formValidators?: FormValidators\n  private _state: Record<string, unknown> = {}\n  /**\n   * The unique identifier.\n   */\n  readonly id: string\n  /**\n   * The component settings.\n   */\n  readonly store: ComponentStore\n  /**\n   * The component metadata.\n   */\n  readonly model: Model\n  /**\n   * The field with the form data.\n   */\n  readonly field?: Field\n  /**\n   * The parent node in the component data tree.\n   */\n  parent?: ComponentData\n  /**\n   * The child nodes in the component data tree.\n   */\n  children: ComponentData[] = []\n\n  /**\n   * User defined properties of the React component.\n   */\n  userDefinedProps?: Record<string, any>\n\n  /**\n   * If true, then validation is in progress.\n   */\n  validating = false\n\n  /**\n   * Specifies the root component for the data in the component tree. **Internal use only.**\n   */\n  dataRootProvider?: IDataRootProvider\n\n  /**\n   * Specifies the index in the array if the component is in the component array.\n   * This is not an index in a parent-child structure.\n   */\n  index?: number\n\n  /**\n   * Constructor.\n   * @param componentStore the component settings.\n   * @param model the component metadata for the form viewer.\n   * @param field the field with the form data.\n   * @param childFactory the factory function that creates {@link ComponentData} instance.\n   * @param formValidators the array of functions that validate the form data.\n   */\n  constructor(componentStore: ComponentStore, model: Model, field: Field | undefined,\n              childFactory: (componentStore: ComponentStore) => ComponentData, formValidators?: FormValidators) {\n    this.store = componentStore\n    this.model = model\n    this.field = field\n    this.id = generateId(this.model.type)\n    this.#formValidators = formValidators\n\n    componentStore.children?.forEach(childComponentStore => {\n      const child = childFactory(childComponentStore)\n      child.setParent(this)\n    })\n\n    makeAutoObservable(this, undefined, {name: nameObservable('ComponentData', {key: componentStore.key})})\n\n    const createKeyChangedReaction = () => {\n      return reaction(() => this.key, (key, oldKey) => {\n        this.invokeOnAfterKeyChanged(this, new ComponentKeyChangedEventArgs(oldKey, key))\n      })\n    }\n\n    this.#disposers = [createKeyChangedReaction()]\n  }\n\n  /**\n   * Sets the new parent for this node.\n   * @param newParent the new parent.\n   */\n  setParent(newParent: ComponentData) {\n    this.parent?.removeChild(this)\n    newParent.addChild(this)\n    this.parent = newParent\n  }\n\n  /**\n   * Inserts the given node after this node.\n   * @param inserted the node to insert.\n   */\n  insertAfterMe(inserted: ComponentData) {\n    this.insert(inserted, 'after')\n  }\n\n  /**\n   * Inserts the given node before this node.\n   * @param inserted the node to insert.\n   */\n  insertBeforeMe(inserted: ComponentData) {\n    this.insert(inserted, 'before')\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get state() {\n    return this._state\n  }\n\n  /**\n   * @returns the key of this node (same as the key of the ComponentStore).\n   */\n  get key(): string {\n    return this.store.key\n  }\n\n  /**\n   * @returns the ComponentDataEvents object.\n   */\n  get events(): ComponentDataEvents {\n    if (!this.#events) {\n      this.#events = new ComponentDataEvents()\n    }\n    return this.#events\n  }\n\n  /**\n   * Find the node with the given key.\n   * @param key the key to find.\n   * @returns the node or undefined if not found.\n   */\n  findByKey(key: string): ComponentData | undefined {\n    if (this.key === key) return this\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i]\n      const found = child.findByKey(key)\n      if (found) return found\n    }\n    return undefined\n  }\n\n  /**\n   * Assigns unique keys to the items in the tree.\n   * @param root the root of the tree to unify keys. Defaults to the root of this tree.\n   * @returns the map of new keys to old keys.\n   */\n  unifyKeys(root: ComponentData) {\n    const keysMap = new Map<string, string>()\n    const keysList: string[] = []\n    treeForEach(root, ({key}: ComponentData) => {\n      keysList.push(key)\n    })\n    treeForEach(this as ComponentData, item => {\n      let count = 1\n      const baseKey = camelCase(item.store.type)\n      const generateKey = () => `${baseKey}${count}`\n      while (keysList.includes(generateKey())) count++\n      const newKey = generateKey()\n      keysMap.set(newKey, item.key)\n      item.store.key = newKey\n      keysList.push(newKey)\n    })\n    return keysMap\n  }\n\n  /**\n   * @returns all the fields in the tree as a map. Starts from this node.\n   */\n  get fields(): Map<string, Field> {\n    return this.collectAllFields(new Map<string, Field>())\n  }\n\n  /**\n   * Deletes this node from the tree.\n   */\n  delete() {\n    this.parent?.removeChild(this)\n    const allNodes = this.collectAllNodesAsArray([])\n    this.invokeOnBeforeDeleted(allNodes)\n    this.disposeNodes(allNodes)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get data() {\n    const result: Record<string, unknown> = {}\n    for (const [key, field] of this.fields) {\n      if (field.storeDataInParentForm) {\n        const fieldValue: Record<string, any> = field.value || {}\n        Object.keys(fieldValue).forEach(i => result[i] = fieldValue[i])\n      } else {\n        result[key] = field.value\n      }\n    }\n    return result\n  }\n\n  /**\n   * @returns the object to read and modify parent data (available for array elements).\n   */\n  get parentData() {\n    const indexExists = typeof this.nearestIndex !== undefined\n    if (!indexExists) return undefined\n    return this.parent?.data ?? this.rootData\n  }\n\n  /**\n   * @returns the object to read and modify root form data.\n   */\n  get rootData() {\n    return this.root.data\n  }\n\n  /**\n   * @returns all the form data that is of the FluentVariable type.\n   * Additionally, the keys of the returned object are converted to the snake case.\n   */\n  get fluentData() {\n    const initializedData = initFormFields(this)\n    return getFluentData(initializedData)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get errors() {\n    const result: Record<string, unknown> = {}\n    for (const [key, field] of this.fields) {\n      if (field.error) result[key] = field.error\n      const errors = field.errors\n      if (errors) {\n        if (!Array.isArray(errors)) {\n          if (field.storeDataInParentForm) Object.keys(errors).forEach(i => result[i] = errors[i])\n          if (!field.storeDataInParentForm && Object.keys(errors).length > 0) result[key] = errors\n        } else {\n          result[key] = errors\n        }\n      }\n    }\n    return result\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get hasErrors() {\n    return Object.keys(this.errors).length > 0\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setAllErrors(message?: string) {\n    this.fields.forEach(f => f.error = message)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async validate() {\n    this.validating = true\n    try {\n      await Promise.allSettled([...this.fields.values()].map(f => f.validate()))\n      if (!this.#formValidators) return\n\n      const fields = this.fields\n      const customValidatorPromises = this.#formValidators.map(v => v(this.data))\n      const results = await Promise.allSettled(customValidatorPromises)\n\n      results.map(result => {\n        if (result.status === 'rejected') {\n          console.error(result.reason)\n          return undefined\n        }\n        return result.value\n      }).forEach(resultValue => {\n        if (!resultValue) return\n        fields.forEach((field, key) => {\n          if (resultValue[key]) return field.setError(resultValue[key])\n          if (field.storeDataInParentForm) return field.setError(resultValue)\n        })\n      })\n    } finally {\n      this.validating = false\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async getValidationResult() {\n    let messages = undefined\n\n    const getFieldMessages = async ([key, field]: [key: string, field: Field]) => {\n      const result = await field.getValidationResult()\n      if (isEmpty(result)) return\n\n      messages ??= {}\n      let source = messages\n      if (!field.storeDataInParentForm) {\n        const initialValue = isArray(result) ? [] : {}\n        messages[key] ??= initialValue\n        source = messages[key]\n      }\n      merge(source, result)\n    }\n\n    const entries = [...this.fields.entries()]\n    await Promise.allSettled(entries.map(getFieldMessages))\n\n    if (!this.#formValidators) return messages\n\n    const getFormMessages = async (validator: FormValidator) => {\n      const result = await validator(this.data)\n      if (isEmpty(result)) return\n      messages ??= {}\n      merge(messages, result)\n    }\n\n    await Promise.allSettled(this.#formValidators.map(getFormMessages))\n\n    return messages\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get isValidating() {\n    return this.validating\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reset() {\n    this.fields.forEach(f => f.reset())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clear() {\n    this.fields.forEach(f => f.clear())\n  }\n\n  /**\n   * Dispose method that releases resources used by the object.\n   * It disposes the field and all the children objects.\n   */\n  dispose() {\n    const allNodes = this.collectAllNodesAsArray([])\n    this.disposeNodes(allNodes)\n  }\n\n  /**\n   * @returns true if it has no parent {@link ComponentData}, false otherwise.\n   */\n  get isRoot() {\n    return !this.parent\n  }\n\n  /**\n   * @returns the root of the component tree.\n   */\n  get root(): ComponentData {\n    return !this.parent ? this : this.parent.root\n  }\n\n  /**\n   * @returns the index in the array if the component is in the component array\n   * (looks for the nearest index in the component hierarchy).\n   */\n  get nearestIndex(): number | undefined {\n    if (typeof this.index !== 'undefined') return this.index\n    return this.parent?.nearestIndex\n  }\n\n  private insert(inserted: ComponentData, position: 'before' | 'after') {\n    const indexAddition = position === 'before' ? 0 : 1\n    if (!this.parent) {\n      throw new Error(`Cannot insert without parent. Key = ${this.key}`)\n    }\n    inserted.parent?.removeChild(inserted)\n    inserted.parent = this.parent\n    const children = this.parent.children\n    const index = children.indexOf(this)\n    if (index < 0) {\n      throw new Error(`Cannot insert not existing element into ComponentData. Key = ${this.key}`)\n    }\n    children.splice(index + indexAddition, 0, inserted)\n    this.parent.store.children ??= []\n    const storeChildren = this.parent.store.children\n    const storeIndex = storeChildren.indexOf(this.store)\n    if (storeIndex < 0) {\n      throw new Error(`Cannot insert not existing element into ComponentStore. Key = ${this.key}`)\n    }\n    storeChildren.splice(storeIndex + indexAddition, 0, inserted.store)\n    inserted.store.slot = this.store.slot\n    inserted.store.slotCondition = this.store.slotCondition\n  }\n\n  /**\n   * Disposes the nodes by calling the disposers, disposing the field,\n   * and resetting the parent and children properties to undefined and an empty array, respectively.\n   * @param nodes the array of ComponentData objects representing the nodes to dispose.\n   */\n  private disposeNodes(nodes: ComponentData[]) {\n    nodes.forEach(componentData => {\n      componentData.#events?.dispose()\n      componentData.#disposers.forEach(disposer => disposer())\n      componentData.field?.dispose()\n      componentData.parent = undefined\n      componentData.children = []\n    })\n  }\n\n  private collectAllNodesAsArray(acc: ComponentData[]) {\n    acc.push(this)\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i]\n      child.collectAllNodesAsArray(acc)\n    }\n    return acc\n  }\n\n  private collectAllFields(acc: Map<string, Field>) {\n    if (this.field) acc.set(this.key, this.field)\n    // we must skip all children in the repeater field\n    if (this.field?.fieldType === 'repeater') return acc\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i]\n      child.collectAllFields(acc)\n    }\n    return acc\n  }\n\n  private addChild(newChild: ComponentData) {\n    if (this.children.indexOf(newChild) < 0) {\n      this.children.push(newChild)\n    }\n    this.store.children ??= []\n\n    if (this.store.children.indexOf(newChild.store) < 0) {\n      this.store.children.push(newChild.store)\n    }\n  }\n\n  private removeChild(oldChild: ComponentData) {\n    const index = this.children.indexOf(oldChild)\n    if (index > -1) {\n      this.children.splice(index, 1)\n    }\n    this.store.children ??= []\n    const storeIndex = this.store.children.indexOf(oldChild.store)\n    if (storeIndex > -1) {\n      this.store.children.splice(storeIndex, 1)\n    }\n  }\n\n  private invokeOnAfterKeyChanged(node: ComponentData, eventArgs: ComponentKeyChangedEventArgs) {\n    if (this.#events?.onAfterKeyChanged.isSubscribed) {\n      this.#events.onAfterKeyChanged.invoke(node, eventArgs)\n    }\n    this.parent?.invokeOnAfterKeyChanged(node, eventArgs)\n  }\n\n  private invokeOnBeforeDeleted(nodes: ComponentData[]) {\n    if (this.#events?.onBeforeDelete.isSubscribed) {\n      nodes.forEach(node => this.#events?.onBeforeDelete.invoke(node, undefined))\n    }\n    this.parent?.invokeOnBeforeDeleted(nodes)\n  }\n}\n\n/**\n * Replaces empty form fields with an empty string. **Internal use only.**\n * @param form the form.\n * @returns all form data where empty fields are filled with empty strings.\n */\nexport const initFormFields = (form: ComponentData) => {\n  const result: Record<string, unknown> = {}\n  form.fields.forEach((field, key) => {\n    result[key] = form.data[key] ?? ''\n  })\n  return result\n}\n\nconst [\n  /**\n   * @returns the instance of the ComponentData of the currently rendered component.\n   */\n  useComponentData,\n  /**\n   * Context provider for the useComponentData hook. **Internal use only.**\n   */\n  ComponentDataProvider\n] = createNonNullableContext<ComponentData>('ComponentDataContext')\n\nexport {useComponentData, ComponentDataProvider}\n","import {createNonNullableContext} from '../../../utils/createNonNullableContext'\nimport type {FormViewerProps} from '../types'\n\nexport const [\n  /**\n   * **Internal use only.**\n   */\n  useViewerProps,\n  /**\n   * **Internal use only.**\n   */\n  ViewerPropsProvider] = createNonNullableContext<Readonly<FormViewerProps>>('FormViewerPropsContext')\n","import type {Dispatch, SetStateAction} from 'react'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\n\n/**\n * Sets a state only if its parent component is still mounted.\n * @param initialState the initial state\n * @returns a stateful value, and a function to update it.\n */\nexport default function useSafeState<S = undefined>(initialState?: S): [S | undefined, Dispatch<SetStateAction<S | undefined>>] {\n  const mountedRef = useRef(false)\n  const [state, setState] = useState<S | undefined>(initialState)\n\n  useEffect(() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  const safeSetState: Dispatch<SetStateAction<S | undefined>> = useCallback(value => {\n    mountedRef.current && setState(value)\n  }, [])\n\n  return useMemo(() => [state, safeSetState], [state, safeSetState])\n}\n","export const assemblyDate = new Date(1739565676378)\n","export const separator = ':'\n\nexport const licenseSeparator = '-'\n\n// eslint-disable-next-line no-secrets/no-secrets\nexport const publicKeyPem = `MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEJDKWHzXT9YZw7WDJy4wr/VMXBf+/afNB\n  ppCLv1zZFVUQEmDRPhGC5nKux3WQcrtfl18iNFfISjcqN5vplR/kcAvIJd07tacn\n  y1l39NGbMLIoPVzPY6GXTNzQpxRbGn99`\n","/**\n * Decoding the base64 string to array buffer.\n * @param data the base64 string.\n * @returns the array buffer.\n */\nexport function decodeB64(data: string) {\n  const byteStr = window.atob(data)\n  const bytes = new Uint8Array(byteStr.length)\n  for (let i = 0; i < byteStr.length; i++) {\n    bytes[i] = byteStr.charCodeAt(i)\n  }\n  return bytes.buffer\n}\n\n/**\n * Imports the public PEM key.\n * @param pem the PEM key.\n * @returns a Promise that fulfills with the imported key as a CryptoKey object.\n */\nexport function importPublicKey(pem: string) {\n  return window.crypto.subtle.importKey(\n    'spki',\n    decodeB64(pem),\n    {\n      name: 'ECDSA',\n      namedCurve: 'P-384',\n    },\n    true,\n    ['verify'],\n  )\n}\n","import {assemblyDate} from './assemblyDate'\nimport {licenseSeparator, publicKeyPem, separator} from './consts'\nimport {decodeB64, importPublicKey} from './utils'\n\nasync function verifySign(data: string, signature: ArrayBuffer, publicKeyString: string) {\n  if (!window.crypto.subtle) return\n  const publicKey = await importPublicKey(publicKeyString)\n  const encoded = new TextEncoder().encode(data)\n  return await window.crypto.subtle.verify(\n    {\n      name: 'ECDSA',\n      hash: {name: 'SHA-384'}\n    },\n    publicKey,\n    signature,\n    encoded\n  )\n}\n\nfunction verifyLicenseParams(licensePrefix: string, data: string) {\n  const {licenseEndDate, restrictions, companyName} = JSON.parse(data) ?? {}\n\n  if (licensePrefix !== companyName) return false\n\n  const dateParts = licenseEndDate.split('.')\n  if (dateParts.length !== 3) return false\n\n  const isoDt = `${dateParts[2]}-${dateParts[0]}-${dateParts[1]}`\n  const licenseEndDt = new Date(isoDt)\n\n  const currentDate = new Date()\n  if (restrictions.StrictCheck === true && licenseEndDt < currentDate) return false\n\n  return licenseEndDt > assemblyDate\n}\n\n/**\n * Checks the license key\n * @param licenseKey the license key.\n * @returns true if the license is a valid, false otherwise.\n */\nexport async function verifyLicenseKey(licenseKey?: string) {\n  if (!licenseKey) return\n\n  try {\n    let separatorIndex = licenseKey.indexOf(licenseSeparator)\n    if (separatorIndex === -1) return false\n\n    const licensePrefix = licenseKey.slice(0, separatorIndex)\n    const license = licenseKey.slice(separatorIndex + licenseSeparator.length)\n\n    separatorIndex = license.indexOf(separator)\n    if (separatorIndex === -1) return false\n\n    const extractedData = window.atob(license.slice(0, separatorIndex))\n    const extractedSign = decodeB64(license.slice(separatorIndex + separator.length))\n\n    const verified = await verifySign(extractedData, extractedSign, publicKeyPem)\n    if (!verified) return false\n\n    return verifyLicenseParams(licensePrefix, extractedData)\n  } catch (e) {\n    return false\n  }\n}\n","import type {CSSProperties} from 'react'\nimport {useEffect} from 'react'\nimport useSafeState from '../../utils/useSafeState'\nimport {useViewerProps} from '../form-viewer/components/ViewerPropsContext'\nimport {verifyLicenseKey} from './verifySign'\n\nconst trialDivStyle: CSSProperties = {\n  display: 'flex',\n  position: 'relative',\n  backgroundColor: '#72c7ff30',\n  borderRadius: 6,\n  padding: 10,\n  gap: 10\n}\n\nconst labelStyle: CSSProperties = {\n  flex: 1\n}\n\n/**\n * TrialMessage React component.\n * @returns the React element.\n */\nexport const TrialMessage = () => {\n  const {licenseKey} = useViewerProps()\n  const [verified, setVerified] = useSafeState(true)\n\n  useEffect(() => {\n    verifyLicenseKey(licenseKey).then(value => {\n      setVerified(!!value)\n    })\n  }, [licenseKey, setVerified])\n\n  return <div>\n    {!verified && <div style={trialDivStyle}>\n      <label style={labelStyle}>This is a trial version of the product. To purchase a license, go to <a\n        href={'https://formengine.io/pricing'}>https://formengine.io/pricing</a>\n      </label>\n    </div>}\n  </div>\n}\n","import createCache from '@emotion/cache'\nimport rtlPlugin from 'stylis-plugin-rtl'\nimport {BiDi} from './bidi'\n\n/**\n * The CSS style cache. **Internal use only.**\n */\nexport const emotionCache = {\n  LTR: createCache({\n    key: BiDi.LTR\n  }),\n  RTL: createCache({\n    key: BiDi.RTL,\n    stylisPlugins: [rtlPlugin],\n    prepend: true\n  }),\n}\n","import {css, cx} from '@emotion/css'\nimport {CacheProvider} from '@emotion/react'\nimport type {ComponentType, ReactNode} from 'react'\nimport {useEffect} from 'react'\nimport {namedObserver} from '../../utils'\nimport {useStore} from '../../utils/contexts/StoreContext'\nimport type {FormViewerWrapperComponentProps} from '../define/utils/View'\nimport {BiDi} from './bidi'\nimport {emotionCache} from './emotionCache'\nimport type {Language} from './types'\n\ninterface ViewerLocalizationProviderProps {\n  children: ReactNode,\n  language?: Language\n}\n\nconst localizationProviderClass = css`\n  display: flex;\n  width: 100%;\n  height: 100%;\n`\n\nconst viewerClassName = 'optimajet-formviewer'\n\nconst viewerClass = cx(viewerClassName, localizationProviderClass)\n\nconst RawViewerLocalizationProvider = (props: ViewerLocalizationProviderProps) => {\n  const viewerStore = useStore()\n  const language = props.language ?? viewerStore.displayedLanguage\n\n  useEffect(() => {\n    const loaders = viewerStore.formViewerPropsStore.view.getCssLoaders(language.bidi)\n    loaders.forEach(loader => {\n      loader().catch(e => console.error(e))\n    })\n  }, [language, viewerStore.formViewerPropsStore.view])\n\n  const selectedCache = language.bidi == BiDi.RTL ? emotionCache.RTL : emotionCache.LTR\n\n  return (\n    <div dir={language.bidi} lang={language.fullCode} className={viewerClass}>\n      <CacheProvider value={selectedCache}>\n        {nestViewerWrappers(viewerStore.formViewerPropsStore.view.viewerWrappers, language, props.children)}\n      </CacheProvider>\n    </div>\n  )\n}\n\nexport const ViewerLocalizationProvider = namedObserver('ViewerLocalizationProvider', RawViewerLocalizationProvider)\n\nconst nestViewerWrappers = ([Wrapper, ...more]: ComponentType<FormViewerWrapperComponentProps>[],\n                            language: Language, children: ReactNode) => {\n  return Wrapper\n    ? <Wrapper language={language}>{nestViewerWrappers(more, language, children)}</Wrapper>\n    : children\n}\n","import type {ReactNode} from 'react'\nimport {useEffect, useState} from 'react'\n\n/**\n * Represents the props for the SuppressResizeObserverErrors component. **Internal use only.**\n */\nexport interface SuppressResizeObserverErrorsProps {\n  /**\n   * The React child node.\n   */\n  children: ReactNode\n}\n\n/**\n * SuppressResizeObserverErrors component is used to suppress ResizeObserver errors. **Internal use only.**\n * @param props the component props.\n * @param props.children the child elements to render.\n * @returns the rendered child elements.\n */\nexport const SuppressResizeObserverErrors = ({children}: SuppressResizeObserverErrorsProps) => {\n  const [defaultOnErrorFn] = useState(window.onerror)\n\n  useEffect(() => {\n    window.onerror = (event) => {\n      if (event?.toString().search('ResizeObserver') !== -1) {\n        const resizeObserverErrDiv = document.getElementById(\n          'webpack-dev-server-client-overlay-div'\n        )\n        const resizeObserverErr = document.getElementById(\n          'webpack-dev-server-client-overlay'\n        )\n        if (resizeObserverErr) {\n          resizeObserverErr.setAttribute('style', 'display: none')\n        }\n        if (resizeObserverErrDiv) {\n          resizeObserverErrDiv.setAttribute('style', 'display: none')\n        }\n        return true\n      }\n      return false\n    }\n    return () => {\n      window.onerror = defaultOnErrorFn\n    }\n  }, [defaultOnErrorFn])\n\n  return <>{children}</>\n}\n","import type {Observable, Observer} from 'rxjs'\nimport {filter} from 'rxjs'\nimport type {ActionEventArgs} from './ActionEventArgs'\n\n/**\n * The event stream of the form viewer.\n */\nexport class EventStream {\n\n  /**\n   * Creates the event stream of the form viewer.\n   * @param stream the set of observable events.\n   */\n  constructor(private readonly stream: Observable<ActionEventArgs>) {\n  }\n\n  /**\n   * Returns the event stream filtered by the specified predicate function.\n   * @param predicate the predicate function.\n   * @returns the event stream filtered by the specified predicate function.\n   */\n  filter(predicate: (args: ActionEventArgs) => boolean) {\n    const newStream = this.stream.pipe(filter(predicate))\n    return new EventStream(newStream)\n  }\n\n  /**\n   * Returns the event stream filtered by the specified sender keys.\n   * @param keys the sender key array.\n   * @returns the event stream filtered by the specified sender keys.\n   */\n  keys(...keys: string[]) {\n    const newStream = this.stream.pipe(filter(e => keys.includes(e.sender.key)))\n    return new EventStream(newStream)\n  }\n\n  /**\n   * Returns the event stream filtered by the specified event types.\n   * @param types the array of event types.\n   * @returns the event stream filtered by the specified event types.\n   */\n  types(...types: string[]) {\n    const newStream = this.stream.pipe(filter(e => types.includes(e.type)))\n    return new EventStream(newStream)\n  }\n\n  /**\n   * Adds the subscriber to the stream of observed events.\n   * @param next the subscriber function.\n   */\n  listen(next: (value: ActionEventArgs) => void): () => void\n\n  /**\n   * Adds the specified observer to the stream of observed events.\n   * @param observer the observer.\n   */\n  listen(observer: Partial<Observer<ActionEventArgs>>): () => void\n\n  /**\n   * Adds the specified observer to the stream of observed events.\n   * @param observerOrNext the observer.\n   * @returns the unsubscribe function.\n   */\n  listen(observerOrNext: any): () => void {\n    const subscription = this.stream.subscribe(observerOrNext)\n    return () => subscription.unsubscribe()\n  }\n}\n","import type {ComponentType} from 'react'\nimport type {ComponentTreeProps} from '../../ComponentTreeProps'\nimport {createNonNullableContext} from '../../utils/createNonNullableContext'\n\nexport const [\n  /**\n   * **Internal use only.**\n   */\n  useComponentTreeContext,\n  /**\n   * **Internal use only.**\n   */\n  ComponentTreeContextProvider] =\n  createNonNullableContext<ComponentType<ComponentTreeProps>>('ComponentTreeContext')\n","/**\n * Calculable result.\n */\nexport class CalculableResult {\n\n  /**\n   * Constructor.\n   * @param error the error.\n   * @param result the result.\n   * @param exceptions the exceptions.\n   * @param warning the warning.\n   */\n  constructor(readonly error = false, readonly result?: any, readonly exceptions?: Error[], readonly warning?: boolean) {\n  }\n\n  /**\n   * Creates a new instance of the CalculableResult class with a successful result.\n   * @param result the calculable result.\n   * @returns the new instance of CalculableResult class.\n   */\n  static success(result: any) {\n    return new CalculableResult(false, result)\n  }\n\n  /**\n   * Creates a new instance of CalculableResult class with an error.\n   * @param exceptions the exception array.\n   * @returns the new instance of CalculableResult class.\n   */\n  static error(exceptions: Error[]) {\n    return new CalculableResult(true, undefined, exceptions)\n  }\n\n  /**\n   * Creates a new instance of the CalculableResult class with a warning result.\n   * @param result the calculable result.\n   * @returns the new instance of CalculableResult class.\n   */\n  static warning(result: any) {\n    return new CalculableResult(false, result, undefined, true)\n  }\n}\n","import {isUndefined} from 'lodash-es'\nimport type {ComponentProperty, ComponentStore} from '../../stores/ComponentStore'\nimport {isFunctionalProperty} from '../../stores/ComponentStore'\nimport {CalculableResult} from '../../utils/CalculableResult'\nimport type {IFormData} from '../../utils/IFormData'\n\nconst fnCache = new Map<string, Function>()\n\nconst getOrCreateFn = (source: string) => {\n  const fn = fnCache.get(source)\n  if (fn) return fn\n\n  const result = new Function('form', source)\n  fnCache.set(source, result)\n  return result\n}\n\nconst calculateValue = (fnSource: string, formViewerData: IFormData) => {\n  try {\n    const fn = getOrCreateFn(fnSource)\n    const result = fn(formViewerData)\n    return CalculableResult.success(result)\n  } catch (e) {\n    return CalculableResult.error([\n      e as Error,\n      {\n        name: 'Function source',\n        message: fnSource\n      }\n    ])\n  }\n}\n\n/**\n * Calculates the value for the component property. **Internal use only.**\n * @param componentProperty the component property.\n * @param formViewerData the formViewerData data.\n * @returns the calculated value.\n * @internal\n */\nexport const calculatePropertyValue = (componentProperty: ComponentProperty, formViewerData: IFormData) => {\n  return calculateValue(componentProperty.fnSource || '', formViewerData)\n}\n\n/**\n * Calculates the value for the component property or calculates the value from the property expression.\n * @param componentProperty the component property.\n * @param formViewerData the formViewerData data.\n * @returns the calculated value.\n * @internal\n */\nexport const calculateExpressionProperty = (componentProperty: ComponentProperty, formViewerData: IFormData) => {\n  if (isFunctionalProperty(componentProperty)) return calculatePropertyValue(componentProperty, formViewerData).result\n  const fnSource = componentProperty.value || ''\n  return calculateValue(`return ${fnSource}`, formViewerData).result\n}\n\n/**\n * The result of compiling of anything. **Internal use only.**\n */\nexport interface BaseCompilationResult {\n  /**\n   * Flag if true - compilation failed, false otherwise.\n   */\n  error: boolean\n  /**\n   * The array of compilation errors.\n   */\n  exceptions?: Error[]\n}\n\n/**\n * Calculates all properties for the component.\n * @param componentStore the component.\n * @param formViewerData the formViewerData data.\n * @returns the {@link Record}<string, any> for all component properties.\n * @internal\n */\nexport const calculateProperties = (componentStore: ComponentStore, formViewerData: IFormData) => {\n  const data: Record<string, any> = {}\n  Object.keys(componentStore.props).forEach(value => {\n    const componentProperty = componentStore.props[value]\n    if (!componentProperty) return\n\n    if (isFunctionalProperty(componentProperty)) {\n      const {result, error, exceptions} = calculatePropertyValue(componentProperty, formViewerData)\n      if (error) {\n        const message = `Error in the calculable field '${value}' of the '${componentStore.key}' component `\n        console.warn(message, exceptions)\n        return\n      }\n      data[value] = result\n      return\n    }\n\n    // we do not want to set an undefined value, instead the default component property will be used\n    if (!isUndefined(componentProperty.value)) {\n      data[value] = componentProperty.value\n    }\n  })\n  return data\n}\n","import {css, cx} from '@emotion/css'\nimport {assign, keysIn} from 'lodash-es'\nimport {makeAutoObservable} from 'mobx'\nimport {calculateProperties} from '../features/calculation/propertyCalculator'\nimport type {EventName} from '../features/event'\nimport {ActionEventArgs, DidMountEvent, WillUnmountEvent} from '../features/event'\nimport type {FormViewerProps} from '../features/form-viewer'\nimport type {CssPart} from '../features/style/types'\nimport type {ComputeChildren} from '../utils/ComputeChildren'\nimport type {ComponentData} from '../utils/contexts/ComponentDataContext'\nimport {nameObservable} from '../utils/observableNaming'\nimport type {ComponentStore} from './ComponentStore'\nimport type {ComponentStoreLocalizer} from './ComponentStoreLocalizer'\nimport type {Store} from './Store'\n\nconst getHtmlAttributes = (componentStore: ComponentStore) => componentStore.htmlAttributes\n  ?.reduce((result: Record<string, string>, {name, value}) => {\n    try {\n      result[name] = JSON.parse(value)\n    } catch {\n      result[name] = value\n    }\n    return result\n  }, {})\n\nconst computeEvents = (data: ComponentData, store: Store, state: ComponentState) => {\n  const events = {} as Record<EventName, Function>\n  const hasActions = (eventName: string) => data.store.events?.[eventName]?.length\n  const eventNames = new Set<string>(keysIn(data.store.events).filter(hasActions))\n  eventNames.add('onChange').add('onBlur')\n  eventNames.delete(DidMountEvent)\n  eventNames.delete(WillUnmountEvent)\n  eventNames.forEach((name) =>\n    events[name] = (...args: any[]) => store.eventSubject.next(new ActionEventArgs(name, data, store, args, state)))\n\n  return events\n}\n\n/**\n * Calculates all the properties of the form view component.\n */\nexport class ComponentState {\n\n  /**\n   * Creates an instance that calculates the properties of the form viewer component.\n   * @param data the data needed to display the component.\n   * @param store the form viewer settings.\n   * @param localizer the function to localize the properties of a component, returns a Record with localized properties.\n   * @param computeChildren the function that calculates all child properties of a component.\n   * @param viewerProps the form viewer properties.\n   */\n  constructor(\n    readonly data: ComponentData,\n    readonly store: Store,\n    readonly localizer: ComponentStoreLocalizer,\n    readonly computeChildren: ComputeChildren,\n    readonly viewerProps: Pick<FormViewerProps, 'readOnly'>,\n  ) {\n    makeAutoObservable(this, undefined, {name: nameObservable('ComponentState', {key: data.key})})\n  }\n\n  /**\n   * @returns combined in order of priority component properties.\n   */\n  get get(): Record<string, any> {\n    const propsWithoutChildren = this.propsWithoutChildren\n    return Object.assign({}, propsWithoutChildren, this.className, this.children(propsWithoutChildren))\n  }\n\n  /**\n   * @returns the combined properties of the components in priority order, excluding child components.\n   */\n  get propsWithoutChildren(): Record<string, any> {\n    const {htmlAttributes, ...calculated} = this.calculatedProps\n\n    return Object.assign(\n      {key: this.data.store.key},\n      this.data.model.defaultProps,\n      calculated,\n      this.localizedProps,\n      this.value,\n      this.readOnly,\n      this.events,\n      htmlAttributes ?? this.htmlAttributes,\n      this.data.userDefinedProps,\n    )\n  }\n\n  /**\n   * @returns the component's field value data, if the component can have a field value.\n   */\n  get value() {\n    if (this.data.model.kind === 'template') return\n    if (this.data.field) return {[this.data.field.valued]: this.data.field.value}\n  }\n\n  /**\n   * @returns the component's read-only flag, if the component can have a read-only flag.\n   */\n  get readOnly() {\n    if (this.viewerProps.readOnly && this.data.model.readOnly) {\n      return {[this.data.model.readOnly]: true}\n    }\n  }\n\n  /**\n   * @returns the values for all properties of the component, calculates the values of the calculated properties.\n   */\n  get calculatedProps() {\n    const dataRootProvider = this.data.dataRootProvider ?? this.store.dataContext\n    return calculateProperties(this.data.store, dataRootProvider.dataRoot)\n  }\n\n  /**\n   * @returns component localized properties.\n   */\n  get localizedProps() {\n    return this.localizer(this.data.store)\n  }\n\n  /**\n   * @returns the component event handlers that send events to the event bus.\n   */\n  get events() {\n    return computeEvents(this.data, this.store, this)\n  }\n\n  /**\n   * Calculates and returns className property.\n   * @returns the Record that contains the className property for the component.\n   */\n  get className() {\n    const className = cx(\n      this.propsWithoutChildren.className,\n      this.getClassNameFromCssPart('css')\n    )\n    return {className}\n  }\n\n  /**\n   * Calculates and returns wrapper className property.\n   * @returns the Record that contains the className property for the wrapper of component.\n   */\n  get wrapperClassName() {\n    return this.getClassNameFromCssPart('wrapperCss')\n  }\n\n  /**\n   * @returns all arbitrary HTML attributes of the component.\n   */\n  get htmlAttributes() {\n    return getHtmlAttributes(this.data.store)\n  }\n\n  /**\n   * Calculates and returns all child components.\n   * @param props the React component properties.\n   * @returns the Record that contains the child components of a component.\n   */\n  children(props: any) {\n    return this.computeChildren(this.data, props)\n  }\n\n  private getClassNameFromCssPart(cssPart: CssPart) {\n    const {model, store} = this.data\n    const {viewMode} = this.store\n\n    const cssObjectAny = assign({},\n      model[cssPart]?.any?.object,\n      store[cssPart]?.any?.object\n    )\n    const cssObjectCurrent = assign({},\n      model[cssPart]?.[viewMode]?.object,\n      store[cssPart]?.[viewMode]?.object\n    )\n\n    return css`\n      && {\n        ${cssObjectAny}\n        ${cssObjectCurrent}\n        ${store[cssPart]?.any?.string}\n        ${store[cssPart]?.[viewMode]?.string}\n      }\n    `\n  }\n}\n","import {calculateExpressionProperty} from '../features/calculation/propertyCalculator'\nimport type {ComponentStore} from '../stores/ComponentStore'\nimport {isFunctionalProperty} from '../stores/ComponentStore'\nimport type {IFormData} from './IFormData'\n\n/**\n * Returns true if the component should be rendered, false otherwise.\n * @param componentStore the component settings.\n * @param formData the form data.\n * @returns true if the component should be rendered, false otherwise.\n */\nexport function needRender(componentStore: ComponentStore, formData: IFormData) {\n  if (!componentStore.renderWhen) return true\n\n  if (!isFunctionalProperty(componentStore.renderWhen)) {\n    const {value} = componentStore.renderWhen\n    if (typeof value === 'string' && value.trim() === '') return true\n  }\n\n  return calculateExpressionProperty(componentStore.renderWhen, formData) === true\n}\n","import type {ComponentType} from 'react'\nimport type {ComponentTreeProps} from '../ComponentTreeProps'\nimport type {ComponentStore} from '../stores/ComponentStore'\nimport type {ComponentData, IComponentDataProvider} from './contexts/ComponentDataContext'\nimport {groupBy} from './groupBy'\nimport type {IFormData} from './IFormData'\nimport {needRender} from './needRender'\n\nconst defaultContainerKey = 'children'\n\n/**\n * Returns the {@link Record} with all child components.\n * @param data the parent component's data necessary to display the component.\n * @param formData the form data.\n * @param componentTreeItem the type of React component that wraps child components.\n * @param componentProps the properties of the parent component.\n * @returns the {@link Record} with all child components.\n */\nexport function getChildren(\n  data: ComponentData,\n  formData: IFormData,\n  componentTreeItem: ComponentType<ComponentTreeProps>,\n  componentProps: Record<string, any>\n) {\n  const containers = data.field?.fieldType === 'repeater'\n    ? (data.field as unknown as IComponentDataProvider).componentData\n    : data.children\n  const ComponentTree = componentTreeItem\n  const currentProps: Record<string, any> = {}\n\n  const groups = groupBy(containers, value => value.store.slot || defaultContainerKey)\n  const isSlotConditionSatisfied = (child: ComponentData) => checkSlotCondition(child.store, componentProps)\n  const isNeedRender = (child: ComponentData) => needRender(child.store, data.dataRootProvider?.dataRoot ?? formData)\n\n  for (const [key, children] of Object.entries(groups)) {\n    const filteredChildren = children\n      .filter(isSlotConditionSatisfied)\n      .filter(isNeedRender)\n\n    if (filteredChildren.length) {\n      currentProps[key] = data.model.propsBindingTypes[key] === 'array'\n        ? filteredChildren.map((item, index) => <ComponentTree key={index} data={[item]}/>)\n        : <ComponentTree data={filteredChildren}/>\n    }\n  }\n\n  return currentProps\n}\n\nconst fnCache = new Map<string, Function>()\n\nfunction getOrCreateFn(source: string) {\n  const fn = fnCache.get(source)\n  if (fn) return fn\n\n  const result = new Function('parentProps', source)\n  fnCache.set(source, result)\n  return result\n}\n\n/**\n * Performs the function of checking if the child component can be bound. **Internal use only.**\n * @param childStore the child component settings.\n * @param parentProps the parent component properties.\n * @returns true, if the child component can be bound, false otherwise.\n */\nexport function checkSlotCondition(childStore: ComponentStore, parentProps: any) {\n  const fnSource = childStore.slotCondition?.trim()\n  // it's OK - no condition to bind\n  if (!fnSource) return true\n  const fn = getOrCreateFn(fnSource)\n  try {\n    return fn(parentProps)\n  } catch (e) {\n    console.warn(e)\n    return false\n  }\n}\n","import {useStore} from './contexts/StoreContext'\n\n/**\n * @returns the type of React component used to display the tooltip. **Internal use only.**\n */\nexport const useTooltipType = (): string | undefined => {\n  const viewerStore = useStore()\n  return viewerStore.form.tooltipType\n}\n","import {useMemo} from 'react'\nimport type {Model} from '../features/define'\nimport type {FormViewerProps} from '../features/form-viewer'\nimport {useViewerProps} from '../features/form-viewer/components/ViewerPropsContext'\nimport {ComponentState} from '../stores/ComponentState'\nimport type {ComponentStoreLocalizer} from '../stores/ComponentStoreLocalizer'\nimport {ComponentStore} from '../stores/ComponentStore'\nimport type {Store} from '../stores/Store'\nimport type {ComponentData} from './contexts/ComponentDataContext'\nimport {useStore} from './contexts/StoreContext'\n\n/**\n * Generates the component state for the wrapper component. For example, a tooltip or error message.\n * @param wrappedComponentData the wrapped component.\n * @param componentModel the component metadata.\n * @param wrapperProps the wrapper component props.\n * @param localizer the function used to localize the component.\n * @returns the component state for the wrapper component\n */\nexport const useWrapperState = (wrappedComponentData: ComponentData, componentModel: Model,\n                                wrapperProps: any, localizer: ComponentStoreLocalizer) => {\n  const viewerStore = useStore()\n  const viewerProps = useViewerProps()\n  return useMemo(() => getWrapperState(viewerStore, wrappedComponentData, componentModel, wrapperProps, localizer, viewerProps),\n    [viewerStore, wrappedComponentData, componentModel, wrapperProps, localizer, viewerProps])\n}\n\nconst getWrapperState = (viewerStore: Store, wrappedComponentData: ComponentData, componentModel: Model,\n                         wrapperProps: any, localizer: ComponentStoreLocalizer, viewerProps: FormViewerProps) => {\n  const componentStore = new ComponentStore(wrappedComponentData.key, componentModel.type)\n  componentStore.props = wrapperProps\n  const componentData = viewerStore.createComponentData(componentStore, false, componentModel)\n  componentData.dataRootProvider = wrappedComponentData.dataRootProvider\n  return new ComponentState(componentData, viewerStore, localizer, () => ({}), viewerProps)\n}\n","import type {ReactNode} from 'react'\nimport {createElement, useCallback} from 'react'\nimport type {ComponentStore} from '../../stores/ComponentStore'\nimport {namedObserver} from '../../utils'\nimport {useComponentData} from '../../utils/contexts/ComponentDataContext'\nimport {useStore} from '../../utils/contexts/StoreContext'\nimport {useTooltipType} from '../../utils/useTooltipType'\nimport {useWrapperState} from '../../utils/useWrapperState'\nimport type {Model} from '../define'\nimport {useViewerProps} from '../form-viewer/components/ViewerPropsContext'\n\n/**\n * Tooltip React component wrapper properties.\n */\nexport interface TooltipWrapperProps {\n  /**\n   * The React child node.\n   */\n  children: ReactNode\n}\n\n/**\n * Tooltip React component properties.\n */\ninterface ComponentTooltipProps {\n  tooltipDefinition: Model\n  children: ReactNode\n}\n\nfunction useTooltipComponent() {\n  const formViewerProps = useViewerProps()\n  const selectedTooltipType = useTooltipType()\n  if (!selectedTooltipType) return\n  return formViewerProps.view.get(selectedTooltipType)\n}\n\n/**\n * Tooltip React component wrapper.\n * @param props the React component properties.\n * @param props.children the React child node.\n * @returns the React element.\n */\nconst RawTooltipWrapper = ({children}: TooltipWrapperProps) => {\n  const tooltipDefinition = useTooltipComponent()\n  if (!tooltipDefinition) return <>{children}</>\n  return <ComponentTooltip tooltipDefinition={tooltipDefinition}>{children}</ComponentTooltip>\n}\n\nexport const TooltipWrapper = namedObserver('TooltipWrapper', RawTooltipWrapper)\n\nconst RawComponentTooltip = ({tooltipDefinition, children}: ComponentTooltipProps) => {\n  const viewerStore = useStore()\n  const wrappedComponentData = useComponentData()\n  const wrappedComponentStore = wrappedComponentData.store\n  const localize = useCallback((componentStore: ComponentStore) => {\n    const dataContext = wrappedComponentData.dataRootProvider ?? viewerStore.dataContext\n    return viewerStore.localizeComponent('tooltip', dataContext.dataRoot, componentStore)\n  }, [viewerStore, wrappedComponentData])\n  const componentState = useWrapperState(wrappedComponentData, tooltipDefinition, wrappedComponentStore.tooltipProps, localize)\n  return createElement(tooltipDefinition.component, componentState.get, children)\n}\n\nconst ComponentTooltip = namedObserver('ComponentTooltip', RawComponentTooltip)\n","import {useMemo} from 'react'\nimport {Model} from '../features/define'\nimport {useViewerProps} from '../features/form-viewer/components/ViewerPropsContext'\nimport type {ErrorWrapperProps} from '../features/validation/components/DefaultErrorMessage'\nimport {errorMessageModel} from '../features/validation/components/DefaultErrorMessage'\nimport {useStore} from './contexts/StoreContext'\n\n/**\n * @returns the model of React component used to display the error.\n */\nexport const useErrorModel = (): Model<ErrorWrapperProps> => {\n  const viewerStore = useStore()\n  const errorType = viewerStore.form.errorType\n  const view = viewerStore.formViewerPropsStore.view\n  const viewerProps = useViewerProps()\n\n  return useMemo(() => {\n    const defaultModel = viewerProps.errorWrapper ? new Model(viewerProps.errorWrapper) : errorMessageModel\n    const model = errorType ? view.find(errorType) : defaultModel\n    return model ?? errorMessageModel\n  }, [errorType, view, viewerProps.errorWrapper])\n}\n","import {createElement, useCallback, useEffect, useRef} from 'react'\nimport {filter} from 'rxjs'\nimport type {ComponentStoreLocalizer} from '../../../stores/ComponentStoreLocalizer'\nimport type {WrapperProps} from '../../../types'\nimport {namedObserver} from '../../../utils'\nimport {useComponentData} from '../../../utils/contexts/ComponentDataContext'\nimport {useStore} from '../../../utils/contexts/StoreContext'\nimport {useErrorModel} from '../../../utils/useErrorModel'\nimport {useWrapperState} from '../../../utils/useWrapperState'\nimport type {ActionEventHandler} from '../../event'\nimport {useViewerProps} from '../../form-viewer/components/ViewerPropsContext'\n\nconst useEventListener = (sender: string, type: string, listener: ActionEventHandler) => {\n  const {eventSubject} = useStore()\n  const listenerRef = useRef(listener)\n\n  listenerRef.current = listener\n\n  useEffect(() => {\n    const subscription = eventSubject\n      .pipe(filter(e => e.type === type && e.sender.id === sender))\n      .subscribe(e => {\n        listenerRef.current(e)\n      })\n    return () => subscription.unsubscribe()\n  }, [eventSubject, sender, type])\n}\n\nconst RawErroneous = ({children}: WrapperProps) => {\n  const wrappedComponentData = useComponentData()\n  const viewerStore = useStore()\n  const props = useViewerProps()\n  const errorDefinition = useErrorModel()\n\n  const localizer = useCallback<ComponentStoreLocalizer>(() => ({}), [])\n  const componentState = useWrapperState(wrappedComponentData, errorDefinition, viewerStore.form.errorProps, localizer)\n\n  useEventListener(wrappedComponentData.id, 'onChange', e => wrappedComponentData.field?.setValue(e.value))\n  useEventListener(wrappedComponentData.id, 'onBlur', _ => wrappedComponentData.field?.setTouched())\n\n  if (props.erroneous) return <>{children}</>\n\n  const errorProps = {...componentState.get, error: wrappedComponentData.field?.error}\n  return createElement(errorDefinition.component, errorProps, children)\n}\n\nexport const Erroneous = namedObserver('Erroneous', RawErroneous)\n","import {debounceTime, map, Subject, switchMap} from 'rxjs'\nimport type {IStore} from '../../../stores/IStore'\nimport type {Setter} from '../../../types'\nimport type {ValidationResult} from '../types/ValidationResult'\n\n/**\n * A function that localizes validation error messages.\n * @param value the results of the validation.\n * @returns the localization result or undefined.\n */\nexport type ErrorMessageLocalizer = (value: ValidationResult[] | undefined) => string | undefined\n\n/**\n * The function that validates a value and returns the validation result.\n * @param value the validated value.\n * @param store the form viewer settings.\n * @returns the Promise with the results of the validation.\n */\nexport type ResolvedValidator = (value: any, store: IStore) => Promise<ValidationResult[] | undefined>\n\n/**\n * The validation function factory.\n * @param value the validated value.\n * @template T the validation function factory arguments.\n * @returns the function that validates a value.\n */\nexport type SchemaResolver<T> = (value: T) => ResolvedValidator\n\n/**\n * Returns the default error message for the validation result.\n * @param result the validation result.\n * @returns the default error message for the validation result.\n */\nexport function getDefaultErrorMessage(result: ValidationResult) {\n  return result.message ?? `Validation failed: ${result.settings.key}`\n}\n\nfunction concatErrorMessages(value: ValidationResult[] | undefined) {\n  if (!value) return undefined\n  return value?.map(getDefaultErrorMessage).join(' ')\n}\n\n/**\n * Binds all parts of the validation and performs the validation.\n */\nexport class DataValidator {\n  readonly #subject = new Subject<any>()\n  readonly #subscriptions\n  readonly #stream\n  readonly #validator\n\n  private constructor(\n    store: IStore,\n    validator: ResolvedValidator,\n    setter: Setter<string | undefined>,\n    errorMessageLocalizer?: ErrorMessageLocalizer\n  ) {\n    const localizer = (messages?: ValidationResult[]) => {\n      if (!messages || messages.length === 0) return undefined\n      if (store.showAllValidationErrors) {\n        return (errorMessageLocalizer ?? concatErrorMessages)(messages)\n      }\n      return errorMessageLocalizer?.([messages[0]]) ?? getDefaultErrorMessage(messages[0])\n    }\n\n    this.#validator = (value: any) => validator(value, store)\n    this.#stream = this.#subject\n      .pipe(\n        debounceTime(200),\n        map(this.#validator),\n        switchMap(promise => promise),\n        map(localizer),\n      )\n    this.#subscriptions = [\n      this.#stream.subscribe(setter),\n    ]\n  }\n\n  /**\n   * Creates a DataValidator instance.\n   * @param store the form viewer settings\n   * @param resolver the validation function factory.\n   * @param args the validation function factory arguments.\n   * @param setter the callback function called to set a validation error.\n   * @param localizer the function that localizes validation error messages.\n   * @template T the validation function factory arguments.\n   * @returns the DataValidator instance.\n   */\n  static create = <T>(store: IStore, resolver: SchemaResolver<T>, args: T,\n                      setter: Setter<string | undefined>, localizer?: ErrorMessageLocalizer) => {\n    return new DataValidator(store, resolver(args), setter, localizer)\n  }\n\n  /**\n   * Generates an event to perform validation.\n   * @param value the validated value.\n   */\n  sendValidationEvent = (value: any) => {\n    this.#subject.next(value)\n  }\n\n  /**\n   * Performs a validation of the value.\n   * @param value the validated value.\n   * @returns the Promise with the result of the validation.\n   */\n  validate = (value: any) => {\n    const promise = new Promise<string | undefined>(resolve => {\n      const subscribe = this.#stream.subscribe(next => {\n        resolve(next)\n        subscribe.unsubscribe()\n      })\n    })\n    this.sendValidationEvent(value)\n    return promise\n  }\n\n  /**\n   * Returns the validation results without triggering an events and changing the state of the form.\n   * @param value the validated value.\n   * @returns the validation results.\n   */\n  getValidationResult = (value: any) => {\n    return this.#validator(value)\n  }\n\n  /**\n   * Releases allocated resources, must be used when destroying an object instance.\n   */\n  dispose = () => {\n    this.#subscriptions.forEach(s => s.unsubscribe())\n  }\n}\n","import {css, cx} from '@emotion/css'\nimport type {DetailedHTMLProps, HTMLAttributes} from 'react'\nimport {useMemo} from 'react'\n\nconst defaultWrapperClass = css`\n  display: flex;\n`\n\n/**\n * The React component that wraps every component in a form.\n * @param props the React component properties.\n * @returns the React element.\n */\nexport const DefaultWrapper = (props: DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>) => {\n  const {className, children, ...otherProps} = props\n  const cls = useMemo(() => cx(defaultWrapperClass, className), [className])\n  return <div className={cls} {...otherProps}>{children}</div>\n}\nDefaultWrapper.displayName = 'Screen'\n","import {cx} from '@emotion/css'\nimport {forIn} from 'lodash-es'\nimport {Fragment, useCallback, useEffect, useMemo, useRef} from 'react'\nimport type {Subscription} from 'rxjs'\nimport {catchError, filter, map} from 'rxjs'\nimport {ComponentState} from '../../stores/ComponentState'\nimport type {ComponentStore} from '../../stores/ComponentStore'\nimport type {Store} from '../../stores/Store'\nimport {isPromise, namedObserver} from '../../utils'\nimport type {ComponentData} from '../../utils/contexts/ComponentDataContext'\nimport {useComponentData} from '../../utils/contexts/ComponentDataContext'\nimport {useStore} from '../../utils/contexts/StoreContext'\nimport {getChildren} from '../../utils/getChildren'\nimport type {ActionData} from '../event'\nimport {ActionEventArgs, DidMountEvent, WillUnmountEvent} from '../event'\nimport {useViewerProps} from '../form-viewer/components/ViewerPropsContext'\nimport {TooltipWrapper} from '../tooltip/TooltipWrapper'\nimport {Erroneous} from '../validation'\nimport {useComponentTreeContext} from './ComponentTreeContext'\nimport {DefaultWrapper} from './DefaultWrapper'\n\ntype Fn = () => void\n\nfunction useComponentMountUnmount(init: Fn, clear: Fn, deps: Array<any>) {\n  const clearRef = useRef(clear)\n  const initRef = useRef(init)\n\n  clearRef.current = clear\n  initRef.current = init\n\n  useEffect(() => {\n    initRef.current()\n\n    return () => {\n      clearRef.current()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps)\n}\n\nconst useActions = (state: ComponentState, deps: Array<any>) => {\n  const store = useStore()\n  const componentData = useComponentData()\n  const subsRef = useRef<Subscription[]>([])\n\n  const unsubscribe = useCallback(() => {\n    subsRef.current.forEach((s) => s.unsubscribe())\n  }, [])\n\n  const createSubscriptions = useCallback(() => {\n    const result: Subscription[] = []\n\n    forIn(componentData.store.events, (actionDataList: ActionData[], eventName) => {\n      const chain = getActionHandlersChain(store, actionDataList)\n\n      const subscription = store.eventSubject\n        .pipe(\n          filter(e => e.type === eventName && e.sender.id === componentData.id),\n          map(chain),\n          catchError((err, caught) => {\n            console.error(err)\n            return caught\n          }),\n        )\n        .subscribe()\n\n      result.push(subscription)\n    })\n\n    subsRef.current = result\n  }, [componentData.store.events, componentData.id, store])\n\n  useComponentMountUnmount(() => {\n    createSubscriptions()\n\n    const mountEvent = new ActionEventArgs(DidMountEvent, componentData, store, [], state)\n\n    store.eventSubject.next(mountEvent)\n  }, () => {\n    const unmountEvent = new ActionEventArgs(WillUnmountEvent, componentData, store, [], state)\n\n    store.eventSubject.next(unmountEvent)\n\n    unsubscribe()\n  }, deps)\n}\n\nfunction getActionHandlersChain(store: Store, actionDataList: ActionData[]) {\n  const actions = actionDataList.map(data => ({\n    func: store.findAction(data).func,\n    args: data.args ? {...data.args} : {}\n  }))\n\n  return async (e: ActionEventArgs) => {\n    for (const {func, args} of actions) {\n      const result = func(e, args)\n      if (isPromise(result)) await result\n    }\n  }\n}\n\nconst RawComponentViewer = () => {\n  const data = useComponentData()\n  const {componentWrapper, computeChildren: viewerComputeChildren} = useViewerProps()\n  const formViewerStore = useStore()\n  const localize = useCallback((componentStore: ComponentStore) => {\n    const dataContext = data.dataRootProvider ?? formViewerStore.dataContext\n    return formViewerStore.localizeComponent('component', dataContext.dataRoot, componentStore)\n  }, [formViewerStore, data])\n  const componentTree = useComponentTreeContext()\n  const viewerProps = useViewerProps()\n\n  const computeChildren = useCallback((componentData: ComponentData, componentProps: Record<string, any>) => {\n    if (viewerComputeChildren) return viewerComputeChildren(componentData, componentProps)\n    return getChildren(componentData, formViewerStore.form.componentTree, componentTree, componentProps)\n  }, [viewerComputeChildren, formViewerStore.form.componentTree, componentTree])\n\n  const componentState = useMemo(\n    () => new ComponentState(data, formViewerStore, localize, computeChildren, viewerProps),\n    [data, formViewerStore, localize, computeChildren, viewerProps])\n\n  useActions(componentState, [viewerProps])\n\n  const {key, ...otherProps} = componentState.get\n  const {kind, component: Component} = data.model\n  const containerClassName = cx(otherProps.className, componentState.wrapperClassName)\n\n  const Wrapper = componentWrapper ?? DefaultWrapper\n  const Tooltip = data.store.tooltipProps ? TooltipWrapper : Fragment\n  const ContainerComponent = componentWrapper ?? Component\n  const component = <Component key={key} {...otherProps}/>\n\n  if (kind === 'container') {\n    return <ContainerComponent key={key} {...otherProps} className={containerClassName}/>\n  }\n\n  if (kind === 'repeater') {\n    return <Wrapper><Tooltip><Erroneous>\n      <Component key={key} {...otherProps} wrapperClassName={containerClassName}/>\n    </Erroneous></Tooltip></Wrapper>\n  }\n\n  return <Wrapper className={kind === 'template' ? containerClassName : componentState.wrapperClassName}>\n    {kind === 'template'\n      ? component\n      : <Tooltip><Erroneous>{component}</Erroneous></Tooltip>\n    }\n  </Wrapper>\n}\n\nexport const ComponentViewer = namedObserver('ComponentViewer', RawComponentViewer)\n","import {namedObserver} from '../../utils'\nimport type {ComponentData} from '../../utils/contexts/ComponentDataContext'\nimport {ComponentDataProvider} from '../../utils/contexts/ComponentDataContext'\nimport {ComponentViewer} from './ComponentViewer'\n\n/**\n * Properties of the React component {@link ComponentTreeItem}.\n */\nexport interface ComponentTreeItemProps {\n  /**\n   * The data required to display the component.\n   */\n  componentData: ComponentData\n}\n\n/**\n * The React form viewer component that displays an item from the component tree.\n * @param props the React component properties.\n * @param props.componentData the data required to display the component.\n * @returns the React element.\n */\nconst RawComponentTreeItem = ({componentData}: ComponentTreeItemProps) => (\n  <ComponentDataProvider value={componentData}>\n    <ComponentViewer/>\n  </ComponentDataProvider>\n)\n\nexport const ComponentTreeItem = namedObserver('ComponentTreeItem', RawComponentTreeItem)\n","import type {ComponentTreeProps} from '../../ComponentTreeProps'\nimport {namedObserver} from '../../utils'\nimport {ComponentTreeContextProvider} from './ComponentTreeContext'\nimport {ComponentTreeItem} from './ComponentTreeItem'\n\n/**\n * The React component that displays an array of ComponentData. **Internal use only.**\n * @param props the React component properties.\n * @param props.data the array of child elements of the tree.\n * @returns the React element.\n */\nconst RawComponentTree = ({data}: ComponentTreeProps) => {\n  return <ComponentTreeContextProvider value={ComponentTree}>\n    {data.map(cd => <ComponentTreeItem key={cd.id} componentData={cd}/>)}\n  </ComponentTreeContextProvider>\n}\n\nexport const ComponentTree = namedObserver('ComponentTree', RawComponentTree)\n","import {useEffect, useMemo} from 'react'\nimport type {ViewMode} from '../../../types'\nimport {namedObserver} from '../../../utils'\nimport {useStore} from '../../../utils/contexts/StoreContext'\nimport {EventStream} from '../../event/utils/EventStream'\nimport {ComponentTree} from '../../ui/ComponentTree'\nimport {useViewerProps} from './ViewerPropsContext'\n\nconst getViewMode = (): ViewMode => {\n  const width = window.innerWidth\n\n  if (width <= 600) return 'mobile'\n  if (width <= 900) return 'tablet'\n\n  return 'desktop'\n}\n\nfunction useAutoViewMode() {\n  const store = useStore()\n  const props = useViewerProps()\n\n  useEffect(() => {\n    if (props.viewMode) {\n      store.viewMode = props.viewMode\n      return\n    }\n\n    const onResize = () => store.viewMode = getViewMode()\n    window.addEventListener('resize', onResize)\n    return () => window.removeEventListener('resize', onResize)\n  }, [props.viewMode, store])\n}\n\n/**\n * Properties of the React component {@link Viewer}.\n */\nexport interface ViewerProps {\n  /**\n   * The function for processing form events.\n   * @param stream the event stream of the form viewer.\n   */\n  event?: (stream: EventStream) => void\n}\n\n/**\n * The React component of the form viewer, which displays the form itself with its components.\n * @param props the React component properties.\n * @param props.event the function for processing form events.\n * @returns the React element.\n */\nconst RawViewer = ({event}: ViewerProps) => {\n  const store = useStore()\n  const {formLoadError} = store\n  const props = useViewerProps()\n  const data = useMemo(() => [store.form.componentTree], [store.form.componentTree])\n\n  useEffect(() => {\n    event?.(new EventStream(store.eventSubject))\n  }, [event, store.eventSubject])\n\n  useAutoViewMode()\n\n  useEffect(() => store.loadForm(props.getForm, props.formName), [store, props.getForm, props.formName])\n\n  return formLoadError\n    ? <div className={'form-error'}>{formLoadError}</div>\n    : <ComponentTree data={data}/>\n}\n\nexport const Viewer = namedObserver('Viewer', RawViewer)\n","import type {ActionEventHandler, ActionValues} from '../event'\nimport {ActionDefinition} from '../event'\n\n/**\n * Custom actions for the form viewer.\n */\nexport type CustomActions = Record<string, ActionDefinition | ActionEventHandler>\n\n/**\n * Converts custom actions to the set of action definitions. **Internal use only.**\n * @param actions the custom actions.\n * @returns the set of action definitions or undefined.\n */\nexport function customActionsToActionsValues(actions?: CustomActions): ActionValues | undefined {\n  if (!actions) return\n\n  const result: ActionValues = {}\n  Object.entries(actions).forEach(([name, value]) => {\n    result[name] = value instanceof ActionDefinition\n      ? value\n      : ActionDefinition.functionalAction(value)\n  })\n  return result\n}\n","import {makeObservable, observable} from 'mobx'\nimport type {ComponentType} from 'react'\nimport {View} from '../features/define'\nimport type {ActionValues} from '../features/event'\nimport type {FormViewerProps} from '../features/form-viewer'\nimport type {ComponentLocalizer} from '../features/form-viewer/ComponentLocalizer'\nimport {customActionsToActionsValues} from '../features/form-viewer/CustomActions'\nimport type {FormValidators} from '../features/form-viewer/FormValidators'\nimport type {Language} from '../features/localization/types'\nimport type {ErrorWrapperProps} from '../features/validation'\nimport type {Validators} from '../features/validation/types/CustomValidationRules'\nimport {nameObservable} from '../utils/observableNaming'\n\n/**\n * Represents the props passed to the FormViewer Store. **Internal use only.**\n */\nexport class FormViewerPropsStore {\n  /**\n   * The metadata of the form viewer components.\n   */\n  view: View = new View()\n  /**\n   * The initial form data.\n   */\n  initialData: Record<string, unknown> = {}\n  /**\n   * The set of metadata of validation rules, grouped by the type of value being validated.\n   */\n  validators?: Validators\n  /**\n   * The set of functions that validate the form data.\n   */\n  formValidators?: FormValidators\n  /**\n   * The function to localize the properties of a component.\n   */\n  localizer?: ComponentLocalizer\n  /**\n   * Custom actions for the form viewer.\n   */\n  actions?: ActionValues\n  /**\n   * The full language code passed in the FormViewer properties.\n   */\n  propsLanguage?: Language\n  /**\n   * The default error wrapper used when errorType is not specified in the form.\n   */\n  errorWrapper?: ComponentType<ErrorWrapperProps>\n\n  /**\n   * If true, all validation errors will be displayed.\n   */\n  showAllValidationErrors?: boolean\n\n  /**\n   * Constructs a new FormViewerPropsStore from the given FormViewerProps.\n   * @param formViewerProps the FormViewer props.\n   * @returns the FormViewerPropsStore.\n   */\n  constructor(formViewerProps?: FormViewerProps) {\n    if (formViewerProps) {\n      this.applyProps(formViewerProps)\n    }\n\n    makeObservable(this, {\n      view: observable.ref,\n      initialData: observable.ref,\n      validators: observable.ref,\n      formValidators: observable.ref,\n      localizer: observable.ref,\n      actions: observable.ref,\n      propsLanguage: observable.ref,\n      errorWrapper: observable.ref,\n      showAllValidationErrors: observable.ref,\n    }, {name: nameObservable(`FormViewerPropsStore`)})\n  }\n\n  /**\n   * Applies the given FormViewerProps.\n   * @param formViewerProps the properties to apply.\n   */\n  applyProps(formViewerProps: FormViewerProps) {\n    this.view = formViewerProps.view\n    this.initialData = formViewerProps.initialData ?? {}\n    this.validators = formViewerProps.validators\n    this.formValidators = formViewerProps.formValidators\n    this.localizer = formViewerProps.localize\n    this.actions = customActionsToActionsValues(formViewerProps.actions)\n    this.propsLanguage = formViewerProps.language\n    this.errorWrapper = formViewerProps.errorWrapper\n    this.showAllValidationErrors = formViewerProps.showAllValidationErrors\n  }\n\n  /**\n   * Returns the clone of the FormViewerPropsStore object.\n   * @returns the clone of the FormViewerPropsStore object.\n   */\n  clone(): FormViewerPropsStore {\n    const clone = new FormViewerPropsStore()\n    clone.view = this.view\n    clone.initialData = this.initialData\n    clone.validators = this.validators\n    clone.formValidators = this.formValidators\n    clone.localizer = this.localizer\n    clone.actions = this.actions\n    clone.propsLanguage = this.propsLanguage\n    clone.errorWrapper = this.errorWrapper\n    clone.showAllValidationErrors = this.showAllValidationErrors\n    return clone\n  }\n}\n","import type {ComponentStore} from '../../../stores/ComponentStore'\nimport {isFunctionalProperty, isLocalizedProperty} from '../../../stores/ComponentStore'\nimport type {LocalizationType} from '../../../stores/LocalizationStore'\nimport type {IFormData} from '../../../utils/IFormData'\nimport {calculatePropertyValue} from '../../calculation/propertyCalculator'\n\n/**\n * The function to localize the properties of a component.\n */\nexport type LocalizeComponent = (type: LocalizationType, componentStore: ComponentStore) => Record<string, any>\n\n/**\n * Calculates the property of the component.\n * @param component the component settings.\n * @param key the property key.\n * @param formData the form data.\n * @param localizerComponent the function to localize the properties of a component.\n * @returns the array, where the first element of the array is the sign whether the property was calculated or not,\n * the second element of the array is the calculated value of the property.\n */\nexport function calculateProperty(component: ComponentStore, key: string,\n                                  formData: IFormData, localizerComponent: LocalizeComponent): [boolean, any?] {\n  const property = component.props[key]\n  if (isFunctionalProperty(property)) {\n    const {result} = calculatePropertyValue(property, formData)\n    return [true, result]\n  }\n  if (isLocalizedProperty(property)) {\n    const props = localizerComponent('component', component)\n    const value = props[key]\n    return [true, value]\n  }\n  return [false]\n}\n","import {isNumber, isRecord, isString} from '../../../utils'\n\n/**\n * Returns data (array element or object field) by key.\n * @param data the data.\n * @param key the key.\n * @returns the projection.\n */\nexport function dataPart(data: unknown, key: string | number): unknown {\n  if (Array.isArray(data) && isNumber(key)) return data[key]\n  if (isRecord(data) && isString(key)) return data[key]\n  return undefined\n}\n","import type {FormViewerValidationRules} from '../../../stores/FormViewerValidationRules'\nimport {isPromise} from '../../../utils'\nimport type {BoundValueSchema} from '../types/BoundValueSchema'\nimport type {RuleValidator} from '../types/RuleValidator'\nimport type {ValidationResult} from '../types/ValidationResult'\nimport type {ValidationRuleParameter} from '../types/ValidationRuleParameter'\nimport type {ValidationRuleSettings} from '../types/ValidationRuleSettings'\nimport type {ResolvedValidator} from './DataValidator'\n\n/**\n * Returns the function that creates a validator for the value.\n * @param validationRules the validation rules for FormViewer.\n * @returns the function that creates a validator for the value.\n */\nexport function typedValidatorsResolver(validationRules: FormViewerValidationRules) {\n  return function (schema?: BoundValueSchema) {\n    return validatorsResolver(validationRules, schema)\n  }\n}\n\ntype ValidatorWithSettings = {\n  settings: ValidationRuleSettings,\n  validator: RuleValidator\n  params?: ValidationRuleParameter[]\n}\n\n/**\n * Creates a validator for the specified value validation rules.\n * @param validationRules the validation rules for FormViewer.\n * @param schema the value validation rules.\n * @returns the validation function.\n */\nfunction validatorsResolver(validationRules: FormViewerValidationRules, schema?: BoundValueSchema): ResolvedValidator {\n  const validators = parse(validationRules, schema)\n\n  return async (value, store) => {\n    if (!validators) return\n\n    const validationResults: ValidationResult[] = []\n    for (const {settings, validator, params} of validators) {\n      const args: Record<string, unknown> = {}\n      params?.filter(param => typeof param.default !== 'undefined')\n        .map(param => args[param.key] = param.default)\n      Object.assign(args, settings.args)\n      const result = validator(value, store, args)\n      const ruleResult = isPromise(result) ? await result : result\n      if (ruleResult !== true) {\n        validationResults.push({\n          settings: settings,\n          message: typeof ruleResult === 'string' ? ruleResult : args.message as string\n        })\n      }\n    }\n    return validationResults\n  }\n}\n\nconst noOpValidator = () => true\n\nfunction parse(validationRules: FormViewerValidationRules, schema?: BoundValueSchema): ValidatorWithSettings[] | undefined {\n  if (!schema || !schema.validations || !schema.validations.length) return\n\n  const rules = [...schema.validations].sort(byPriority)\n  const toValidator = (rule: ValidationRuleSettings) => {\n    if (!rule.type) {\n      const definition = validationRules.internal[rule.key]\n      const validator = definition.validatorFactory(rule.args ?? {})\n      return {settings: rule, validator, params: definition.params}\n    }\n    if (rule.type === 'custom') {\n      const definition = validationRules.custom?.[rule.key]\n      if (definition) return {settings: rule, validator: definition.validate, params: definition.params}\n    }\n    console.warn(`Cannot find rule, key: '${rule.key}', type: '${rule.type}'`)\n    return {settings: rule, validator: noOpValidator}\n  }\n\n  return rules.map(toValidator)\n}\n\n//The 'required' rule must be implemented first, because it is a root for next\n//The 'code' rule (used refine under the hood) must be implemented last\nfunction byPriority(_: ValidationRuleSettings, b: ValidationRuleSettings) {\n  if (b.key === 'code') return -1\n  if (b.key === 'required') return 1\n  return 0\n}\n","import {autorun, makeAutoObservable, observable, runInAction, untracked} from 'mobx'\nimport {ComponentStore} from '../../../stores/ComponentStore'\nimport type {FormViewerValidationRules} from '../../../stores/FormViewerValidationRules'\nimport type {IStore} from '../../../stores/IStore'\nimport type {Setter} from '../../../types'\nimport {isRecord} from '../../../utils'\nimport type {ComponentData, IComponentDataProvider} from '../../../utils/contexts/ComponentDataContext'\nimport {needRender} from '../../../utils/needRender'\nimport {nameAutorun, nameObservable} from '../../../utils/observableNaming'\nimport type {Model} from '../../define'\nimport type {SchemaType} from '../types/SchemaType'\nimport type {SchemaTypeMap} from '../types/SchemaTypeMap'\nimport type {ValidationMessages} from '../types/ValidationResult'\nimport {calculateProperty} from './calculateProperty'\nimport {dataPart} from './dataPart'\nimport {DataValidator} from './DataValidator'\nimport type {Disposer} from './Disposer'\nimport type {Field} from './Field'\nimport type {FieldType} from './FieldType'\nimport type {IComponentDataFactory} from './IComponentDataFactory'\nimport type {IDataContext} from './IDataContext'\nimport {typedValidatorsResolver} from './validatorsResolver'\n\n/**\n * Field with repeater data. **Internal use only.**\n */\nexport class RepeaterField implements Field, IComponentDataProvider {\n\n  #oldDataValidator?: DataValidator\n\n  /**\n   * @inheritDoc\n   */\n  error?: string\n\n  /**\n   * @inheritDoc\n   */\n  touched = false\n\n  /**\n   * @inheritDoc\n   */\n  valued: string\n  /**\n   * The type of the field value.\n   */\n  valueType: SchemaType\n  dataValidator?: DataValidator\n  readonly #disposers: Disposer[]\n\n  initialData: unknown\n\n  /**\n   * Creates the field with repeater data for the component.\n   * @param dataContext the context for working with data.\n   * @param componentDataFactory the factory for creating ComponentData instances.\n   * @param store the form viewer settings.\n   * @param getValidationRules the function to get the validation rules.\n   * @param componentStore the component settings.\n   * @param model the component metadata for the form viewer.\n   * @param deferFieldCalculation if true, then the calculated field must be explicitly initialized.\n   */\n  constructor(\n    readonly dataContext: IDataContext,\n    readonly componentDataFactory: IComponentDataFactory,\n    readonly store: IStore,\n    readonly getValidationRules: (type: SchemaType) => FormViewerValidationRules,\n    readonly componentStore: ComponentStore,\n    readonly model: Model,\n    public deferFieldCalculation: boolean,\n  ) {\n    if (!model.valued) throw new Error(`'model.valued' is falsy`)\n    if (!model.valueType) throw new Error(`'model.typeOfValue' is undefined`)\n    this.valued = model.valued\n    this.valueType = model.valueType\n\n    const className = 'RepeaterField'\n\n    makeAutoObservable(this, {\n      model: false,\n      dataValidator: observable.ref\n    }, {name: nameObservable(className, {key: componentStore.key}), autoBind: true})\n\n    this.#disposers = [\n      autorun(\n        () => {\n          this.dataValidator = this.dataContext.createDataValidator(\n            componentStore,\n            this.valueType,\n            error => this.error = error,\n          )\n          untracked(() => {\n            this.#oldDataValidator?.dispose()\n            this.#oldDataValidator = this.dataValidator\n          })\n        }\n        , {name: nameAutorun(className, 'setValidator', {key: componentStore.key})}),\n      autorun(\n        () => {\n          const initialData = dataPart(this.dataContext.initialData, componentStore.key)\n          const simpleValue = initialData ?? this.initialValue\n          if (this.deferFieldCalculation) {\n            this.initialData = simpleValue\n            return\n          }\n          const [calculated, value] = this.dataContext.calculateValue(componentStore, this.valued)\n          if (calculated) {\n            this.initialData = value\n            return\n          }\n          this.initialData = simpleValue\n        }\n        , {name: nameAutorun(className, 'setValue', {'key': componentStore.key})}),\n      () => this.dataValidator?.dispose()\n    ]\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get fieldType(): FieldType {\n    return 'repeater'\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    this.deferFieldCalculation = false\n    this.initFields(this.componentData)\n  }\n\n  /**\n   * @returns the initial value for the field.\n   */\n  get initialValue() {\n    return this.componentStore.props[this.valued]?.value ?? this.defaultValue\n  }\n\n  /**\n   * @returns the default value for the field.\n   */\n  get defaultValue() {\n    return this.model.defaultProps?.[this.valued]\n  }\n\n  /**\n   * @inheritDoc\n   */\n  dispose() {\n    this.#disposers.forEach(dispose => dispose())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get value() {\n    const result: any[] = []\n    this.componentData.forEach(cd => {\n      result.push(cd.data)\n    })\n    return result\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setValue(value: unknown) {\n    if (value === null || typeof value === 'undefined' || Array.isArray(value)) {\n      this.initialData = value\n      return\n    }\n    // todo implement, autoValidate is not working correctly\n    // if (this.componentStore.schema?.autoValidate !== false) {\n    //   this.dataValidator?.sendValidationEvent?.(this.value)\n    // }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTouched() {\n    this.touched = true\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async validate() {\n    if (!this.needValidate) {\n      this.clearError()\n      return\n    }\n    const promises = this.componentData.map(cd => cd.validate())\n    await Promise.allSettled(promises)\n    await this.dataValidator?.validate?.(this.value)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async getValidationResult() {\n    if (!this.needValidate) return\n    const result: ValidationMessages[] = []\n    for (let i = 0; i < this.componentData.length; i++) {\n      const cd = this.componentData[i]\n      const messages = await cd.getValidationResult()\n      result.push(messages)\n    }\n    return result\n    // await this.dataValidator?.getValidationResult?.(this.value)\n    // return this.getRepeaterError(result)\n    // return {\n    //   [this.componentStore.key]: result,\n    //   [this.errorFieldName]: this.error\n    // }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reset() {\n    this.setValue(this.initialValue)\n    this.componentData.forEach(cd => {\n      cd.fields.forEach(field => field.reset())\n    })\n    this.clearError()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clear() {\n    this.setValue(this.defaultValue)\n    this.touched = false\n    this.clearError()\n  }\n\n  /**\n   * @returns true if the field should be validated, false otherwise.\n   */\n  get needValidate() {\n    return needRender(this.componentStore, this.dataContext.dataRoot)\n  }\n\n  /**\n   * Clears the error message for this field.\n   */\n  clearError() {\n    this.error = undefined\n    this.componentData.forEach(cd => {\n      cd.fields.forEach(field => field.setError(undefined))\n    })\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get errors() {\n    let hasErrors = false\n    const result: Array<Record<string, unknown>> = []\n    this.componentData.forEach(cd => {\n      result.push(cd.errors)\n      hasErrors = hasErrors || cd.hasErrors\n    })\n    if (!hasErrors) return\n    return result\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setError = (error: unknown) => {\n    if (typeof error === 'undefined' || error === null) {\n      this.clearError()\n      return\n    }\n\n    if (!isRecord(error)) throw new Error(`Expected 'object' type, got '${typeof error}'`)\n\n    this.error = error[this.errorFieldName] as string\n\n    const itemErrors = error[this.componentStore.key] as Array<Record<string, unknown>>\n    this.componentData.forEach((cd, index) => {\n      const item = itemErrors?.[index]\n      cd.fields.forEach((field, name) => field.setError(item?.[name]))\n    })\n  }\n\n  /**\n   * @returns the component settings for the RepeaterItem component.\n   */\n  get repeaterItemStore() {\n    const componentStore = JSON.parse(JSON.stringify(this.componentStore))\n    const repeaterItem = new ComponentStore(this.componentStore.key, 'RepeaterItem')\n    repeaterItem.type = 'RepeaterItem'\n    repeaterItem.children = componentStore.children\n    repeaterItem.renderWhen = componentStore.props?.itemRenderWhen\n    return repeaterItem\n  }\n\n  /**\n   * @returns the number of elements in the repeater.\n   */\n  get itemsCount() {\n    if (!this.initialData || !Array.isArray(this.initialData)) return 0\n    return this.initialData.length\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get componentData(): ComponentData[] {\n    // read memoized values before performing an action\n    const itemsCount = this.itemsCount\n    const originalStore = this.repeaterItemStore\n    const repeaterKey = this.componentStore.key\n\n    return runInAction(() => {\n      const result: ComponentData[] = []\n      for (let i = 0; i < itemsCount; i++) {\n        // first, create an element that will be the parent for the context\n        const contextStore = new ComponentStore(`${repeaterKey}-context-item-${i}`, 'Fragment')\n        const contextData = this.componentDataFactory.createComponentData(contextStore, false)\n        contextData.index = i\n        contextData.parent = this.dataContext.dataRoot\n\n        // then we create a data context\n        const repeaterFormContext = new RepeaterFormContext(this, this.store, this.getValidationRules, this.dataContext, contextData, i)\n\n        // now create the root element of the inner form, it is necessary for correct work of itemRenderWhen property\n        const rootStore = new ComponentStore(`${repeaterKey}-root-item-${i}`, 'Fragment')\n        const rootData = this.componentDataFactory.createComponentData(rootStore, false, undefined, repeaterFormContext)\n        rootData.setParent(contextData)\n\n        // finally create a repeater element\n        const cs = ComponentStore.createFromObject(originalStore)\n        cs.key = `${repeaterKey}-item-${i}`\n        const repeaterItem = this.componentDataFactory.createComponentData(cs, true, undefined, repeaterFormContext)\n        repeaterItem.setParent(rootData)\n\n        result.push(contextData)\n      }\n      if (!this.deferFieldCalculation) this.initFields(result)\n      return result\n    })\n  }\n\n  private initFields(components: ComponentData[]) {\n    components.map(cd => {\n      cd.fields.forEach(field => field.init())\n    })\n  }\n\n  private get errorFieldName() {\n    return `${this.componentStore.key}Error`\n  }\n}\n\n/**\n * The context for the RepeaterField. **Internal use only.**\n */\nexport class RepeaterFormContext implements IDataContext {\n\n  /**\n   * Creates the context for the RepeaterField.\n   * @param repeaterField the RepeaterField instance.\n   * @param store the form viewer settings.\n   * @param getValidationRules the function to get the validation rules.\n   * @param parentContext the parent data context.\n   * @param root the root component data.\n   * @param index the index of the current item in the repeater.\n   */\n  constructor(readonly repeaterField: RepeaterField,\n              readonly store: IStore,\n              readonly getValidationRules: (type: SchemaType) => FormViewerValidationRules,\n              readonly parentContext: IDataContext,\n              readonly root: ComponentData,\n              readonly index: number) {\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get initialData() {\n    const initialData = this.repeaterField.initialData\n    if (Array.isArray(initialData)) return initialData[this.index]\n    return undefined\n  }\n\n  /**\n   * @inheritDoc\n   */\n  calculateValue(component: ComponentStore, key: string) {\n    return calculateProperty(\n      component,\n      key,\n      this.dataRoot,\n      (type, componentStore) => this.store.localizeComponent(type, this.dataRoot, componentStore)\n    )\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get dataRoot(): ComponentData {\n    return this.root\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createDataValidator(componentStore: ComponentStore, valueType: keyof SchemaTypeMap, onError: Setter<string | undefined>) {\n    const validationRules = this.getValidationRules(valueType)\n    return DataValidator.create(\n      this.store,\n      typedValidatorsResolver(validationRules),\n      componentStore.schema,\n      onError,\n      this.store.localizeErrorMessages.bind(this.store, this.dataRoot, componentStore)\n    )\n  }\n}\n","import type {ComponentData} from '../../../utils/contexts/ComponentDataContext'\nimport {RepeaterFormContext} from '../../validation/utils/RepeaterField'\nimport {ActionDefinition} from '../types'\n\nconst parseRowData = (data?: string) => {\n  if (!data) return\n  try {\n    return JSON.parse(data)\n  } catch (ignored) {\n    return\n  }\n}\n\nconst addRow = (data: Record<string, any>, repeaterKey: string, maxItems?: number,\n                rowValue?: string, rowIndex?: number) => {\n  const repeaterData = data[repeaterKey] ?? []\n  if (typeof maxItems === 'number' && repeaterData.length >= maxItems) return\n\n  const rowData = parseRowData(rowValue) ?? {}\n  const modifiedData = [...repeaterData]\n  typeof rowIndex === 'number'\n    ? modifiedData.splice(rowIndex, 0, rowData)\n    : modifiedData.push(rowData)\n  data[repeaterKey] = modifiedData\n}\n\nconst removeRow = (data: Record<string, any>, repeaterKey: string, index: number,\n                   minItems?: number) => {\n  const repeaterData = data[repeaterKey]\n  if (!Array.isArray(repeaterData)) return\n  if (typeof minItems === 'number' && repeaterData.length <= minItems) return\n\n  const modifiedData = [...repeaterData]\n  modifiedData.splice(index, 1)\n  data[repeaterKey] = modifiedData\n}\n\nconst getParentRepeaterKey = (componentData: ComponentData) => {\n  const dataRootProvider = componentData.dataRootProvider\n  if (dataRootProvider instanceof RepeaterFormContext) {\n    return dataRootProvider.repeaterField.componentStore.key\n  }\n}\n\nexport const addRowAction = ActionDefinition.functionalAction(((e, args) => {\n  if (args.dataKey) {\n    addRow(e.data, args.dataKey, args.max, args.rowData, args.index)\n    return\n  }\n\n  const repeaterKey = getParentRepeaterKey(e.sender)\n  if (repeaterKey && e.parentData) {\n    addRow(e.parentData, repeaterKey, args.max, args.rowData, args.index)\n  }\n}), {\n  dataKey: 'string',\n  rowData: 'string',\n  index: 'number',\n  max: 'number',\n})\n\nexport const removeRowAction = ActionDefinition.functionalAction(((e, args) => {\n  // delete the last row by default\n  const index = args.index ?? e.index ?? -1\n\n  if (args.dataKey) {\n    removeRow(e.data, args.dataKey, index, args.min)\n    return\n  }\n\n  const repeaterKey = getParentRepeaterKey(e.sender)\n  if (repeaterKey && e.parentData) {\n    removeRow(e.parentData, repeaterKey, index, args.min)\n  }\n}), {\n  dataKey: 'string',\n  index: 'number',\n  min: 'number',\n})\n","import type {ActionValues} from '../types'\nimport {ActionDefinition} from '../types'\nimport {addRowAction, removeRowAction} from './repeaterActions'\n\nexport const commonActions: ActionValues = {\n  // eslint-disable-next-line no-console\n  log: ActionDefinition.functionalAction(console.log),\n  validate: ActionDefinition.functionalAction(async e => await e.store.form.componentTree.validate()),\n  clear: ActionDefinition.functionalAction(e => e.store.form.componentTree.clear()),\n  reset: ActionDefinition.functionalAction(e => e.store.form.componentTree.reset()),\n  addRow: addRowAction,\n  removeRow: removeRowAction,\n}\n","/**\n * Represents the type of property block.\n */\nexport type PropertyBlockType = 'component' | 'tooltip' | string\n\nconst validatorBlockPrefix = 'validator-'\n\n/**\n * Retrieves the property block type for a given rule key. **Internal use only.**\n * @param ruleKey the rule key.\n * @returns the property block type. Validator property block types are prefixed with 'validator-'.\n */\nexport const getValidatorPropertyBlockType = (ruleKey: string): PropertyBlockType => {\n  return `${validatorBlockPrefix}${ruleKey}`\n}\n\n/**\n * Determines if the given type is a validator property block type. **Internal use only.**\n * @param type the type to be checked.\n * @returns the boolean value indicating if the type is a validator property block type.\n */\nexport const isValidatorPropertyBlockType = (type: PropertyBlockType): boolean => {\n  return type.startsWith(validatorBlockPrefix)\n}\n","import {FluentBundle, FluentResource} from '@fluent/bundle'\nimport type {Pattern} from '@fluent/bundle/esm/ast'\nimport type {FluentVariable} from '@fluent/bundle/esm/bundle'\nimport type {ComponentStore} from '../../stores/ComponentStore'\nimport {isLocalizedProperty} from '../../stores/ComponentStore'\nimport type {Form} from '../../stores/Form'\nimport type {LocalizationType} from '../../stores/LocalizationStore'\nimport {CalculableResult} from '../../utils/CalculableResult'\nimport type {IFormData} from '../../utils/IFormData'\nimport {getValidatorPropertyBlockType} from '../ui/PropertyBlockType'\nimport {replaceDots, restoreDots} from './dots'\nimport {getFluentCompatibleId} from './getFluentCompatibleId'\nimport type {Language} from './types'\n\n/**\n * Localization testing request.\n */\nexport type LocalizationTestRequest = {\n  /**\n   * Localization value to be tested.\n   */\n  localization: string,\n  /**\n   * The identifier of the localization string.\n   */\n  localizationStringId: string,\n  /**\n   * The localization Language.\n   */\n  language: Language,\n  /**\n   * The test form data.\n   */\n  data: Record<string, FluentVariable>\n}\n\n/**\n * Localization testing function. **Internal use only.**\n * @param request the localization testing request.\n * @returns the localization testing result.\n */\nexport const testFluentLocalization = (request: LocalizationTestRequest): CalculableResult => {\n  request.localization = replaceDots(request.localization)\n  const localizationSting = `${request.localizationStringId} = ${request.localization}`\n  const resource = new FluentResource(localizationSting)\n  const bundle = new FluentBundle(`${request.language.fullCode}`)\n  const errors = bundle.addResource(resource)\n  if (errors.length > 0) {\n    return CalculableResult.error([...errors])\n  }\n\n  const message = bundle.getMessage(request.localizationStringId)\n\n  if (typeof message === 'undefined') {\n    return CalculableResult.error([{message: 'Localization message not found', name: 'MessageNotFound'}])\n  }\n\n  if (message.value === null) {\n    return CalculableResult.error([{message: 'Localization message is null', name: 'MessageIsNull'}])\n  }\n\n  const {result, missingProperties, fluentErrors} = localizeData(bundle, request.data, message.value)\n\n  if (fluentErrors.length > 0) {\n    return CalculableResult.error(fluentErrors)\n  }\n\n  if (missingProperties.length > 0) {\n    return CalculableResult.warning(`The following variable(s) are not defined: ${missingProperties.join(', ')}`)\n  }\n\n  return CalculableResult.success(result)\n}\n\n/**\n * Localizes all props of the specified component.\n * @param form the form.\n * @param formData the form data.\n * @param language the displayed language.\n * @param componentStore the full state of a localizable component.\n * @param type the localization type.\n * @returns the object containing only the localized props of the specified component.\n */\nexport const localizeProperties = (form: Form, formData: IFormData, language: Language,\n                                   componentStore: ComponentStore, type: LocalizationType = 'component') => {\n  const {defaultBundle, fluentBundle} = getFluentBundles(form, language)\n  const data: Record<string, any> = {}\n\n  Object.keys(componentStore.props).forEach(value => {\n    const componentProperty = componentStore.props[value]\n    if (!isLocalizedProperty(componentProperty)) return\n\n    const messageId = getFluentCompatibleId(`${componentStore.key}_${type}_${value}`)\n    const message = fluentBundle.getMessage(messageId) ?? defaultBundle?.getMessage(messageId)\n    if (!message) {\n      data[value] = '[NOT LOCALIZED]'\n      return\n    }\n    const {result, fluentErrors} = localizeData(fluentBundle, formData.fluentData, message.value!)\n    data[value] = result\n    logFluentErrors(fluentErrors)\n  })\n\n  return data\n}\n\n/**\n * Localizes a validator error message.\n * @param form the form.\n * @param formData the form data.\n * @param language the displayed language.\n * @param componentStore the full state of a localizable component.\n * @param ruleKey the validator rule key.\n * @returns the object containing only the localized props of the specified component.\n */\nexport const localizeErrorMessage = (form: Form, formData: IFormData, language: Language,\n                                     componentStore: ComponentStore, ruleKey: string) => {\n  const type = getValidatorPropertyBlockType(ruleKey)\n  const value = 'message'\n  const messageId = getFluentCompatibleId(`${componentStore.key}_${type}_${value}`)\n  const {defaultBundle, fluentBundle} = getFluentBundles(form, language)\n  const message = fluentBundle.getMessage(messageId) ?? defaultBundle?.getMessage(messageId)\n  if (!message) {\n    return\n  }\n  const {result, fluentErrors} = localizeData(fluentBundle, formData.fluentData, message.value!)\n  logFluentErrors(fluentErrors)\n  return result\n}\n\nfunction createLocalizationDataProxy(localizationData: Record<string, any>, missingProperties: string[]) {\n  return new Proxy(localizationData, {\n    get(target, property: string) {\n      if (property in target) {\n        return target[property]\n      }\n      missingProperties.push(restoreDots(property))\n      return ''\n    },\n    getOwnPropertyDescriptor(target, property) {\n      if (property in target) {\n        return Reflect.getOwnPropertyDescriptor(target, property)\n      }\n      return {\n        value: '',\n        writable: true,\n        configurable: true,\n      }\n    },\n  })\n}\n\nfunction localizeData(fluentBundle: FluentBundle, localizationData: Record<string, any>, pattern: Pattern) {\n  const missingProperties: string[] = []\n  const proxyFormData = createLocalizationDataProxy(localizationData, missingProperties)\n  const fluentErrors: Error[] = []\n  const result = fluentBundle.formatPattern(pattern, proxyFormData, fluentErrors)\n  return {\n    result,\n    missingProperties,\n    fluentErrors\n  }\n}\n\nfunction logFluentErrors(fluentErrors: Error[]) {\n  if (fluentErrors.length > 0) {\n    console.warn('Localization errors:', fluentErrors)\n  }\n}\n\nconst getFluentBundles = (form: Form, language: Language) => {\n  const defaultBundle = form.defaultLanguage !== language\n    ? form.localization.getFluentBundle(form.defaultLanguage.fullCode)\n    : undefined\n  const fluentBundle = form.localization.getFluentBundle(language.fullCode)\n  return {defaultBundle, fluentBundle}\n}\n","import {BiDi} from './bidi'\n\n/**\n * The language to localize the form builder.\n */\nexport class Language {\n\n  /**\n   * Creates a localization language for the form builder.\n   * @param code the language code, for example, 'en'.\n   * @param dialect the dialect code, for example, 'US'.\n   * @param name the name of the language, for example 'English'.\n   * @param description the description of the language, for example 'American English'.\n   * @param bidi the type of text layout, for example, BiDi.LTR.\n   */\n  constructor(\n    readonly code: string,\n    readonly dialect: string,\n    readonly name: string,\n    readonly description: string,\n    readonly bidi: BiDi = BiDi.LTR,\n  ) {\n  }\n\n  /**\n   * @returns Full code of the Language i.e en-US, en-GB etc.\n   */\n  get fullCode() {\n    return `${this.code}-${this.dialect}`\n  }\n\n  /**\n   * Clones an existing instance of the language.\n   * @param source the cloning object.\n   * @returns the object clone.\n   */\n  static clone(source: Language) {\n    return new Language(source.code, source.dialect, source.name, source.description, source.bidi)\n  }\n}\n","import {commonStyles, containerStyles, getDefaultCss} from '../annotation'\nimport {toStyleProperties} from '../annotation/toStyleProperties'\nimport {Model} from '../define'\nimport {DefaultWrapper} from './DefaultWrapper'\n\nconst {height} = commonStyles\nconst {flexDirection, gap} = containerStyles\nexport const screenStyleProperties = toStyleProperties({\n  ...containerStyles,\n  ...commonStyles,\n  height: height.setup({default: '100%'}),\n  flexDirection: flexDirection.default('column'),\n  gap: gap.default('10px')\n})\n\nconst defaultCss = getDefaultCss(screenStyleProperties)\n\n/**\n * Form viewer screen metadata. **Internal use only.**\n */\nexport const screenModel = new Model(DefaultWrapper, undefined, undefined,\n  undefined, undefined, undefined, defaultCss, undefined, undefined, 'container')\n","import type {CSSProperties} from 'react'\nimport {ComponentStore} from '../../stores/ComponentStore'\nimport {Model} from '../define'\nimport {screenModel} from './screenModel'\n\n/**\n * React component properties that display an internal form view error. **Internal use only.**\n */\nexport interface InternalErrorProps {\n  /**\n   * The internal error.\n   */\n  error: any\n}\n\nconst internalErrorStyle: CSSProperties = {\n  color: 'red'\n}\n\nconst InternalError = ({error}: InternalErrorProps) => {\n  return <h1 style={internalErrorStyle}>{error?.message ?? JSON.stringify(error)}</h1>\n}\nInternalError.displayName = 'InternalError'\n\n/**\n * Form viewer internal error metadata. **Internal use only.**\n * @internal\n */\nexport const internalErrorModel = new Model(InternalError)\n\n/**\n * Creates the component setting for the internal form viewer error.\n * @param error the internal error.\n * @returns the component setting for the internal form viewer error.\n */\nexport function buildInternalErrorStore(error: any) {\n  const componentStore = new ComponentStore(internalErrorModel.name, internalErrorModel.type)\n  componentStore.props['error'] = {value: error}\n  const screen = new ComponentStore(screenModel.name, screenModel.type)\n  screen.children = [componentStore]\n  return screen\n}\n\n/**\n * Creates component metadata for the form viewer representing an internal error.\n * @param error the internal error.\n * @returns the component metadata for the form viewer representing an internal error.\n */\nexport function buildInternalErrorModel(error: any) {\n  const defaultProps = {error: error}\n  return new Model(InternalError, undefined, undefined, undefined, undefined, defaultProps)\n}\n","const templateTypeNamePrefix = 'Template:'\n\n/**\n * Generates the template type name from the specified template name. **Internal use only.**\n * @param name the template name.\n * @returns the template type name.\n */\nexport function generateTemplateTypeName(name: string) {\n  return templateTypeNamePrefix + name\n}\n\n/**\n * Extracts the template name from the specified component type name.\n * @param typeName the component type name.\n * @returns the template name.\n */\nexport function getTemplateName(typeName: string) {\n  if (typeName.startsWith(templateTypeNamePrefix)) return typeName.slice(templateTypeNamePrefix.length)\n  throw new Error(`Cannot determine template name from '${typeName}'`)\n}\n\n/**\n * Returns true if typeName is the template type, false otherwise.\n * @param typeName the type name.\n * @returns true if typeName is the template type, false otherwise.\n */\nexport function isTemplateType(typeName: string) {\n  return typeName.startsWith(templateTypeNamePrefix)\n}\n","import type {PropertyKey} from '../../event'\nimport type {SchemaType} from '../types/SchemaType'\nimport type {SchemaTypeMap} from '../types/SchemaTypeMap'\nimport type {ValidationRule} from '../types/ValidationRule'\nimport type {ValidationRuleParameter} from '../types/ValidationRuleParameter'\nimport type {ValidatorFactory} from '../types/ValidatorFactory'\n\n/**\n * The key-value pair for a value type.\n */\nexport type Pair<Key, Type extends SchemaType> = { [k in keyof Key]: SchemaTypeMap[Type] }\n\n/**\n * The type-safe rule builder.\n */\nexport type ValidationRuleBuilder<Params> = {\n  /**\n   * The validation rule parameters.\n   */\n  params: ValidationRuleParameter[],\n  /**\n   * Adds a parameter to the validation rule.\n   */\n  withParameter: <T extends SchemaType = 'string', Key = any>(key: PropertyKey<Key>,\n                                                              type?: T,\n                                                              required?: boolean,\n                                                              defaultValue?: SchemaTypeMap[T],\n                                                              editorType?: string) => ValidationRuleBuilder<Params & Pair<Key, T>>\n  /**\n   * Sets the validation rule factory.\n   */\n  withValidatorFactory: (apply: ValidatorFactory<Params>) => ValidationRule\n}\n\n/**\n * @returns the {@link ValidationRuleBuilder} with the 'message' parameter.\n */\nexport function ruleBuilder() {\n  const builder = {\n    params: [],\n    withParameter(key, type?, required = false,\n                  defaultValue?, editorType?): ValidationRuleBuilder<any> {\n      this.params.push({key, type: type ?? 'string', required, default: defaultValue, editorType})\n      return this\n    },\n    withValidatorFactory(validatorFactory) {\n      return {...this, validatorFactory}\n    }\n  } as ValidationRuleBuilder<{}>\n  return builder.withParameter('message')\n}\n","import type {ZodTypeAny} from 'zod'\nimport type {RuleValidator} from '../types/RuleValidator'\n\n/**\n * Converts {@link ZodTypeAny} to {@link RuleValidator}.\n * @param zodValidator the {@link ZodTypeAny} instance.\n * @returns the {@link RuleValidator} instance.\n */\nexport function zodAnyToValidator(zodValidator: ZodTypeAny): RuleValidator {\n  return async value => {\n    const result = await zodValidator?.safeParseAsync(value)\n    if (result?.success) return true\n    return result?.error.issues?.[0].message ?? false\n  }\n}\n","import {z} from 'zod'\nimport {AsyncFunction} from '../../../utils/AsyncFunction'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\nimport {ruleBuilder} from '../utils/ruleBuilder'\nimport {zodAnyToValidator} from './zodAnyToValidator'\n\nconst scheme = z.array(z.any())\n\nexport const ZodArrayRules: ValidationRuleSet = {\n  nonEmpty: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.nonempty(message))),\n\n  length: ruleBuilder()\n    .withParameter('length', 'number', true)\n    .withValidatorFactory(({length, message}) => zodAnyToValidator(scheme.length(length, message))),\n\n  min: ruleBuilder()\n    .withParameter('limit', 'number', true)\n    .withValidatorFactory(({limit, message}) => zodAnyToValidator(scheme.min(limit, message))),\n\n  max: ruleBuilder()\n    .withParameter('limit', 'number', true)\n    .withValidatorFactory(({limit, message}) => zodAnyToValidator(scheme.max(limit, message))),\n\n  code: ruleBuilder()\n    .withParameter('code', 'array', true, undefined, 'code')\n    .withValidatorFactory(({code, message}) => {\n      const checker = AsyncFunction('value', code) as (value: Array<any>) => Promise<boolean>\n      return zodAnyToValidator(scheme.refine(checker, message))\n    })\n}\n","import {z} from 'zod'\nimport {AsyncFunction} from '../../../utils/AsyncFunction'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\nimport {ruleBuilder} from '../utils/ruleBuilder'\nimport {zodAnyToValidator} from './zodAnyToValidator'\n\nconst scheme = z.boolean()\n\nexport const ZodBooleanRules: ValidationRuleSet = {\n  truthy: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.refine(arg => arg, message))),\n\n  falsy: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.refine(arg => !arg, message))),\n\n  code: ruleBuilder()\n    .withParameter('code', 'boolean', true, undefined, 'code')\n    .withValidatorFactory(({code, message}) => {\n      const checker = AsyncFunction('value', code) as (value: Boolean) => Promise<boolean>\n      return zodAnyToValidator(scheme.refine(checker, message))\n    })\n}\n","import {z} from 'zod'\nimport {AsyncFunction} from '../../../utils/AsyncFunction'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\nimport {ruleBuilder} from '../utils/ruleBuilder'\nimport {zodAnyToValidator} from './zodAnyToValidator'\n\nconst scheme = z.date()\n\nexport const ZodDateRules: ValidationRuleSet = {\n\n  min: ruleBuilder()\n    .withParameter('value', 'date', true)\n    .withValidatorFactory(({value, message}) => zodAnyToValidator(scheme.min(new Date(value), message))),\n\n  max: ruleBuilder()\n    .withParameter('value', 'date', true)\n    .withValidatorFactory(({value, message}) => zodAnyToValidator(scheme.max(new Date(value), message))),\n\n  code: ruleBuilder()\n    .withParameter('code', 'date', true, undefined, 'code')\n    .withValidatorFactory(({code, message}) => {\n      const checker = AsyncFunction('value', code) as (value: Date) => Promise<boolean>\n      return zodAnyToValidator(scheme.refine(checker, message))\n    })\n}\n","import {z} from 'zod'\nimport {AsyncFunction} from '../../../utils/AsyncFunction'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\nimport {ruleBuilder} from '../utils/ruleBuilder'\nimport {zodAnyToValidator} from './zodAnyToValidator'\n\nconst scheme = z.number()\n\nexport const ZodNumberRules: ValidationRuleSet = {\n  min: ruleBuilder()\n    .withParameter('limit', 'number', true)\n    .withValidatorFactory(({limit, message}) => zodAnyToValidator(scheme.min(limit, message))),\n\n  max: ruleBuilder()\n    .withParameter('limit', 'number', true)\n    .withValidatorFactory(({limit, message}) => zodAnyToValidator(scheme.max(limit, message))),\n\n  lessThan: ruleBuilder()\n    .withParameter('value', 'number', true)\n    .withValidatorFactory(({value, message}) => zodAnyToValidator(scheme.lt(value, message))),\n\n  moreThan: ruleBuilder()\n    .withParameter('value', 'number', true)\n    .withValidatorFactory(({message, value}) => zodAnyToValidator(scheme.gt(value, message))),\n\n  integer: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.int(message))),\n\n  multipleOf: ruleBuilder()\n    .withParameter('value', 'number', true)\n    .withValidatorFactory(({message, value}) => zodAnyToValidator(scheme.multipleOf(value, message))),\n\n  finite: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.finite(message))),\n\n  code: ruleBuilder()\n    .withParameter('code', 'number', true, undefined, 'code')\n    .withValidatorFactory(({code, message}) => {\n      const checker = AsyncFunction('value', code) as (value: number) => Promise<boolean>\n      return zodAnyToValidator(scheme.refine(checker, message))\n    })\n}\n","import type {objectOutputType, ZodTypeAny} from 'zod'\nimport {z} from 'zod'\nimport {AsyncFunction} from '../../../utils/AsyncFunction'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\nimport {ruleBuilder} from '../utils/ruleBuilder'\nimport {zodAnyToValidator} from './zodAnyToValidator'\n\nconst scheme = z.union([z.object({}).passthrough(), z.string()])\n\nexport const ZodObjectRules: ValidationRuleSet = {\n  nonEmpty: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.refine(arg => arg, message))),\n  code: ruleBuilder()\n    .withParameter('code', 'object', true, undefined, 'code')\n    .withValidatorFactory(({code, message}) => {\n      const checker = AsyncFunction('value', code) as (value: objectOutputType<{}, ZodTypeAny, 'passthrough'> | string) => Promise<unknown>\n      return zodAnyToValidator(scheme.refine(checker, message))\n    })\n}\n","import {z} from 'zod'\nimport {AsyncFunction} from '../../../utils/AsyncFunction'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\nimport {ruleBuilder} from '../utils/ruleBuilder'\nimport {zodAnyToValidator} from './zodAnyToValidator'\n\nconst scheme = z.string()\n\nexport const ZodStringRules: ValidationRuleSet = {\n  required: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(z.string({required_error: message}).nonempty(message))),\n\n  nonEmpty: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.nonempty(message))),\n\n  length: ruleBuilder()\n    .withParameter('length', 'number', true)\n    .withValidatorFactory(({length, message}) => zodAnyToValidator(scheme.length(length, message))),\n\n  min: ruleBuilder()\n    .withParameter('limit', 'number', true)\n    .withValidatorFactory(({limit, message}) => zodAnyToValidator(scheme.min(limit, message))),\n\n  max: ruleBuilder()\n    .withParameter('limit', 'number', true)\n    .withValidatorFactory(({limit, message}) => zodAnyToValidator(scheme.max(limit, message))),\n\n  regex: ruleBuilder()\n    .withParameter('regex', 'string', true)\n    .withValidatorFactory(({message, regex}) => zodAnyToValidator(scheme.regex(new RegExp(regex), message))),\n\n  email: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.email(message))),\n\n  url: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.url(message))),\n\n  uuid: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.uuid(message))),\n\n  ip: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.ip(message))),\n\n  datetime: ruleBuilder()\n    .withParameter('precision', 'number')\n    .withParameter('offset', 'boolean')\n    .withValidatorFactory(({message, offset, precision}) => zodAnyToValidator(scheme.datetime({message, offset, precision}))),\n\n  includes: ruleBuilder()\n    .withParameter('value', 'string', true)\n    .withParameter('position', 'number')\n    .withValidatorFactory(({message, value, position}) => zodAnyToValidator(scheme.includes(value, {message, position}))),\n\n  startsWith: ruleBuilder()\n    .withParameter('value', 'string', true)\n    .withValidatorFactory(({message, value}) => zodAnyToValidator(scheme.startsWith(value, message))),\n\n  endsWith: ruleBuilder()\n    .withParameter('value', 'string', true)\n    .withValidatorFactory(({message, value}) => zodAnyToValidator(scheme.endsWith(value, message))),\n\n  code: ruleBuilder()\n    .withParameter('code', 'string', true, undefined, 'code')\n    .withValidatorFactory(({code, message}) => {\n      const checker = AsyncFunction('value', code) as (value: string) => Promise<boolean>\n      return zodAnyToValidator(scheme.refine(checker, message))\n    })\n}\n","import {z} from 'zod'\nimport {AsyncFunction} from '../../../utils/AsyncFunction'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\nimport {ruleBuilder} from '../utils/ruleBuilder'\nimport {zodAnyToValidator} from './zodAnyToValidator'\n\nconst scheme = z.string()\n\nexport const ZodTimeRules: ValidationRuleSet = {\n  required: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(z.string({required_error: message}).nonempty(message))),\n  code: ruleBuilder()\n    .withParameter('code', 'string', true, undefined, 'code')\n    .withValidatorFactory(({code, message}) => {\n      const checker = AsyncFunction('value', code) as (value: string) => Promise<boolean>\n      return zodAnyToValidator(scheme.refine(checker, message))\n    })\n}\n","import {ZodArrayRules} from '../rules/ZodArrayRules'\nimport {ZodBooleanRules} from '../rules/ZodBooleanRules'\nimport {ZodDateRules} from '../rules/ZodDateRules'\nimport {ZodNumberRules} from '../rules/ZodNumberRules'\nimport {ZodObjectRules} from '../rules/ZodObjectRules'\nimport {ZodStringRules} from '../rules/ZodStringRules'\nimport {ZodTimeRules} from '../rules/ZodTimeRules'\nimport type {SchemaType} from '../types/SchemaType'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\n\nexport const ZodValidationRules: Record<SchemaType, ValidationRuleSet> = {\n  'string': ZodStringRules,\n  'number': ZodNumberRules,\n  'boolean': ZodBooleanRules,\n  'date': ZodDateRules,\n  'time': ZodTimeRules,\n  'object': ZodObjectRules,\n  'array': ZodArrayRules,\n  'enum': {}\n}\n","import {isObject} from 'lodash-es'\nimport type {SchemaType} from '../types/SchemaType'\n\nconst same = (from: any) => from\n\nconst error = (from: any) => {\n  throw new Error(`Cannot convert from '${from}'`)\n}\n\nconst parse = (from: any) => JSON.parse(from)\n\nconst parseOrSource = (from: any) => {\n  try {\n    const parsed = JSON.parse(from)\n    return isObject(parsed) ? parsed : from\n  } catch (e) {\n    console.warn(e)\n    return from\n  }\n}\n\nconst stringify = (from: any) => JSON.stringify(from)\n\nconst toString = (from: any) => from.toString()\n\nconst ifInstanceThenSame = (constructor: any) => {\n  return (from: any) => from instanceof constructor ? from : error(from)\n}\nconst toNumber = (from: any) => {\n  const result = Number(from)\n  if (isNaN(result)) error(from)\n  return result\n}\n\nconst toDate = (from: any) => new Date(from)\n\nconst formatTimePart = (part: number) => part > 9 ? `${part}` : `0${part}`\n\nconst toTime = (from: Date) => {\n  const hours = formatTimePart(from.getHours())\n  const minutes = formatTimePart(from.getMinutes())\n  const seconds = formatTimePart(from.getSeconds())\n  return `${hours}:${minutes}:${seconds}`\n}\n\nconst converters: Record<SchemaType, Record<SchemaType, (from: any) => any>> = {\n  'string': {\n    'string': same,\n    'number': toNumber,\n    'boolean': (from: string) => from === 'true',\n    'object': parseOrSource,\n    'array': parse,\n    'enum': same,\n    'date': toDate,\n    'time': same\n  },\n  'number': {\n    'string': toString,\n    'number': same,\n    'boolean': (from: number) => from === 1,\n    'object': parseOrSource,\n    'array': error,\n    'enum': same,\n    'date': toDate,\n    'time': toString\n  },\n  'boolean': {\n    'string': toString,\n    'number': (from: boolean) => from ? 1 : 0,\n    'boolean': same,\n    'object': error,\n    'array': error,\n    'enum': same,\n    'date': error,\n    'time': error\n  },\n  'object': {\n    'string': stringify,\n    'number': error,\n    'boolean': error,\n    'object': same,\n    'array': error,\n    'enum': same,\n    'date': error,\n    'time': error\n  },\n  'array': {\n    'string': stringify,\n    'number': error,\n    'boolean': error,\n    'object': error,\n    'array': same,\n    'enum': same,\n    'date': error,\n    'time': error\n  },\n  'enum': {\n    'string': stringify,\n    'number': ifInstanceThenSame(Number),\n    'boolean': ifInstanceThenSame(Boolean),\n    'object': ifInstanceThenSame(Object),\n    'array': ifInstanceThenSame(Array),\n    'enum': same,\n    'date': ifInstanceThenSame(Date),\n    'time': stringify,\n  },\n  'date': {\n    'string': toString,\n    'number': (from: Date) => from.getTime(),\n    'boolean': error,\n    'object': error,\n    'array': error,\n    'enum': same,\n    'date': same,\n    'time': toTime\n  },\n  'time': {\n    'string': same,\n    'number': error,\n    'boolean': error,\n    'object': error,\n    'array': error,\n    'enum': same,\n    'date': error,\n    'time': same\n  },\n}\n\nconst getValueType = (value: unknown): SchemaType => {\n  if (typeof value === 'string') return 'string'\n  if (typeof value === 'number') return 'number'\n  if (typeof value === 'boolean') return 'boolean'\n  if (value instanceof Date) return 'date'\n  if (Array.isArray(value)) return 'array'\n  if (typeof value === 'object') return 'object'\n  return 'enum'\n}\n\n/**\n * Converts a value from one type to another.\n * @param from the value to convert.\n * @param toType the type to convert to.\n * @returns the converted value.\n */\nexport const autoConvertField = (from: any, toType: SchemaType): unknown => {\n  if (from === null || typeof from === 'undefined') return undefined\n\n  const fromType = getValueType(from)\n  const converter = converters[fromType]?.[toType]\n  if (!converter) throw new Error(`Cannot convert ${from} from '${fromType}' to '${toType}'`)\n  try {\n    return converter(from)\n  } catch (e) {\n    throw new Error(`Cannot convert ${from} from '${fromType}' to '${toType}'. ${e}.`)\n  }\n}\n","import {autorun, makeAutoObservable, observable, untracked} from 'mobx'\nimport type {ComponentStore} from '../../../stores/ComponentStore'\nimport {needRender} from '../../../utils/needRender'\nimport {nameAutorun, nameObservable} from '../../../utils/observableNaming'\nimport type {Model} from '../../define'\nimport type {SchemaType} from '../types/SchemaType'\nimport type {ValidationMessages} from '../types/ValidationResult'\nimport {autoConvertField} from './autoConvertField'\nimport {dataPart} from './dataPart'\nimport type {DataValidator} from './DataValidator'\nimport type {Disposer} from './Disposer'\nimport type {Field} from './Field'\nimport type {FieldType} from './FieldType'\nimport type {IDataContext} from './IDataContext'\n\n/**\n * Field with form data, contains only one value. **Internal use only.**\n */\nexport class SimpleField implements Field {\n\n  #oldDataValidator?: DataValidator\n\n  /**\n   * @inheritDoc\n   */\n  error?: string\n\n  /**\n   * @inheritDoc\n   */\n  touched = false\n\n  /**\n   * @inheritDoc\n   */\n  value: unknown = undefined\n\n  /**\n   * @inheritDoc\n   */\n  valued: string\n  /**\n   * The type of the field value.\n   */\n  valueType: SchemaType\n  dataValidator?: DataValidator\n  readonly #disposers: Disposer[]\n\n  /**\n   * Creates the field with form data for the component.\n   * @param dataContext the data context for this field.\n   * @param componentStore the component settings.\n   * @param model the component metadata for the form viewer.\n   * @param deferFieldCalculation if true, then the calculated field must be explicitly initialized.\n   */\n  constructor(\n    readonly dataContext: IDataContext,\n    readonly componentStore: ComponentStore,\n    readonly model: Model,\n    public deferFieldCalculation: boolean,\n  ) {\n    if (!model.valued) throw new Error(`'model.valued' is falsy`)\n    if (!model.valueType) throw new Error(`'model.typeOfValue' is undefined`)\n    this.valued = model.valued\n    this.valueType = model.valueType\n\n    const className = 'SimpleField'\n\n    makeAutoObservable(this, {\n      model: false,\n      dataValidator: observable.ref,\n      dataContext: observable.ref\n    }, {name: nameObservable(className, {key: componentStore.key}), autoBind: true})\n\n    this.#disposers = [\n      autorun(\n        () => {\n          this.dataValidator = this.dataContext.createDataValidator(\n            componentStore,\n            this.valueType,\n            error => this.error = error\n          )\n          untracked(() => {\n            this.#oldDataValidator?.dispose()\n            this.#oldDataValidator = this.dataValidator\n          })\n        }\n        , {name: nameAutorun(className, 'setValidator', {key: componentStore.key})}),\n      autorun(\n        () => {\n          const initialData = dataPart(this.dataContext.initialData, componentStore.key)\n          const simpleValue = initialData ?? this.initialValue\n          if (this.deferFieldCalculation) {\n            this.value = simpleValue\n            return\n          }\n          const [calculated, value] = this.dataContext.calculateValue(componentStore, this.valued)\n          if (calculated) {\n            this.value = value\n            return\n          }\n          this.value = simpleValue\n        }\n        , {name: nameAutorun(className, 'setValue', {'key': componentStore.key})}),\n      () => this.dataValidator?.dispose()\n    ]\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get fieldType(): FieldType {\n    return 'simple'\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    this.deferFieldCalculation = false\n  }\n\n  /**\n   * @returns the initial value for the field.\n   */\n  get initialValue() {\n    return this.componentStore.props[this.valued]?.value ?? this.defaultValue\n  }\n\n  /**\n   * @returns the default value for the field.\n   */\n  get defaultValue() {\n    return this.model.defaultProps?.[this.valued]\n  }\n\n  /**\n   * @inheritDoc\n   */\n  dispose() {\n    this.#disposers.forEach(dispose => dispose())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setValue(value: unknown) {\n    this.value = autoConvertField(value, this.valueType)\n    if (!this.needValidate) {\n      this.clearError()\n      return\n    }\n    if (this.componentStore.schema?.autoValidate !== false) {\n      this.dataValidator?.sendValidationEvent?.(this.value)\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTouched() {\n    this.touched = true\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async validate() {\n    if (!this.needValidate) {\n      this.clearError()\n      return\n    }\n    await this.dataValidator?.validate?.(this.value)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async getValidationResult() {\n    if (!this.needValidate) return\n    const result = await this.dataValidator?.getValidationResult?.(this.value)\n    return result?.map(({message}) => message) as ValidationMessages\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reset() {\n    this.value = this.initialValue ?? this.defaultValue\n    this.clearError()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clear() {\n    this.value = this.defaultValue\n    this.touched = false\n    this.clearError()\n  }\n\n  /**\n   * @returns true if the field should be validated, false otherwise.\n   */\n  get needValidate() {\n    return needRender(this.componentStore, this.dataContext.dataRoot)\n  }\n\n  /**\n   * Clears the error message for this field.\n   */\n  clearError() {\n    this.error = undefined\n  }\n\n  /**\n   * Sets the error value.\n   * @param error the error value to be set. If the error is `undefined` or `null`, the error value will be reset to `undefined`.\n   * @throws {Error} throws an error if the provided value is not a string, undefined, or null.\n   */\n  setError = (error: unknown) => {\n    if (typeof error === 'string') {\n      this.error = error\n    } else if (typeof error === 'undefined' || error === null) {\n      this.error = undefined\n    } else {\n      throw new Error(`Expected 'string | undefined | null' type, got '${typeof error}'`)\n    }\n  }\n}\n","import type {ComponentStore} from '../../../stores/ComponentStore'\n\n/**\n * Returns true if the component's data should be stored in the parent form's data, otherwise, false.\n * @param componentStore the component settings.\n * @returns true if the component's data should be stored in the parent form's data, otherwise, false.\n */\nexport function isStoreDataInParentForm(componentStore: ComponentStore) {\n  const val = componentStore.props['storeDataInParentForm']?.value\n  return typeof val === 'undefined' ? true : val\n}\n","import {makeAutoObservable} from 'mobx'\nimport type {ComponentStore} from '../../../stores/ComponentStore'\nimport type {IStore} from '../../../stores/IStore'\nimport {nameObservable} from '../../../utils/observableNaming'\nimport type {Field} from './Field'\nimport type {FieldType} from './FieldType'\nimport {isStoreDataInParentForm} from './util'\n\n/**\n * The field with the form data, contains the value of the nested form. **Internal use only.**\n */\nexport class TemplateField implements Field {\n\n  /**\n   * @inheritDoc\n   */\n  valued = ''\n\n  /**\n   * @inheritDoc\n   */\n  touched = false\n\n  /**\n   * Creates the nested form field with form data for the component.\n   * @param componentStore the component settings.\n   * @param viewerStore viewerStore the form viewer settings.\n   */\n  constructor(\n    readonly componentStore: ComponentStore,\n    readonly viewerStore: IStore,\n  ) {\n    makeAutoObservable(this, undefined,\n      {name: nameObservable('FormField', {key: componentStore.key}), autoBind: true})\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get fieldType(): FieldType {\n    return 'simple'\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get storeDataInParentForm() {\n    return isStoreDataInParentForm(this.componentStore)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get value(): unknown {\n    return this.form.data\n  }\n\n  /**\n   * @inheritDoc\n   */\n  dispose() {\n    this.viewerStore.dispose()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clear(): void {\n    this.form.clear()\n    this.touched = false\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reset(): void {\n    this.form.reset()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTouched(): void {\n    this.touched = true\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setValue(value: unknown): void {\n    if (!value) {\n      this.form.reset()\n      return\n    }\n    if (typeof value !== 'object') throw new Error(`Expected 'object' type, got '${typeof value}'`)\n\n    const data: Record<string, any> = value\n    this.form.fields.forEach((field, key) => {\n      const val = data[key]\n      // prevent uncontrolled value\n      typeof val === 'undefined' ? field.reset() : field.setValue(val)\n    })\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async validate() {\n    await this.form.validate()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async getValidationResult() {\n    return await this.form.getValidationResult()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    this.form.fields.forEach(field => field.init())\n  }\n\n  /**\n   * @returns the form for the field.\n   */\n  get form() {\n    return this.viewerStore.form.componentTree\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get errors() {\n    return this.form.errors\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setError = (error: unknown) => {\n    if (!error) return\n    if (typeof error !== 'object') throw new Error(`Expected 'object' type, got '${typeof error}'`)\n    const errorObject: Record<string, any> = error\n    this.form.fields.forEach((field, key) => {\n      if (errorObject[key]) return field.setError(errorObject[key])\n      if (field.storeDataInParentForm) return field.setError(errorObject)\n    })\n  }\n}\n","/**\n * Generates a unique name with the specified prefix. **Internal use only.**\n * @param prefix the prefix.\n * @param existingNames the set of existing names to match with which uniqueness will be checked.\n * @returns the generated name.\n */\nexport function generateUniqueName(prefix: string, existingNames: Set<string>) {\n  let i = 1\n  while (i < 10_000) {\n    const name = `${prefix}${i}`\n    if (!existingNames.has(name)) return name\n    i++\n  }\n  const time = new Date().getTime()\n  return `${prefix}_${time}`\n}\n","import {makeAutoObservable} from 'mobx'\nimport type {ActionData, ActionValues, NamedActionDefinition} from '../features/event'\nimport {ActionDefinition} from '../features/event'\nimport type {Language} from '../features/localization/types'\nimport type {ComponentData} from '../utils/contexts/ComponentDataContext'\nimport {generateUniqueName} from '../utils/generateUniqueName'\nimport type {ComponentStore} from './ComponentStore'\nimport type {LocalizationStore} from './LocalizationStore'\n\n/**\n * Represents a form that is rendered in Viewer or edited in Builder.\n */\nexport class Form {\n  /**\n   * Root component of the form.\n   */\n  readonly componentTree: ComponentData\n\n  /**\n   * Localization of the form.\n   */\n  readonly localization: LocalizationStore\n\n  /**\n   * Localization languages of the form.\n   */\n  readonly languages: Language[] = []\n\n  /**\n   * The set of action definitions.\n   */\n  readonly actions: ActionValues\n\n  /**\n   * Properties of the component displaying the error.\n   */\n  errorProps: any = {}\n\n  /**\n   * The type name of the component displaying the tooltip.\n   */\n  tooltipType?: string\n\n  /**\n   * The type name of the component displaying the error.\n   */\n  errorType?: string\n\n  /**\n   * Default localization language of the form.\n   */\n  defaultLanguage: Language\n\n  /**\n   * Creates a new instance of Form.\n   * @param componentTree the root component of the form.\n   * @param localization the localization of the form.\n   * @param actions the form custom actions.\n   * @param languages the localization languages of the form.\n   * @param defaultLanguage the default localization language of the form.\n   */\n  constructor(componentTree: ComponentData, localization: LocalizationStore, actions: ActionValues,\n              languages: Language[], defaultLanguage: Language) {\n    this.componentTree = componentTree\n    this.localization = localization\n    this.actions = actions\n    this.languages = languages\n    this.defaultLanguage = defaultLanguage\n\n    this.componentTree.events.onBeforeDelete.subscribe(this.onComponentDataBeforeDelete.bind(this))\n    this.componentTree.events.onAfterKeyChanged.subscribe(this.onComponentDataAfterKeyChanged.bind(this))\n\n    makeAutoObservable(this)\n  }\n\n  /**\n   * @returns the actions names array.\n   */\n  get actionNames(): string[] {\n    return Object.keys(this.actions)\n  }\n\n  /**\n   * Initializes form fields.\n   */\n  initFields() {\n    this.componentTree.fields.forEach(field => field.init())\n  }\n\n  /**\n   * Disposes the form. Disposes all the components and localization.\n   */\n  dispose() {\n    this.componentTree.dispose()\n  }\n\n  /**\n   * Removes the action from the form.\n   * @param name the action name to remove.\n   */\n  removeAction(name: string) {\n    delete this.actions[name]\n    this.removeCodeActionBinding(name, this.componentTree.store)\n  }\n\n  /**\n   * Changes the existing action to the new one, adds the action if the existing action is not found.\n   * @param oldActionName the existing action name.\n   * @param newAction the new named action.\n   */\n  updateOrAddAction(oldActionName: string, newAction: NamedActionDefinition) {\n    this.actions[newAction.name] = newAction.actionDefinition\n    this.rebindActionHandlers(this.componentTree.store, oldActionName, newAction)\n    if (oldActionName !== newAction.name) {\n      delete this.actions[oldActionName]\n    }\n  }\n\n  /**\n   * Clones the action.\n   * @param namedAction the named action to clone.\n   */\n  cloneAction(namedAction: NamedActionDefinition) {\n    if (!this.actions) return\n    const existingNames = new Set(this.actionNames)\n    const data = JSON.parse(JSON.stringify(namedAction.actionDefinition))\n    const actionName = generateUniqueName(`${namedAction.name}_`, existingNames)\n    this.actions[actionName] = ActionDefinition.createFromObject(data)\n  }\n\n  private rebindActionData(actionData: ActionData, newAction: NamedActionDefinition) {\n    actionData.name = newAction.name\n    const args = actionData.args\n    if (!args) return\n\n    const newActionParamNames = new Set<string>(Object.keys(newAction.actionDefinition.params))\n    Object.keys(args).forEach(key => {\n      if (!newActionParamNames.has(key)) delete args[key]\n    })\n  }\n\n  private rebindActionHandlers(componentStore: ComponentStore, oldActionName: string, newAction: NamedActionDefinition) {\n    const events = componentStore.events\n    if (events) {\n      Object.keys(events).forEach(value => {\n        const bindings = events[value]\n        bindings?.filter(item => item.type === 'code' && item.name === oldActionName)\n          .forEach(item => this.rebindActionData(item, newAction))\n      })\n    }\n    componentStore.children?.forEach(item => {\n      this.rebindActionHandlers(item, oldActionName, newAction)\n    })\n  }\n\n  private removeCodeActionBinding(actionName: string, componentStore: ComponentStore) {\n    const events = componentStore.events\n    if (events) {\n      Object.keys(events).forEach(value => {\n        const bindings = events[value]\n        if (!bindings.length) return\n        events[value] = bindings.filter(item => !(item.type === 'code' && item.name === actionName))\n      })\n    }\n    componentStore.children?.forEach(item => this.removeCodeActionBinding(actionName, item))\n  }\n\n  private onComponentDataBeforeDelete(component: ComponentData) {\n    this.localization.removeLocalization(component.key)\n  }\n\n  private onComponentDataAfterKeyChanged(_: ComponentData, {oldKey, newKey}: { oldKey: string, newKey: string }) {\n    this.localization.changeComponentKey(oldKey, newKey)\n  }\n}\n","import {FluentBundle, FluentResource} from '@fluent/bundle'\nimport {makeAutoObservable} from 'mobx'\nimport {replaceDots} from '../features/localization/dots'\nimport {getFluentCompatibleId} from '../features/localization/getFluentCompatibleId'\nimport {nameObservable} from '../utils/observableNaming'\n\n/**\n * The format in which localization is stored.\n * @example\n * {\n *  \"en-US\" :\n *  {\n *    \"componentKey:\n *      {\n *        \"property\" : \"This {$value} is localized!\"\n *      }\n *  }\n * }\n */\nexport type LocalizationValue = Record<LanguageFullCode, ComponentsLocalization>\n\n/**\n * A record containing localizations grouped by component key.\n */\nexport type ComponentsLocalization = Record<ComponentKey, TypedLocalization>\n\n/**\n * A record containing localizations grouped by localization type.\n */\nexport type TypedLocalization = Partial<Record<LocalizationType, ComponentPropsLocalization>>\n\n/**\n * A record containing localizations for the component properties.\n */\nexport type ComponentPropsLocalization = Record<ComponentPropertyName, string>\n\n/**\n * The full language code, e.g. 'en-US'.\n */\nexport type LanguageFullCode = string\n\n/**\n * The component key.\n */\nexport type ComponentKey = string\n\n/**\n * The component property name.\n */\nexport type ComponentPropertyName = string\n\nconst className = 'LocalizationStore'\n\n/**\n * Represents the type of localization. The localization can be for a component, tooltip or for validator.\n */\nexport type LocalizationType = 'component' | 'tooltip' | string\n\nclass FluentBundleHolder {\n\n  constructor(readonly languageFullCode: LanguageFullCode,\n              readonly localizationStore: LocalizationStore) {\n    makeAutoObservable(this, undefined, {name: nameObservable('FluentBundleHolder')})\n  }\n\n  get fluentBundle() {\n    const componentsLocalization = this.localizationStore.value[this.languageFullCode]\n    const bundle = new FluentBundle(this.languageFullCode)\n\n    if (componentsLocalization) {\n      const localizationItems = this.#getLocalizationItems(componentsLocalization)\n      localizationItems.forEach(item => {\n        const errors = bundle.addResource(new FluentResource(item))\n        if (errors.length > 0) {\n          console.error(`Unable to add localization resource: ${item}`)\n          errors.forEach(console.error)\n        }\n      })\n    }\n\n    return bundle\n  }\n\n  #getLocalizationItems(componentsLocalization: ComponentsLocalization) {\n    const localizationItems: string[] = []\n    Object.entries(componentsLocalization).forEach(([componentKey, allComponentsLocalizationConstants]) => {\n      Object.entries(allComponentsLocalizationConstants ?? {}).forEach(([type, componentLocalizationConstants]) => {\n        Object.entries(componentLocalizationConstants ?? {}).forEach(([propertyName, localizationConstant]) => {\n          if (localizationConstant) {\n            localizationItems.push(`${componentKey}_${type}_${propertyName} = ${replaceDots(localizationConstant)}`)\n          }\n        })\n      })\n    })\n    return localizationItems\n  }\n}\n\n/**\n * Observable storage of localization. **Internal use only.**\n */\nexport class LocalizationStore {\n\n  private localizationCache = new Map<string, FluentBundleHolder>()\n\n  /**\n   * The localization data.\n   */\n  readonly value: LocalizationValue = {}\n\n  /**\n   * Returns value of localization constant.\n   * @param languageFullCode the full code (en-US, en-GB etc.) of the language we are looking to localize.\n   * @param componentKey the component we are looking to localize.\n   * @param propertyName the property name we are looking to localize.\n   * @param type the type of localization.\n   * @returns the value of localization constant.\n   */\n  getLocalization(languageFullCode: string, componentKey: string, propertyName: string, type: LocalizationType) {\n    const fluentCompatibleComponentKey = getFluentCompatibleId(componentKey)\n    const fluentCompatiblePropertyName = getFluentCompatibleId(propertyName)\n    return this.value[languageFullCode]?.[fluentCompatibleComponentKey]?.[type]?.[fluentCompatiblePropertyName]\n  }\n\n  /**\n   * Sets localization for component property.\n   * @param languageFullCode the full code (en-US, en-GB etc.) of the language in which localization will be set.\n   * @param componentKey the component key that requires localization.\n   * @param propertyName the component's property name to be localized.\n   * @param type the type of localization.\n   * @param value the localization value.\n   */\n  setLocalization(languageFullCode: string, componentKey: string, propertyName: string, type: LocalizationType, value: string) {\n    const fluentCompatibleComponentKey = getFluentCompatibleId(componentKey)\n    const fluentCompatiblePropertyName = getFluentCompatibleId(propertyName)\n    this.value[languageFullCode] ??= {}\n    this.value[languageFullCode][fluentCompatibleComponentKey] ??= {}\n    this.value[languageFullCode][fluentCompatibleComponentKey][type] ??= {}\n    this.value[languageFullCode][fluentCompatibleComponentKey][type]![fluentCompatiblePropertyName] = value\n  }\n\n  /**\n   * Removes localization for component.\n   * @param componentKey the component key that requires localization removal.\n   */\n  removeLocalization(componentKey: string) {\n    const fluentCompatibleComponentKey = getFluentCompatibleId(componentKey)\n    for (const key in this.value) {\n      delete this.value[key][fluentCompatibleComponentKey]\n      if (Object.keys(this.value[key]).length === 0) {\n        delete this.value[key]\n      }\n    }\n  }\n\n  /**\n   * Removes localization for component with specified type.\n   * @param componentKey the component key that requires localization removal.\n   * @param type the localization type.\n   */\n  removeLocalizationForType(componentKey: string, type: LocalizationType) {\n    const fluentCompatibleComponentKey = getFluentCompatibleId(componentKey)\n    for (const key in this.value) {\n      if (!this.value[key][fluentCompatibleComponentKey]) continue\n      delete this.value[key][fluentCompatibleComponentKey][type]\n      if (Object.keys(this.value[key][fluentCompatibleComponentKey]).length === 0) {\n        delete this.value[key][fluentCompatibleComponentKey]\n      }\n      if (Object.keys(this.value[key]).length === 0) {\n        delete this.value[key]\n      }\n    }\n  }\n\n  /**\n   * Checks that the specified language exists in the localization.\n   * @param languageFullCode The full code (en-US, en-GB etc.) of the language to be checked.\n   * @returns true if the specified language exists in the localization.\n   */\n  hasLanguage(languageFullCode: string) {\n    return !!this.value[languageFullCode]\n  }\n\n  /**\n   * Checks that the specified property has localization.\n   * @param componentKey the component we are looking to localize.\n   * @param propertyName the component's property name to be localized.\n   * @param type the type of localization.\n   * @returns true if the specified property has localization in at least one language.\n   */\n  hasLocalization(componentKey: string, propertyName: string, type: LocalizationType) {\n    const key = getFluentCompatibleId(componentKey)\n    const property = getFluentCompatibleId(propertyName)\n    return Object.values(this.value).some(localization => {\n      return localization?.[key]?.[type]?.[property]\n    })\n  }\n\n  /**\n   * If the FluentBundle for the specified language is found, this function returns it.\n   * Otherwise, an empty FluentBundle is returned.\n   * @param languageFullCode the full code (en-US, en-GB etc.) of the language to get fluent bundle.\n   * @returns the FluentBundle for the specified language.\n   */\n  getFluentBundle(languageFullCode: string) {\n    const holder = this.localizationCache.get(languageFullCode) ?? new FluentBundleHolder(languageFullCode, this)\n    if (!this.localizationCache.has(languageFullCode)) this.localizationCache.set(languageFullCode, holder)\n    return holder.fluentBundle\n  }\n\n  /**\n   * Changes the component key for all languages in the value object.\n   * @param oldComponentKey the old component key to be replaced.\n   * @param newComponentKey the new component key to replace the old component key.\n   */\n  changeComponentKey(oldComponentKey: string, newComponentKey: string) {\n    const fluentCompatibleOldComponentKey = getFluentCompatibleId(oldComponentKey)\n    const fluentCompatibleNewComponentKey = getFluentCompatibleId(newComponentKey)\n    for (const languageFullCode in this.value) {\n      const component = this.value[languageFullCode][fluentCompatibleOldComponentKey]\n      if (component) {\n        this.value[languageFullCode][fluentCompatibleNewComponentKey] = component\n        delete this.value[languageFullCode][fluentCompatibleOldComponentKey]\n      }\n    }\n  }\n\n  /**\n   * Retrieves the localization values for a given component key.\n   * @param componentKey the key of the component to retrieve localization for.\n   * @returns the object containing the localization values for the component in each supported language.\n   */\n  getLocalizationForComponent(componentKey: string) {\n    const fluentCompatibleComponentKey = getFluentCompatibleId(componentKey)\n    const localization: LocalizationValue = {}\n    for (const languageFullCode in this.value) {\n      const component = this.value[languageFullCode][fluentCompatibleComponentKey]\n      if (component) {\n        localization[languageFullCode] = {}\n        localization[languageFullCode][componentKey] = component\n      }\n    }\n    return localization\n  }\n\n  /**\n   * Inserts the localization values for a given component key. Replaces the old component key with the new component key.\n   * @param localization the localization object for insertion.\n   * @param oldComponentKey the old component key that needs to be replaced.\n   * @param newComponentKey the new component key to be added.\n   */\n  addLocalizationWithNewKey(localization: LocalizationValue, oldComponentKey: string, newComponentKey: string) {\n    const fluentCompatibleNewComponentKey = getFluentCompatibleId(newComponentKey)\n    for (const languageFullCode in localization) {\n      const component = localization[languageFullCode][oldComponentKey]\n      if (component) {\n        this.value[languageFullCode][fluentCompatibleNewComponentKey] = component\n      }\n    }\n  }\n\n  /**\n   * The constructor.\n   * @param value the initial localization value.\n   */\n  constructor(value: LocalizationValue = {}) {\n    makeAutoObservable(this, undefined, {name: nameObservable(className)})\n\n    this.value = value\n  }\n}\n","import type {ActionValues} from '../features/event'\nimport type {Language} from '../features/localization/types'\nimport type {ComponentStore} from './ComponentStore'\nimport type {LocalizationValue} from './LocalizationStore'\n\n/**\n * The version of the saved form.\n */\nexport enum PersistedFormVersion {\n  version1 = '1'\n}\n\n/**\n * The format for saving a form designed in Form Builder.\n */\nexport interface PersistedForm {\n\n  /**\n   * The version of the saved form.\n   */\n  version?: PersistedFormVersion\n\n  /**\n   * Represents a set of action definitions.\n   */\n  actions?: ActionValues,\n\n  /**\n   * Properties of the component displaying the error.\n   */\n  errorProps?: any,\n\n  /**\n   * Name of the type of component that displays the tooltip.\n   */\n  tooltipType?: string,\n\n  /**\n   * Name of the type of component displaying the error.\n   */\n  errorType?: string,\n\n  /**\n   * Settings for components that display the form.\n   */\n  form: ComponentStore,\n\n  /**\n   * Localization of the form.\n   */\n  localization: LocalizationValue,\n\n  /**\n   * Form languages.\n   */\n  languages: Language[],\n\n  /**\n   * The default form language.\n   */\n  defaultLanguage: string\n}\n","import {assign} from 'lodash-es'\nimport {makeObservable, observable} from 'mobx'\nimport {Subject} from 'rxjs'\nimport type {Model} from '../features/define'\nimport type {ActionData, ActionDefinition, ActionEventArgs, ActionType} from '../features/event'\nimport {createActionValuesFromObject} from '../features/event'\nimport {commonActions} from '../features/event/consts/actions'\nimport type {IFormViewer} from '../features/form-viewer'\nimport {localizeErrorMessage, localizeProperties} from '../features/localization/localizer'\nimport {Language} from '../features/localization/types'\nimport {createTemplateModel} from '../features/template'\nimport {buildInternalErrorModel, buildInternalErrorStore} from '../features/ui/internalErrorModel'\nimport {screenModel} from '../features/ui/screenModel'\nimport {getTemplateName, isTemplateType} from '../features/ui/templateUtil'\nimport type {SchemaType} from '../features/validation'\nimport {DataValidator} from '../features/validation'\nimport type {ValidationResult} from '../features/validation/types/ValidationResult'\nimport {calculateProperty} from '../features/validation/utils/calculateProperty'\nimport {ZodValidationRules} from '../features/validation/utils/consts'\nimport {dataPart} from '../features/validation/utils/dataPart'\nimport {getDefaultErrorMessage} from '../features/validation/utils/DataValidator'\nimport type {IComponentDataFactory} from '../features/validation/utils/IComponentDataFactory'\nimport type {IDataContext} from '../features/validation/utils/IDataContext'\nimport {RepeaterField} from '../features/validation/utils/RepeaterField'\nimport {SimpleField} from '../features/validation/utils/SimpleField'\nimport {TemplateField} from '../features/validation/utils/TemplateField'\nimport {isStoreDataInParentForm} from '../features/validation/utils/util'\nimport {typedValidatorsResolver} from '../features/validation/utils/validatorsResolver'\nimport type {Setter, ViewMode} from '../types'\nimport {isNumber, isPromise, isRecord, isString} from '../utils'\nimport {ComponentData} from '../utils/contexts/ComponentDataContext'\nimport type {IFormData} from '../utils/IFormData'\nimport {nameObservable} from '../utils/observableNaming'\nimport {ComponentStore} from './ComponentStore'\nimport {Form} from './Form'\nimport type {FormViewerPropsStore} from './FormViewerPropsStore'\nimport type {FormViewerValidationRules} from './FormViewerValidationRules'\nimport type {IStore} from './IStore'\nimport type {LocalizationType} from './LocalizationStore'\nimport {LocalizationStore} from './LocalizationStore'\nimport type {PersistedForm} from './PersistedForm'\nimport {PersistedFormVersion} from './PersistedForm'\n\nconst propertiesToFix: Record<string, string[]> = {\n  'RsDatePicker': ['calendarDefaultDate', 'defaultValue', 'value'],\n  'RsCalendar': ['defaultValue', 'value'],\n}\n\n/**\n * Reduction function type.\n */\ntype ReduceCallback<U, T> = (accumulator: T, current: U) => T\n\n/**\n * Type for a tree object.\n */\ntype Tree<T, U extends keyof T> = T & { [K in U]: Tree<T, K>[] | undefined }\n\nfunction reduceTree<U extends object, T, K extends keyof U>(tree: Tree<U, K>,\n                                                            callback: ReduceCallback<Tree<U, K>, T>,\n                                                            initialValue: T, childKey: K) {\n  let accumulator = callback(initialValue, tree)\n  tree[childKey]?.forEach((child: Tree<U, K>) => {\n    accumulator = reduceTree(child, callback, accumulator, childKey)\n  })\n  return accumulator\n}\n\nconst globalDefaultLanguage = new Language('en', 'US', 'English', 'American English')\n\n/**\n * The root data context for the form viewer.\n */\nclass StoreFormContext implements IDataContext {\n\n  /**\n   * Create the data context for the store.\n   * @param store the store.\n   */\n  constructor(readonly store: Store) {\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get dataRoot() {\n    return this.store.form.componentTree\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get initialData() {\n    return this.store.initialDataSlice\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createDataValidator(componentStore: ComponentStore, valueType: SchemaType,\n                      onError: Setter<string | undefined>) {\n    const validationRules = this.store.getValidationRules(valueType)\n    return DataValidator.create(\n      this.store,\n      typedValidatorsResolver(validationRules),\n      componentStore.schema,\n      onError,\n      this.store.localizeErrorMessages.bind(this.store, this.dataRoot, componentStore)\n    )\n  }\n\n  /**\n   * @inheritDoc\n   */\n  calculateValue(component: ComponentStore, key: string) {\n    return calculateProperty(\n      component,\n      key,\n      this.dataRoot,\n      (type, componentStore) => this.store.localizeComponent(type, this.dataRoot, componentStore)\n    )\n  }\n}\n\n/**\n * The form viewer settings. **Internal use only.**\n */\nexport class Store implements IStore, IFormViewer, IComponentDataFactory {\n\n  /**\n   * The currently selected language.\n   */\n  selectedLanguage?: Language\n\n  /**\n   * The Subject for submitting form events.\n   */\n  readonly eventSubject = new Subject<ActionEventArgs>()\n\n  /**\n   * Current display resolution type.\n   */\n  viewMode: ViewMode = 'desktop'\n\n  /**\n   * The form.\n   */\n  form: Form\n\n  /**\n   * Models for templates that have not been explicitly defined.\n   */\n  #templateMap = new Map<string, Model>()\n\n  /**\n   * The context for working with data. **Internal use only**.\n   */\n  dataContext: IDataContext\n\n  /**\n   * The loading form error.\n   */\n  formLoadError?: string\n\n  /**\n   * Creates form viewer settings.\n   * @param formViewerPropsStore the form viewer store settings.\n   * @param parentStore the form viewer settings, used in templates.\n   * @param parentComponentStore the parent component settings.\n   * @param parentStoreContext the parent store data context.\n   */\n  constructor(public formViewerPropsStore: FormViewerPropsStore,\n              public readonly parentStore?: Store,\n              public readonly parentComponentStore?: ComponentStore,\n              public readonly parentStoreContext?: IDataContext) {\n    const componentTree = this.createComponentData(new ComponentStore(screenModel.name, screenModel.type))\n    const localization = new LocalizationStore()\n    this.form = new Form(componentTree, localization, {}, [], globalDefaultLanguage)\n    this.dataContext = new StoreFormContext(this)\n\n    makeObservable(this, {\n      form: observable,\n      viewMode: true,\n      selectedLanguage: true,\n      clear: true,\n      parentStore: observable.ref,\n      parentComponentStore: observable.ref,\n      parentStoreContext: observable.ref,\n      initialDataSlice: true,\n      formLoadError: true\n    }, {name: nameObservable(`ViewerStore`)})\n  }\n\n  /**\n   * @returns the Record with the common actions.\n   */\n  get commonActions() {\n    return commonActions\n  }\n\n  /**\n   * Returns an action by the specified action name and action type.\n   * @param name the action name.\n   * @param type the action type.\n   * @returns the action.\n   */\n  getAction(name: string, type: ActionType) {\n    let action: ActionDefinition | undefined = undefined\n    switch (type) {\n      case 'common':\n        action = this.commonActions[name]\n        break\n      case 'code':\n        action = this.form.actions[name]\n        break\n      case 'custom':\n        action = this.formViewerPropsStore.actions?.[name]\n        break\n    }\n\n    if (!action) throw Error(`Action '${name}' with type '${type}' not found!`)\n    return action\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get formData() {\n    return this.form.componentTree\n  }\n\n  /**\n   * Clears the form in Form Viewer.\n   */\n  clear() {\n    const oldForm = this.form\n    const componentTree = this.createComponentData(new ComponentStore(screenModel.name, screenModel.type))\n    const localization = new LocalizationStore()\n    this.form = new Form(componentTree, localization, {}, oldForm.languages, oldForm.defaultLanguage)\n    oldForm.dispose()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  dispose() {\n    this.form.dispose()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get initialDataSlice(): unknown {\n    if (!this.parentStoreContext || !this.parentComponentStore) return this.formViewerPropsStore.initialData\n    const dataSlice = this.parentStoreContext.initialData\n    if (isStoreDataInParentForm(this.parentComponentStore)) return dataSlice\n    const projection = dataPart(dataSlice, this.parentComponentStore.key)\n    return (Array.isArray(projection) || isRecord(projection)) ? projection : undefined\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get showAllValidationErrors(): boolean | undefined {\n    return this.formViewerPropsStore?.showAllValidationErrors\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reduceScreen<T>(callback: (accumulator: T, current: ComponentData) => T, initialValue: T) {\n    return reduceTree(this.form.componentTree, callback, initialValue, 'children')\n  }\n\n  /**\n   * Searches for an action, returns definition for the found action.\n   * @param actionData the action's data.\n   * @returns the action definition.\n   * @throws Error, if action was not found.\n   */\n  findAction(actionData: ActionData) {\n    return this.getAction(actionData.name, actionData.type)\n  }\n\n  /**\n   * Returns model for the specified type.\n   * @param type the component type.\n   * @returns the model for the specified type.\n   */\n  getModel(type: string) {\n    const model = this.formViewerPropsStore.view.find(type)\n    if (model) return model\n    if (isTemplateType(type)) {\n      const templateModel = this.#templateMap.get(type)\n      return templateModel ?? this.addTemplateModel(type)\n    }\n    return buildInternalErrorModel(`Type '${type}' is not found!`)\n  }\n\n  private addTemplateModel(type: string) {\n    // we don't change the view properties to add a template\n    const templateName = getTemplateName(type)\n    const templateModel = createTemplateModel(templateName)\n    this.#templateMap.set(templateModel.type, templateModel)\n    return templateModel\n  }\n\n  /**\n   * Loads a form by form name and sets that form in the form viewer.\n   * @param getForm the function that loads the form.\n   * @param formName the form name.\n   */\n  loadForm(getForm?: (name?: string) => string | Promise<string>, formName?: string) {\n    if (!getForm) return\n\n    try {\n      const form = getForm(formName)\n      if (isPromise<string>(form)) {\n        form\n          .then(this.applyStringForm.bind(this))\n          .catch(this.#onLoadError.bind(this))\n        return\n      }\n      this.applyStringForm(form)\n    } catch (e) {\n      this.#onLoadError(e)\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createComponentData(componentStore: ComponentStore, deferFieldCalculation = false, model?: Model,\n                      dataContext?: IDataContext): ComponentData {\n    dataContext ??= this.dataContext\n    model ??= this.getModel(componentStore.type)\n    const field = this.createField(componentStore, model, dataContext, deferFieldCalculation)\n    const factory = (cs: ComponentStore) => this.createComponentData(cs, deferFieldCalculation, undefined, dataContext)\n    const componentData = new ComponentData(componentStore, model, field, factory, this.formViewerPropsStore.formValidators)\n    componentData.dataRootProvider = dataContext\n    return componentData\n  }\n\n  /**\n   * Returns the object with validators for the specified value type.\n   * @param type the value type.\n   * @returns the object with validators for the specified value type.\n   */\n  getValidationRules(type: SchemaType): FormViewerValidationRules {\n    return {\n      custom: this.formViewerPropsStore.validators?.[type],\n      internal: ZodValidationRules[type]\n    }\n  }\n\n  private createField(componentStore: ComponentStore, model: Model, dataContext: IDataContext,\n                      deferFieldCalculation: boolean) {\n    if (model.kind === 'repeater') {\n      return new RepeaterField(dataContext, this, this, this.getValidationRules.bind(this),\n        componentStore, model, deferFieldCalculation)\n    }\n\n    if (!model.valued) return\n\n    if (!isTemplateType(model.type)) {\n      return new SimpleField(dataContext, componentStore, model, deferFieldCalculation)\n    }\n\n    const childStore = new Store(this.formViewerPropsStore.clone(), this, componentStore, dataContext)\n    return new TemplateField(componentStore, childStore)\n  }\n\n  /**\n   * Changes the form to the component with an error description.\n   * @param e the error.\n   */\n  #onLoadError(e: any) {\n    console.error(e)\n    this.formLoadError = e?.message ?? e\n    const componentStore = buildInternalErrorStore(e)\n    this.applyPersistedForm({\n      form: componentStore,\n      localization: {},\n      defaultLanguage: globalDefaultLanguage.fullCode,\n      languages: []\n    })\n  }\n\n  /**\n   * Populates the value of this store with the values of the saved form.\n   * @param text saved form value.\n   */\n  applyStringForm(text: string) {\n    try {\n      const persistedForm = JSON.parse(text) as PersistedForm\n      this.fixPropertyTypes(persistedForm.form)\n      this.applyPersistedForm(persistedForm)\n      this.formLoadError = undefined\n    } catch (e) {\n      this.formLoadError = (e as Error)?.message ?? e\n      console.error(e)\n    }\n  }\n\n  private fixPropertyTypes(componentStore: ComponentStore) {\n    if (!componentStore.props) {\n      componentStore.props = {}\n    }\n\n    // workaround, we need to restore the ComponentStore along with metadata information\n    const properties = propertiesToFix[componentStore.type]\n    properties?.forEach(property => this.fixDateProperty(componentStore, property))\n    componentStore.children?.forEach(child => this.fixPropertyTypes(child))\n  }\n\n  private fixDateProperty(componentStore: ComponentStore, property: string) {\n    const value = componentStore.props[property]?.value\n    if (isString(value) || isNumber(value)) {\n      componentStore.props[property].value = new Date(value)\n    }\n  }\n\n  /**\n   * Populates the value of this store with the values of the saved form.\n   * @param persistedForm saved form value.\n   */\n  applyPersistedForm(persistedForm: PersistedForm) {\n    const oldForm = this.form\n\n    const version = persistedForm.version\n    if (typeof version !== 'undefined' && version !== PersistedFormVersion.version1) {\n      console.warn(`An unsupported version of form '${version}' has been detected. An attempt will be made to upload` +\n        ` the form as version '${PersistedFormVersion.version1}'.`)\n    }\n\n    const componentStore = ComponentStore.createFromObject(persistedForm.form)\n\n    const componentData = this.createComponentData(componentStore, true)\n    const localization = new LocalizationStore(assign({}, persistedForm.localization))\n\n    const languages = persistedForm.languages?.map(Language.clone) ?? []\n    const defaultLanguage = languages.find(l => l.fullCode === persistedForm.defaultLanguage) ?? globalDefaultLanguage\n\n    const actions = createActionValuesFromObject(persistedForm.actions)\n\n    this.form = new Form(componentData, localization, actions, languages, defaultLanguage)\n\n    this.form.errorProps = persistedForm.errorProps ?? {}\n    this.form.tooltipType = persistedForm.tooltipType\n    this.form.errorType = persistedForm.errorType\n\n    // here we initialize the fields after the form is created, since the calculated field values are depends on 'this.form'\n    this.form.initFields()\n    oldForm.dispose()\n  }\n\n  /**\n   * @returns the current display language.\n   */\n  get displayedLanguage(): Language {\n    if (this.parentStore) return this.parentStore.displayedLanguage\n    if (this.formViewerPropsStore.propsLanguage) {\n      const propsLanguage = this.form.languages.find(l => l === this.formViewerPropsStore.propsLanguage)\n      if (propsLanguage) return propsLanguage\n    }\n    return this.selectedLanguage ?? this.form.defaultLanguage\n  }\n\n  /**\n   * @inheritDoc\n   */\n  localizeComponent(type: LocalizationType, formData: IFormData, componentStore: ComponentStore) {\n    if (this.formViewerPropsStore.localizer) return this.formViewerPropsStore.localizer(componentStore, this.displayedLanguage)\n    return localizeProperties(this.form, formData, this.displayedLanguage, componentStore, type)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  localizeErrorMessages(formData: IFormData, componentStore: ComponentStore, validationResults?: ValidationResult[]) {\n    if (!validationResults) return\n    return validationResults.map(result => {\n      const errorMessage = localizeErrorMessage(this.form, formData, this.displayedLanguage, componentStore, result.settings.key)\n      return errorMessage ?? getDefaultErrorMessage(result)\n    }).join(' ')\n  }\n}\n","import {useEffect, useState} from 'react'\n\n/**\n * Type of disposable object.\n */\nexport type IDisposable = {\n  /**\n   * Performs the tasks necessary to release resources correctly.\n   */\n  dispose: () => void\n}\n\n/**\n * Creates a disposable object and dispose the object when the React component is unmounted. **Internal use only.**\n * @param factory the factory function to create a disposable object.\n * @returns the disposable object.\n */\nexport function useDisposable<T extends IDisposable>(factory: () => T): T | undefined {\n  const [state, setState] = useState<T>()\n\n  useEffect(() => {\n    const disposable = factory()\n    setState(disposable)\n    return () => disposable.dispose()\n    // the dispose function should only be called when a component is unmounted\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return state\n}\n","import type {ReactNode} from 'react'\nimport {useCallback, useContext, useEffect, useImperativeHandle} from 'react'\nimport {FormViewerPropsStore} from '../../../stores/FormViewerPropsStore'\nimport {Store} from '../../../stores/Store'\nimport {namedObserver} from '../../../utils'\nimport {StoreContext, StoreProvider} from '../../../utils/contexts/StoreContext'\nimport {useDisposable} from '../../../utils/useDisposable'\nimport type {FormViewerProps} from '../types'\nimport {ViewerPropsProvider} from './ViewerPropsContext'\n\n/**\n * Properties of the React component ViewerStoreProvider.\n */\nexport interface ViewerStoreProviderProps {\n\n  /**\n   * Children component.\n   */\n  children: ReactNode\n\n  /**\n   * Form viewer React component properties.\n   */\n  props: FormViewerProps\n}\n\ninterface ExistingStoreProviderProps extends ViewerStoreProviderProps {\n  store: Store\n}\n\nconst RawNotifier = (props: Omit<ExistingStoreProviderProps, 'children'>) => {\n  const {store} = props\n  const viewerProps = props.props\n\n  useEffect(() => {\n    viewerProps.onFormDataChange?.(store.formData)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [store.formData.data, store.formData.errors])\n\n  useEffect(() => {\n    store.formViewerPropsStore.applyProps(viewerProps)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewerProps.initialData, viewerProps.view, viewerProps.validators, viewerProps.formValidators,\n    viewerProps.localize, viewerProps.language, viewerProps.actions, viewerProps.errorWrapper])\n\n  return null\n}\n\nconst Notifier = namedObserver('Notifier', RawNotifier)\n\nconst RawExistingStoreProvider = ({\n                                    children,\n                                    props: {viewerRef, ...props},\n                                    store\n                                  }: ExistingStoreProviderProps) => {\n  useImperativeHandle(viewerRef, () => store, [store])\n\n  return (\n    <ViewerPropsProvider value={props}>\n      <Notifier store={store} props={props}/>\n      <StoreProvider value={store}>\n        {children}\n      </StoreProvider>\n    </ViewerPropsProvider>\n  )\n}\n\nconst ExistingStoreProvider = namedObserver('ExistingStoreProvider', RawExistingStoreProvider)\n\nconst RawNewStoreProvider = ({children, props}: ViewerStoreProviderProps) => {\n  const storeFactory = useCallback(() => new Store(new FormViewerPropsStore(props)), [props])\n  const store = useDisposable(storeFactory)\n\n  if (!store) return null\n\n  return <ExistingStoreProvider children={children} props={props} store={store}/>\n}\n\nconst NewStoreProvider = namedObserver('FactoryStoreProvider', RawNewStoreProvider)\n\n/**\n * React component encapsulating MobX storage for the form viewer.\n * @param props the React component properties.\n * @returns the React element.\n */\nconst RawViewerStoreProvider = (props: ViewerStoreProviderProps) => {\n  const storeFromContext = useContext(StoreContext)\n  return storeFromContext\n    ? <ExistingStoreProvider children={props.children} props={props.props} store={storeFromContext}/>\n    : <NewStoreProvider children={props.children} props={props.props}/>\n}\n\nexport const ViewerStoreProvider = namedObserver('ViewerStoreProvider', RawViewerStoreProvider)\n","import {configure} from 'mobx'\n\n//State can be changed from anywhere\nconfigure({enforceActions: 'never'})\n","import {css, cx} from '@emotion/css'\nimport type {DetailedHTMLProps, HTMLAttributes} from 'react'\nimport {useMemo} from 'react'\nimport {namedObserver} from '../../utils'\nimport {TrialMessage} from '../licensing/TrialMessage'\nimport {ViewerLocalizationProvider} from '../localization/ViewerLocalizationProvider'\nimport {SuppressResizeObserverErrors} from '../ui/SuppressResizeObserverErrors'\nimport {Viewer} from './components/Viewer'\nimport {ViewerStoreProvider} from './components/ViewerStoreProvider'\nimport './setupMobx'\nimport type {FormViewerProps} from './types'\n\nconst divClass = css`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  gap: 5px;\n`\n\n/**\n * The React component that wraps every component in a form.\n * @param props the React component properties.\n * @returns the React element.\n */\nexport const SDiv = (props: DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>) => {\n  const {className, children, ...otherProps} = props\n  const cls = useMemo(() => cx(divClass, className), [className])\n  return <div className={cls} {...otherProps}>{children}</div>\n}\n\n//No other code here\n/**\n * The main React component of the form viewer.\n * @param props the React component properties.\n * @returns the React element.\n */\nconst RawFormViewer = (props: FormViewerProps) =>\n  <SuppressResizeObserverErrors>\n    <ViewerStoreProvider props={props}>\n      <ViewerLocalizationProvider language={props.language}>\n        <SDiv>\n          <TrialMessage/>\n          <Viewer event={props.event}/>\n        </SDiv>\n      </ViewerLocalizationProvider>\n    </ViewerStoreProvider>\n  </SuppressResizeObserverErrors>\n\nexport const FormViewer = namedObserver('FormViewer', RawFormViewer)\n","import type {CSSProperties, ReactNode} from 'react'\nimport {useMemo} from 'react'\nimport type {Store} from '../../stores/Store'\nimport type {ComponentData} from '../../utils/contexts/ComponentDataContext'\nimport {useComponentData} from '../../utils/contexts/ComponentDataContext'\nimport {StoreProvider} from '../../utils/contexts/StoreContext'\nimport {createNonNullableContext} from '../../utils/createNonNullableContext'\nimport {commonStyles, getDefaultCss} from '../annotation'\nimport {toStyleProperties} from '../annotation/toStyleProperties'\nimport {Model} from '../define'\nimport type {FormViewerProps} from '../form-viewer'\nimport {FormViewer} from '../form-viewer'\nimport {useViewerProps} from '../form-viewer/components/ViewerPropsContext'\nimport {generateTemplateTypeName, getTemplateName} from '../ui/templateUtil'\nimport {TemplateField} from '../validation/utils/TemplateField'\n\nconst templateLoadErrorStyle: CSSProperties = {\n  fontSize: 'xx-large',\n  color: 'red'\n}\n\nconst TemplateLoadError = ({children}: { children: ReactNode }) => {\n  return <span style={templateLoadErrorStyle}>{children}</span>\n}\n\ninterface TemplateContext {\n  data: ComponentData\n  viewerProps: Readonly<FormViewerProps>\n  templateProps: Record<string, any>\n}\n\nexport const [\n  /**\n   * **Internal use only.**\n   */\n  useTemplate,\n  /**\n   * **Internal use only.**\n   */\n  TemplateProvider] = createNonNullableContext<TemplateContext>('TemplateContext')\n\nconst Template = (templateProps: Record<string, any>) => {\n  const viewerProps = useViewerProps()\n  const data = useComponentData()\n  const templateViewerProps = useMemo(() => {\n    const overrideProps: Partial<FormViewerProps> = {\n      formName: getTemplateName(data.store.type),\n      onFormDataChange: undefined,\n      computeChildren: undefined,\n      formValidators: undefined,\n    }\n    return Object.assign({}, viewerProps, overrideProps)\n  }, [data.store.type, viewerProps])\n\n  const templateProviderValue = useMemo(() => ({templateProps, viewerProps, data}), [templateProps, viewerProps, data])\n\n  if (!templateViewerProps.getForm) return <TemplateLoadError>Please define the <code>getForm</code> property!</TemplateLoadError>\n  if (!(data.field instanceof TemplateField)) return null\n  const viewerStore = data.field.viewerStore as Store\n\n  return (\n    <TemplateProvider value={templateProviderValue}>\n      <StoreProvider value={viewerStore}>\n        <FormViewer {...templateViewerProps}/>\n      </StoreProvider>\n    </TemplateProvider>\n  )\n}\n\nexport const templateStyleProperties = toStyleProperties(commonStyles)\nconst defaultCss = getDefaultCss(templateStyleProperties)\n\n/**\n * Creates the template component metadata for the form viewer.\n * @param name the template name.\n * @returns the template component metadata for the form viewer.\n */\nexport function createTemplateModel(name: string) {\n  const typeName = generateTemplateTypeName(name)\n  const defaultProps = {name, storeDataInParentForm: true}\n  return new Model(Template, name, undefined, typeName, 'object', defaultProps, defaultCss,\n    undefined, typeName, 'template')\n}\n","import type {CSSProperties} from 'react'\nimport type {Store} from '../../stores/Store'\nimport {namedObserver} from '../../utils'\nimport {ComponentDataProvider, useComponentData} from '../../utils/contexts/ComponentDataContext'\nimport {StoreProvider, useStore} from '../../utils/contexts/StoreContext'\nimport {Model} from '../define'\nimport {ViewerPropsProvider} from '../form-viewer/components/ViewerPropsContext'\nimport {useTemplate} from './templateModel'\n\nconst Slot = () => {\n  const {parentStore} = useStore()\n  return parentStore\n    ? <SlotContent parentStore={parentStore}/>\n    : <SlotPlaceholder/>\n}\nSlot.displayName = 'Slot'\n\n/**\n * Form viewer slot metadata. **Internal use only.**\n */\nexport const slotModel = new Model(Slot, 'Slot', undefined, undefined, undefined,\n  undefined, undefined, undefined, undefined, 'slot')\n\nconst RawSlotContent = ({parentStore}: { parentStore: Store }) => {\n  const {key} = useComponentData()\n  const {viewerProps, data, templateProps} = useTemplate()\n\n  return (\n    <StoreProvider value={parentStore}>\n      <ViewerPropsProvider value={viewerProps}>\n        <ComponentDataProvider value={data}>\n          {templateProps[key]}\n        </ComponentDataProvider>\n      </ViewerPropsProvider>\n    </StoreProvider>\n  )\n}\n\nconst SlotContent = namedObserver('SlotContent', RawSlotContent)\n\nconst slotPlaceholder: CSSProperties = {\n  backgroundColor: 'rgb(150, 150, 150, 25%)',\n  padding: 5\n}\n\nconst RawSlotPlaceholder = () => {\n  const {key} = useComponentData()\n  return <div style={slotPlaceholder}>Slot: '{key}'</div>\n}\n\nconst SlotPlaceholder = namedObserver('SlotPlaceholder', RawSlotPlaceholder)\n","import {modules} from '../define/constants'\nimport {Meta} from '../define/utils/Meta'\nimport {slotModel} from './slotModel'\n\nexport const slotMeta = new Meta(slotModel.type, [], [], [], modules,\n  undefined, undefined, slotModel.kind)\n","import {boolean} from '../annotation'\nimport {toArray} from '../annotation/toArray'\nimport {modules} from '../define/constants'\nimport {Meta} from '../define/utils/Meta'\nimport {generateTemplateTypeName} from '../ui/templateUtil'\nimport {templateStyleProperties} from './templateModel'\n\ninterface TemplateProps {\n  storeDataInParentForm?: boolean\n}\n\nconst storeDataInParentForm = boolean\n  .default(true)\n  .calculable(false)\n  .hinted('Store data in parent form')\n  .named('Store data in parent form')\n\n/**\n * Creates the template component metadata for the form builder.\n * @param name the template name.\n * @returns the template component metadata for the form builder.\n */\nexport function createTemplateMeta(name: string) {\n  const typeName = generateTemplateTypeName(name)\n  return new Meta(typeName,\n    toArray<TemplateProps>({\n      storeDataInParentForm,\n    }),\n    [], templateStyleProperties, modules, undefined, undefined, 'template')\n}\n","import type {ReactNode} from 'react'\nimport {Model} from '../define'\n\ninterface FragmentProps {\n  children: ReactNode\n}\n\nconst Fragment = ({children}: FragmentProps) => <>{children}</>\nFragment.displayName = 'Fragment'\n\n/**\n * Form viewer fragment metadata. **Internal use only.**\n */\nexport const fragmentModel = new Model(Fragment, 'Fragment', undefined, undefined, undefined,\n  undefined, undefined, undefined, undefined, 'container')\n","import type {ComponentType, ReactNode} from 'react'\nimport {BiDi} from '../../localization/bidi'\nimport type {Language} from '../../localization/types'\nimport {repeaterItemModel} from '../../repeater/RepeaterItem'\nimport {repeaterModel} from '../../repeater/repeaterModel'\nimport {slotModel} from '../../template'\nimport {fragmentModel} from '../../template/fragmentModel'\nimport {internalErrorModel} from '../../ui/internalErrorModel'\nimport {screenModel} from '../../ui/screenModel'\nimport type {Model} from './Model'\n\n/**\n * Represents the type of CSS loader. Can be either BiDi or common for both BiDi.\n */\nexport type CssLoaderType = BiDi | 'common'\n\n/**\n * Represents a form viewer Wrapper component.\n */\nexport type FormViewerWrapper = ComponentType<FormViewerWrapperComponentProps>\n\n/**\n * Represents the props for the WrapperComponent. WrapperComponent is a component that wraps the form viewer. Can be added externally.\n */\nexport interface FormViewerWrapperComponentProps {\n  /**\n   * The FormViewer language.\n   */\n  language: Language\n  /**\n   * The React child node.\n   */\n  children: ReactNode\n}\n\n/**\n * Represents all the metadata of the form viewer components.\n */\nexport class View {\n  #modelMap = new Map<string, Model>()\n  #cssLoaders = new Map<BiDi, Array<() => Promise<void>>>\n  #wrappers = new Array<FormViewerWrapper>()\n\n  /**\n   * Static wrapper for the {@link View} constructor.\n   * @param models the components metadata.\n   * @returns the {@link View} instance.\n   */\n  static create(models: Model[]) {\n    return new View(models)\n  }\n\n  /**\n   * Creates an instance of the {@link View}.\n   * @param models the components metadata.\n   */\n  constructor(models: Model[] = []) {\n    this.define(screenModel)\n    this.define(internalErrorModel)\n    this.define(slotModel)\n    this.define(fragmentModel)\n    this.define(repeaterModel)\n    this.define(repeaterItemModel)\n    models.forEach(this.define.bind(this))\n  }\n\n  /**\n   * Defines the component's metadata for the form viewer.\n   * @param model the component's metadata.\n   */\n  define(model: Model) {\n    this.#modelMap.set(model.type, model)\n  }\n\n  /**\n   * Returns the component's metadata for the form viewer for the specified type.\n   * @param type the component type.\n   * @returns the component metadata for the form viewer for the specified type.\n   */\n  get(type: string) {\n    const result = this.find(type)\n    if (result) return result\n    throw new Error(`Type '${type}' is not found!`)\n  }\n\n  /**\n   * Returns the component's metadata for the form viewer for the specified type.\n   * @param type the component type.\n   * @returns the component metadata for the form viewer for the specified type or undefined.\n   */\n  find(type: string) {\n    return this.#modelMap.get(type)\n  }\n\n  /**\n   * @returns all component metadata for the form viewer.\n   */\n  all() {\n    return [...this.#modelMap.values()]\n  }\n\n  /**\n   * Adds a wrapper to the list of viewers for this viewer wrapper.\n   * @param wrapper  the viewer wrapper to be added. The wrapper is a component that wraps the form viewer.\n   * @returns the {@link View} instance.\n   */\n  withViewerWrapper = (wrapper: FormViewerWrapper) => {\n    this.#wrappers.push(wrapper)\n    return this\n  }\n\n  /**\n   * Retrieves the viewer wrappers array.\n   * @returns the viewer wrappers array.\n   */\n  get viewerWrappers() {\n    return [...this.#wrappers]\n  }\n\n  /**\n   * Applies the given CSS loader to the component based on the BiDi layout.\n   * @param cssLoaderType the BiDi layout type, either 'common', 'ltr', or 'rtl'.\n   * @param loader the function that returns a Promise to load CSS or other required localization resources.\n   * @returns the {@link View} instance.\n   */\n  withCssLoader(cssLoaderType: CssLoaderType, loader: () => Promise<void>) {\n    if (cssLoaderType === 'common') {\n      this.#withCssLoader(BiDi.LTR, loader)\n      this.#withCssLoader(BiDi.RTL, loader)\n    } else {\n      this.#withCssLoader(cssLoaderType, loader)\n    }\n    return this\n  }\n\n  /**\n   * Sets a CSS loader for the specified BiDi direction.\n   * @param biDi the BiDi direction.\n   * @param loader the loader function that returns a Promise.\n   */\n  #withCssLoader(biDi: BiDi, loader: () => Promise<void>) {\n    this.#cssLoaders.set(biDi, [...(this.#cssLoaders.get(biDi) ?? []), loader])\n  }\n\n  /**\n   * Retrieves the CSS loaders for a given BiDi.\n   * @param biDi the BiDi object for which to retrieve the CSS loaders.\n   * @returns the array containing the CSS loaders for the specified BiDi.\n   */\n  getCssLoaders(biDi: BiDi) {\n    return this.#cssLoaders.get(biDi) ?? []\n  }\n}\n\nexport const createView = View.create\n","import type {CSSObject} from '@emotion/serialize'\nimport type {ComponentType, ReactNode} from 'react'\nimport {commonStyles, getDefault, getDefaultCss} from '../../annotation'\nimport {toArray} from '../../annotation/toArray'\nimport {toStyleProperties} from '../../annotation/toStyleProperties'\nimport type {Annotations} from '../../annotation/utils/builders/Annotations'\nimport {modules} from '../constants'\nimport type {ActionsInitializer, ComponentKind} from '../types'\nimport type {BuilderComponent} from './BuilderComponent'\nimport type {ComponentMetadataEventListeners} from './ComponentMetadataEventListeners'\nimport type {ComponentPropertyBindType} from './ComponentPropertyBindType'\nimport {Meta} from './Meta'\nimport {Model} from './Model'\n\n/**\n * Definer class data.\n * @template T React component property type.\n */\nexport type DefinerData<T extends object> = {\n  /**\n   * The React component.\n   */\n  readonly component: ComponentType<T>,\n  /**\n   * The component name.\n   */\n  name?: string,\n  /**\n   * The component kind.\n   */\n  kind?: ComponentKind,\n  /**\n   * The component category.\n   */\n  category?: string,\n  /**\n   * The CSS metadata.\n   */\n  cssObject?: Annotations<CSSObject>,\n  /**\n   * The component icon.\n   */\n  icon?: ComponentType,\n  /**\n   * The function that initializes an actions on a component (for internal use only).\n   */\n  readonly actionsInitializer?: ActionsInitializer,\n  /**\n   * The property metadata.\n   */\n  properties?: Annotations<T>,\n  /**\n   * The custom component to display in the component list (unused).\n   */\n  customPreview?: ReactNode,\n  /**\n   * The JSON source for the component (instance of {@link ComponentStore} class serialised to JSON).\n   */\n  initialJson?: string\n  /**\n   * The component metadata event listeners.\n   */\n  eventListeners?: ComponentMetadataEventListeners\n}\n\n/**\n * The builder class to define the metadata of the form builder component.\n * @template T React component property type.\n */\nexport class Definer<T extends object> {\n  /**\n   * Definer class data.\n   * @template T React component property type.\n   */\n  data: DefinerData<T>\n\n  /**\n   * Static method to create an instance of the component's metadata builder class.\n   * @param component the React component.\n   * @param displayName the display name for the anonymous component.\n   * @returns the instance of the {@link Definer} class.\n   */\n  static define<T extends object>(component: ComponentType<T>, displayName?: string) {\n    const name = displayName ?? component.displayName ?? component.name\n    if (!name) throw Error('Anonymous components are not allowed!')\n    const definer = new Definer<T>(component)\n    if (displayName) definer.type(displayName)\n    return definer\n  }\n\n  private constructor(component: ComponentType<T>) {\n    this.data = {component}\n  }\n\n  /**\n   * Sets the name of the component.\n   * @param name the component name.\n   * @returns the modified Definer class instance.\n   */\n  name = (name: string) => this.#updateWith({name})\n\n  /**\n   * Sets the kind of the component.\n   * @param kind the component kind.\n   * @returns the modified Definer class instance.\n   */\n  kind = (kind: ComponentKind) => this.#updateWith({kind})\n\n  /**\n   * Sets the icon of the component.\n   * @param icon the component icon.\n   * @returns the modified Definer class instance.\n   */\n  icon = (icon: ComponentType) => this.#updateWith({icon})\n\n  /**\n   * Sets the category of the component.\n   * @param category the component category.\n   * @returns the modified Definer class instance.\n   */\n  category = (category: string) => this.#updateWith({category})\n\n  /**\n   * Sets the type of the component.\n   * @param type the component type.\n   * @returns the modified Definer class instance.\n   */\n  type = (type: string) => {\n    this.data.component.displayName = type\n    return this\n  }\n\n  /**\n   * Sets the metadata of the component's properties.\n   * @param properties the metadata of the component's properties.\n   * @returns the modified Definer class instance.\n   */\n  props = (properties: Annotations<T>) => this.#updateWith({properties})\n\n  /**\n   * Sets the component CSS metadata.\n   * @param css the component CSS metadata.\n   * @returns the modified Definer class instance.\n   */\n  css = (css: Annotations<CSSObject>): Definer<T> => this.#updateWith({cssObject: css})\n\n  /**\n   * Adds the metadata of the component's actions. **Internal use only.**\n   * @param fn the function that initializes an actions on a component.\n   * @returns the modified Definer class instance.\n   */\n  actions = (fn: ActionsInitializer) => this.#updateWith({actionsInitializer: fn})\n\n  /**\n   * Adds the custom component to be displayed in the component list. **Internal use only.**\n   * @param customPreview the custom component.\n   * @returns the modified Definer class instance.\n   */\n  preview = (customPreview: ReactNode) => this.#updateWith({customPreview})\n\n  /**\n   * @returns the component type name.\n   */\n  getType(): string {\n    return this.data.component.displayName || this.data.component.name\n  }\n\n  /**\n   * Sets initial component JSON.\n   * @param initialJson the JSON source for the component (instance of {@link ComponentStore} class serialised to JSON).\n   * @returns the modified Definer class instance.\n   */\n  initialJson = (initialJson?: string) => this.#updateWith({initialJson})\n\n  /**\n   * Sets the component metadata event listeners.\n   * @param eventListeners the component metadata event listeners.\n   * @returns the modified Definer class instance.\n   */\n  eventListeners = (eventListeners?: ComponentMetadataEventListeners) => this.#updateWith({eventListeners})\n\n  /**\n   * Creates component metadata for the form builder and form viewer.\n   * @returns component metadata for the form builder and form viewer.\n   */\n  build(): BuilderComponent {\n    const propAns = toArray(this.data.properties)\n    const cssAns = toStyleProperties(this.data.cssObject)\n    const cssWrapperAns = toStyleProperties(commonStyles)\n    const valuedAnnotations = propAns.filter(an => an.valued === true)\n    const firstValuedAn = valuedAnnotations[0]\n    if (valuedAnnotations.length > 1) {\n      console.warn('Several annotations with the \"valued\" property were found.' +\n        ' There should be only one \"valued\" property in the component description!' +\n        ` The annotation with the key \"${valuedAnnotations[0].key}\" will be used.`)\n    }\n    const valuedAn = firstValuedAn ?? propAns.find(an => an.name === 'value')\n    const readOnlyAn = propAns.find(an => an.readOnly)\n    const propsBindingTypes = propAns.reduce((props, an) => {\n      if (an.bindingType) props[an.key] = an.bindingType\n      return props\n    }, {} as Record<string, ComponentPropertyBindType>)\n\n    const model = new Model(\n      this.data.component,\n      this.data.name || this.getType(),\n      this.data.actionsInitializer,\n      valuedAn?.key,\n      valuedAn?.type,\n      getDefault(propAns),\n      getDefaultCss(cssAns),\n      getDefaultCss(cssWrapperAns),\n      this.getType(),\n      this.data.kind,\n      readOnlyAn?.key,\n      propsBindingTypes\n    )\n\n    const meta = new Meta(\n      this.getType(),\n      propAns,\n      cssAns,\n      cssWrapperAns,\n      modules,\n      this.data.customPreview,\n      valuedAn,\n      this.data.kind,\n      this.data.initialJson,\n      this.data.eventListeners,\n      this.data.icon\n    )\n\n    return {model, meta, category: this.data.category} as const\n  }\n\n  /**\n   * Modifies the component's metadata builder with custom options.\n   * @param opts the custom options.\n   * @returns the modified instance of the builder.\n   */\n  #updateWith(opts: Partial<DefinerData<T>>): Definer<T> {\n    Object.assign(this.data, opts)\n    return this\n  }\n}\n\nexport const define = Definer.define\n","import {css, cx} from '@emotion/css'\nimport type {ReactNode} from 'react'\nimport {Model} from '../../define'\n\n/**\n * Properties of the React component that wraps the form view component and displays validation errors.\n */\nexport interface ErrorWrapperProps {\n  /**\n   * The error text.\n   */\n  error?: string\n  /**\n   * The wrapped component.\n   */\n  children?: ReactNode\n  /**\n   * The CSS class name.\n   */\n  className?: string\n}\n\nconst ErrorMessageStyle = css`\n  font-size: 12px;\n  color: var(--red-600);\n  margin-top: 0.25rem;\n\n  &:before {\n    content: \"❌ \";\n    font-size: 10px;\n    padding: 6px;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    color: var(--red-300);\n  }\n`\n\nconst divClass = css`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n`\n\nconst DefaultErrorMessage = ({children, error, className}: ErrorWrapperProps) => {\n  return (\n    <div className={divClass}>\n      {children}\n      {error && <p className={cx(className, ErrorMessageStyle)} children={error}/>}\n    </div>\n  )\n}\nDefaultErrorMessage.displayName = 'DefaultErrorMessage'\n\n/**\n * The component metadata for error message. **Internal use only.**\n */\nexport const errorMessageModel = new Model(DefaultErrorMessage)\n","import {Meta} from '../define/utils/Meta'\nimport {internalErrorModel} from '../ui/internalErrorModel'\n\nexport const internalErrorMeta = new Meta(internalErrorModel.type, [], [], [], [])\n","import type {ScreenProps} from '../../types'\nimport {node} from '../annotation'\nimport {toArray} from '../annotation/toArray'\nimport {modules} from '../define/constants'\nimport {Meta} from '../define/utils/Meta'\nimport {screenModel, screenStyleProperties} from '../ui/screenModel'\n\nexport const screenMeta = new Meta(\n  screenModel.type,\n  toArray<ScreenProps>({children: node}),\n  screenStyleProperties,\n  [],\n  modules,\n  undefined,\n  undefined,\n  'container'\n)\n","import type {Annotation} from '../annotation/types/annotations/Annotation'\nimport {modules} from '../define/constants'\nimport {Meta} from '../define/utils/Meta'\nimport {\n  repeaterModel,\n  repeaterProps,\n  repeaterItemStyleProperties,\n  repeaterValuedAnnotation,\n  repeaterWrapperStyleProperties\n} from './repeaterModel'\n\nexport const repeaterModules: Annotation[] = [\n  ...modules,\n]\n\nexport const repeaterMeta = new Meta(repeaterModel.type, repeaterProps, repeaterItemStyleProperties, repeaterWrapperStyleProperties,\n  repeaterModules, undefined, repeaterValuedAnnotation.build('value'), repeaterModel.kind)\n","import {string} from '../annotation'\nimport {toArray} from '../annotation/toArray'\nimport {Meta} from '../define/utils/Meta'\nimport type {ErrorWrapperProps} from './components/DefaultErrorMessage'\nimport {errorMessageModel} from './components/DefaultErrorMessage'\n\nexport const errorMessageMeta = new Meta(errorMessageModel.type,\n  toArray<ErrorWrapperProps>({\n    className: string,\n  }), [], [], [])\n","import type {Annotation} from '../../annotation/types/annotations/Annotation'\nimport {internalErrorMeta} from '../../components/internalErrorMeta'\nimport {screenMeta} from '../../components/screenMeta'\nimport {repeaterMeta} from '../../repeater/repeaterMeta'\nimport {repeaterModel} from '../../repeater/repeaterModel'\nimport {createTemplateMeta, createTemplateModel, slotMeta, slotModel} from '../../template'\nimport {errorMessageMeta} from '../../validation/errorMessageMeta'\nimport type {BuilderComponent} from './BuilderComponent'\nimport type {Meta} from './Meta'\nimport {View} from './View'\n\nconst templatesCategoryName = 'templates'\nconst structureCategoryName = 'structure'\n\n/**\n * Represents all the metadata of the form builder components.\n */\nexport class BuilderView extends View {\n  #metaMap = new Map<string, Meta>()\n  #tooltipsMeta = new Map<string, Meta>()\n  #errorMeta = new Map<string, Meta>([\n    [errorMessageMeta.type, errorMessageMeta],\n  ])\n\n  /**\n   * Returns the component metadata for the specified component type name.\n   * @param type the component type name.\n   * @returns the component metadata for the specified component type name.\n   */\n  getMeta(type: string) {\n    const result = this.#metaMap.get(type)\n    if (result) return result\n    return internalErrorMeta\n  }\n\n  /**\n   * Returns the component metadata for the specified component type name or undefined.\n   * @param type the component type name.\n   * @returns the component metadata for the specified component type name or undefined.\n   */\n  findMeta(type: string) {\n    return this.#metaMap.get(type)\n  }\n\n  /**\n   * Returns the array of metadata properties of the tooltip component.\n   * @param name the name of the tooltip component type.\n   * @returns the array of metadata properties of the tooltip component.\n   */\n  getTooltipAnnotations(name: string): Annotation[] | undefined {\n    return this.#tooltipsMeta.get(name)?.properties\n  }\n\n  /**\n   * Returns the array of metadata properties of the error component.\n   * @param name the name of the error component type.\n   * @returns the array of metadata properties of the error component.\n   */\n  getErrorAnnotations(name: string): Annotation[] | undefined {\n    return this.#errorMeta.get(name)?.properties\n  }\n\n  /**\n   * @returns the array of strings with the names of the component types of the tooltip.\n   */\n  get tooltips() {\n    return Array.from(this.#tooltipsMeta.keys())\n  }\n\n  /**\n   * @returns the array of strings with the names of the component types of the error.\n   */\n  get errors() {\n    return Array.from(this.#errorMeta.keys())\n  }\n\n  /**\n   * Sets the metadata of the component that displays the form's tooltips.\n   * @param builderComponent the metadata of the component that displays the form's tooltips.\n   * @returns the instance of the {@link BuilderView} class.\n   */\n  withTooltipMeta(builderComponent: BuilderComponent): this {\n    const {model, meta} = builderComponent\n    this.define(model)\n    this.#tooltipsMeta.set(model.type, meta)\n    return this\n  }\n\n  /**\n   * Sets the metadata of the component that displays form's errors.\n   * @param builderComponent the metadata of the component that displays the form's errors.\n   * @returns the instance of the {@link BuilderView} class.\n   */\n  withErrorMeta(builderComponent: BuilderComponent): this {\n    const {model, meta} = builderComponent\n    this.define(model)\n    this.#errorMeta.set(model.type, meta)\n    return this\n  }\n\n  /**\n   * Creates metadata for the form builder for templates from the specified template names.\n   * @param templates the array of template names.\n   * @returns the instance of the {@link BuilderView} class.\n   */\n  withTemplates(templates: string[]): this {\n    templates.forEach(name => {\n      const builderComponent = BuilderView.createTemplateComponent(name)\n      this.define(builderComponent.model)\n      this.#metaMap.set(builderComponent.meta.type, builderComponent.meta)\n      this.builderComponents.push(builderComponent)\n    })\n    return this\n  }\n\n  /**\n   * Creates an instance of BuilderComponent for the specified template name.\n   * @param name the template name\n   * @returns the BuilderComponent instance.\n   */\n  static createTemplateComponent(name: string): BuilderComponent {\n    const model = createTemplateModel(name)\n    const meta = createTemplateMeta(name)\n    return {meta, model, category: templatesCategoryName}\n  }\n\n  /**\n   * Creates metadata for form builder components.\n   * @param builderComponents the array of metadata of form builder components.\n   */\n  constructor(public builderComponents: BuilderComponent[]) {\n    super(builderComponents.map(({model}) => model))\n    this.#metaMap.set(screenMeta.type, screenMeta)\n    this.#metaMap.set(internalErrorMeta.type, internalErrorMeta)\n    this.builderComponents.push({meta: slotMeta, model: slotModel, category: templatesCategoryName})\n    this.builderComponents.push({meta: repeaterMeta, model: repeaterModel, category: structureCategoryName})\n\n    const metas = builderComponents.map(({meta}) => meta)\n\n    metas.forEach(meta => {\n      this.#metaMap.set(meta.type, meta)\n    })\n  }\n}\n","import type {FluentVariable} from '@fluent/bundle/esm/bundle'\nimport type {ValidationMessages} from '../features/validation/types/ValidationResult'\n\n/**\n * The interface for accessing the form data.\n */\nexport interface IFormData {\n  /**\n   * @returns the Record with all the form data.\n   */\n  get data(): Record<string, unknown>\n\n  /**\n   * @returns the object to read and modify parent data (available for array elements).\n   */\n  get parentData(): Record<string, unknown> | undefined\n\n  /**\n   * @returns the object to read and modify root form data.\n   */\n  get rootData(): Record<string, unknown>\n\n  /**\n   * @returns the Record with all validation error messages.\n   */\n  get errors(): Record<string, unknown>\n\n  /**\n   * true if the form contains errors, otherwise false.\n   */\n  get hasErrors(): boolean\n\n  /**\n   * @returns A user-defined key-value observable storage. Utilize it to store and share any custom data.\n   */\n  get state(): Record<string, unknown>\n\n  /**\n   * @returns all the form data that is of the FluentVariable type.\n   * Additionally, the keys of the returned object are converted to the snake case.\n   */\n  get fluentData(): Record<string, FluentVariable>\n\n  /**\n   * Sets the validation error message for all form data fields.\n   * @param message the validation error message.\n   */\n  setAllErrors: (message?: string) => void\n\n  /**\n   * Validates the data in the form.\n   */\n  validate: () => Promise<void>\n\n  /**\n   * Returns the validation results without triggering an events and changing the state of the form.\n   * @returns the {@link ValidationMessages} validation results.\n   */\n  getValidationResult: () => Promise<ValidationMessages>\n\n  /**\n   * If true, then validation is in progress.\n   */\n  get isValidating(): boolean\n\n  /**\n   * Sets the form to its default value.\n   */\n  reset: () => void\n\n  /**\n   * Clears the form data.\n   */\n  clear: () => void\n\n  /**\n   * @returns the index in the array if the component is in the component array.\n   */\n  index?: number\n}\n\n/**\n * Description of the form data for the code editor.\n */\nexport const IFormDataDeclaration = `declare interface IFormData {\n  /**\n   * @returns the {@link Record} with all the form data.\n   */\n  get data(): Record<string, unknown>\n\n  /**\n   * @returns the object to read and modify parent data (available for array elements).\n   */\n  get parentData(): Record<string, unknown> | undefined\n\n  /**\n   * @returns the object to read and modify root form data.\n   */\n  get rootData(): Record<string, unknown>\n\n  /**\n   * @returns the {@link Record} with all validation error messages.\n   */\n  get errors(): Record<string, unknown>\n\n  /**\n   * true if the form contains errors, otherwise false.\n   */\n  get hasErrors(): boolean\n\n  /**\n   * @returns A user-defined key-value observable storage. Utilize it to store and share any custom data.\n   */\n  get state(): Record<string, unknown>\n\n  /**\n   * Sets the validation error message for all form data fields.\n   * @param message the validation error message.\n   */\n  setAllErrors(message?: string): void\n\n  /**\n   * Validates the data in the form.\n   */\n  validate(): Promise<void>\n    \n  /**\n   * Returns the validation results without triggering an events and changing the state of the form.\n   * @returns the validation results.\n   */\n  getValidationResult: () => Promise<ValidationMessages>\n\n  /**\n   * If true, then validation is in progress.\n   */\n  get isValidating(): boolean\n\n  /**\n   * Sets the form to its default value.\n   */\n  reset(): void\n\n  /**\n   * Clears the form data.\n   */\n  clear(): void\n\n  /**\n   * @returns the index in the array if the component is in the component array.\n   */\n  index?: number\n}`\n","import {isObject, upperFirst} from 'lodash-es'\n\n/**\n * The element with the value and the label.\n */\nexport interface LabeledValue {\n  /**\n   * The value.\n   */\n  value: string | number;\n  /**\n   * The label.\n   */\n  label?: string;\n}\n\n/**\n * Converts the array of elements into the array of {@link LabeledValue} elements.\n * @param items the array of elements.\n * @param upper if true, the first character in {@link LabeledValue.label} will be capitalized.\n * @returns the array of {@link LabeledValue} elements.\n */\nexport const toLabeledValues = (items: string[] | LabeledValue[], upper = true) =>\n  items.map(item => ({\n    value: isObject(item) ? item.value : item,\n    label: isObject(item)\n      ? item.label\n      : (upper ? upperFirst(item) : item)\n  }))\n","/**\n * Represents a relationship attribute value used in HTML.\n */\nexport type Rel = 'stylesheet' | string\n\n/**\n * Loads a resource into the document head asynchronously. **Internal use only.**\n * @param id the identifier of the resource.\n * @param href represents a URL to the resource.\n * @param rel the relationship of the resource to the document.\n * @returns the promise that resolves when the resource has been loaded successfully.\n */\nexport const loadResource = (id: string, href: string, rel: Rel) => {\n  return new Promise<void>((resolve, reject) => {\n    if (document.getElementById(id)) return resolve()\n\n    const link = document.createElement('link')\n    link.id = id\n    link.rel = rel\n    link.href = href\n    link.onload = () => {\n      resolve()\n    }\n    link.onerror = reject\n\n    document.head.appendChild(link)\n  })\n}\n\n/**\n * Unloads a resource from the DOM based on its ID. **Internal use only.**\n * @param id the ID of the resource to unload.\n */\nexport const unloadResource = (id: string) => {\n  const link = document.getElementById(id)\n  link?.parentNode?.removeChild(link)\n}\n","import * as React from 'react'\n\nexport const reactMajor = parseInt(React.version, 10)\n","import type {ForwardRefRenderFunction, PropsWithoutRef, Ref} from 'react'\nimport {forwardRef as reactForwardRef} from 'react'\nimport {reactMajor} from './reactVersion'\n\n// Fixes https://github.com/facebook/react/issues/31613\n// Breaking https://github.com/mui/mui-x/issues/15770#issuecomment-2523670430\n// Source https://github.com/mui/mui-x/pull/15955\n\n/**\n * Shim to be compatible with React 19.\n * @param render the forward ref render function.\n * @returns the React component.\n */\nexport const forwardRef = <T, P = {}>(\n  render: ForwardRefRenderFunction<T, P & { ref: Ref<T> }>,\n) => {\n  if (reactMajor >= 19) {\n    const Component = (props: any) => render(props, props.ref ?? null)\n    return Component as React.ForwardRefExoticComponent<P>\n  }\n  return reactForwardRef(render as ForwardRefRenderFunction<T, PropsWithoutRef<P>>)\n}\n"],"names":["getKey","groupBy","array","predicate","acc","value","index","_a","Model","component","name","actionsInitializer","valued","valueType","defaultProps","css","wrapperCss","typeName","kind","readOnly","propsBindingTypes","__privateAdd","_name","__publicField","observer","__privateSet","__privateGet","BiDi","createNonNullableContext","defaultValue","context","createContext","hook","createContextHook","provider","createProvider","useContext","useRepeaterProps","RepeaterPropsProvider","RepeaterItem","props","className","jsx","repeaterItemModel","useBuilderContext","BuilderContextProvider","BuilderContext","useStore","StoreProvider","StoreContext","Annotation","key","ContainerAnnotation","EventAnnotation","ModuleAnnotation","PropertyAnnotation","isProperty","StyleAnnotation","timeFormat","AnnotationMap","BuilderOptions","BaseBuilder","hint","calculable","options","annotationType","autoName","annotation","clone","assign","lodashClone","startCase","TypedBuilder","validator","errorMap","ArrayBuilder","builder","QuantifierBuilder","labels","result","OneOfBuilder","SomeOfBuilder","_AnnotationBuilder","editor","type","values","AnnotationBuilder","isContainer","createAnnotation","createProperty","getDefault","annotations","an","getDefaultCss","NodeAnnotationBuilder","slotConditionBuilder","createNodeAnnotation","isUniqueKey","store","cd","htmlAttributes","validation","string","object","boolean","number","size","date","time","color","tooltipType","cssSize","cssColor","event","node","nodeArray","oneOf","someOf","tooltipProps","renderWhen","commonStyles","containerStyles","toArray","setup","reduce","prev","toStyleProperties","RepeaterContainer","viewerMode","insideTemplate","Repeater","repeaterValuedAnnotation","repeaterProps","flexDirection","gap","repeaterItemStyleProperties","repeaterItemCss","repeaterWrapperStyleProperties","repeaterWrapperCss","repeaterDefaultProps","repeaterModel","AsyncFunction","ActionDefinition","func","body","params","createActionValuesFromObject","obj","DidMountEvent","WillUnmountEvent","createComponentDataProxy","componentData","target","property","ActionEventArgs","sender","args","state","_componentDataProxy","_parentComponentDataProxy","_rootComponentDataProxy","_isEvent","_isNotEvent","indexExists","parentComponentData","v","ActionEventArgsDeclaration","modules","Meta","properties","customPreview","valuedAn","initialJson","eventListeners","icon","KeySymbol","nameAutorun","owner","nameObservableEntity","nameObservable","observableName","paramsString","actionDataCounter","initActionDataKey","actionData","initActionDataKeys","componentStore","events","data","isFunctionalProperty","componentProperty","isLocalizedProperty","ComponentStore","makeAutoObservable","eventName","isString","isNumber","isPromise","isRecord","namedObserver","displayName","observerComponent","emptyComponentStore","dotCharacter","dotInternalValue","restoreDots","replaceDots","getFluentCompatibleId","rawId","isFluentVariable","getFluentData","parentKey","fluentData","newKey","SyncEvent","handler","h","eventArgs","treeForEach","tree","fn","child","findTreeElementDepth","element","depth","childNode","counter","generateId","prefix","ComponentKeyChangedEventArgs","oldKey","ComponentDataEvents","ComponentData","model","field","childFactory","formValidators","_disposers","_events","_formValidators","childComponentStore","reaction","newParent","inserted","i","found","root","keysMap","keysList","item","count","baseKey","camelCase","generateKey","allNodes","fieldValue","initializedData","initFormFields","errors","message","f","fields","customValidatorPromises","resultValue","messages","getFieldMessages","isEmpty","source","initialValue","isArray","merge","entries","getFormMessages","position","indexAddition","children","_b","storeChildren","storeIndex","nodes","disposer","newChild","oldChild","form","useComponentData","ComponentDataProvider","useViewerProps","ViewerPropsProvider","useSafeState","initialState","mountedRef","useRef","setState","useState","useEffect","safeSetState","useCallback","useMemo","assemblyDate","separator","licenseSeparator","publicKeyPem","decodeB64","byteStr","bytes","importPublicKey","pem","verifySign","signature","publicKeyString","publicKey","encoded","verifyLicenseParams","licensePrefix","licenseEndDate","restrictions","companyName","dateParts","isoDt","licenseEndDt","currentDate","verifyLicenseKey","licenseKey","separatorIndex","license","extractedData","extractedSign","trialDivStyle","labelStyle","TrialMessage","verified","setVerified","jsxs","emotionCache","createCache","rtlPlugin","localizationProviderClass","viewerClassName","viewerClass","cx","RawViewerLocalizationProvider","viewerStore","language","loader","e","selectedCache","CacheProvider","nestViewerWrappers","ViewerLocalizationProvider","Wrapper","more","SuppressResizeObserverErrors","defaultOnErrorFn","resizeObserverErrDiv","resizeObserverErr","EventStream","stream","newStream","filter","keys","types","observerOrNext","subscription","useComponentTreeContext","ComponentTreeContextProvider","CalculableResult","error","exceptions","warning","fnCache","getOrCreateFn","calculateValue","fnSource","formViewerData","calculatePropertyValue","calculateExpressionProperty","calculateProperties","isUndefined","getHtmlAttributes","computeEvents","hasActions","eventNames","keysIn","ComponentState","localizer","computeChildren","viewerProps","propsWithoutChildren","calculated","dataRootProvider","cssPart","viewMode","cssObjectAny","_d","_c","cssObjectCurrent","_f","_e","_h","_g","_j","_i","_l","_k","needRender","formData","defaultContainerKey","getChildren","componentTreeItem","componentProps","containers","ComponentTree","currentProps","groups","isSlotConditionSatisfied","checkSlotCondition","isNeedRender","filteredChildren","childStore","parentProps","useTooltipType","useWrapperState","wrappedComponentData","componentModel","wrapperProps","getWrapperState","useTooltipComponent","formViewerProps","selectedTooltipType","RawTooltipWrapper","tooltipDefinition","ComponentTooltip","TooltipWrapper","RawComponentTooltip","wrappedComponentStore","localize","dataContext","componentState","createElement","useErrorModel","errorType","view","defaultModel","errorMessageModel","useEventListener","listener","eventSubject","listenerRef","RawErroneous","errorDefinition","errorProps","Erroneous","getDefaultErrorMessage","concatErrorMessages","_DataValidator","setter","errorMessageLocalizer","_subject","Subject","_subscriptions","_stream","_validator","promise","resolve","subscribe","next","s","debounceTime","map","switchMap","resolver","DataValidator","defaultWrapperClass","DefaultWrapper","otherProps","cls","useComponentMountUnmount","init","clear","deps","clearRef","initRef","useActions","subsRef","unsubscribe","createSubscriptions","forIn","actionDataList","chain","getActionHandlersChain","catchError","err","caught","mountEvent","unmountEvent","actions","RawComponentViewer","componentWrapper","viewerComputeChildren","formViewerStore","componentTree","Component","containerClassName","Tooltip","Fragment","ContainerComponent","ComponentViewer","RawComponentTreeItem","ComponentTreeItem","RawComponentTree","getViewMode","width","useAutoViewMode","onResize","RawViewer","formLoadError","Viewer","customActionsToActionsValues","FormViewerPropsStore","View","makeObservable","observable","calculateProperty","localizerComponent","dataPart","typedValidatorsResolver","validationRules","schema","validatorsResolver","validators","parse","validationResults","settings","param","ruleResult","noOpValidator","rules","byPriority","toValidator","rule","definition","_","b","RepeaterField","componentDataFactory","getValidationRules","deferFieldCalculation","_oldDataValidator","itemErrors","autorun","untracked","simpleValue","dispose","promises","hasErrors","repeaterItem","itemsCount","originalStore","repeaterKey","runInAction","contextStore","contextData","repeaterFormContext","RepeaterFormContext","rootStore","rootData","cs","components","repeaterField","parentContext","initialData","onError","parseRowData","addRow","maxItems","rowValue","rowIndex","repeaterData","rowData","modifiedData","removeRow","minItems","getParentRepeaterKey","addRowAction","removeRowAction","commonActions","validatorBlockPrefix","getValidatorPropertyBlockType","ruleKey","isValidatorPropertyBlockType","testFluentLocalization","request","localizationSting","resource","FluentResource","bundle","FluentBundle","missingProperties","fluentErrors","localizeData","localizeProperties","defaultBundle","fluentBundle","getFluentBundles","messageId","logFluentErrors","localizeErrorMessage","createLocalizationDataProxy","localizationData","pattern","proxyFormData","Language","code","dialect","description","bidi","height","screenStyleProperties","defaultCss","screenModel","internalErrorStyle","InternalError","internalErrorModel","buildInternalErrorStore","screen","buildInternalErrorModel","templateTypeNamePrefix","generateTemplateTypeName","getTemplateName","isTemplateType","ruleBuilder","required","editorType","validatorFactory","zodAnyToValidator","zodValidator","scheme","z","ZodArrayRules","length","limit","checker","ZodBooleanRules","arg","ZodDateRules","ZodNumberRules","ZodObjectRules","ZodStringRules","regex","offset","precision","ZodTimeRules","ZodValidationRules","same","from","parseOrSource","parsed","isObject","stringify","toString","ifInstanceThenSame","constructor","toNumber","toDate","formatTimePart","part","toTime","hours","minutes","seconds","converters","getValueType","autoConvertField","toType","fromType","converter","SimpleField","isStoreDataInParentForm","val","TemplateField","errorObject","generateUniqueName","existingNames","Form","localization","languages","defaultLanguage","oldActionName","newAction","namedAction","actionName","newActionParamNames","bindings","FluentBundleHolder","languageFullCode","localizationStore","_getLocalizationItems","componentsLocalization","__privateMethod","getLocalizationItems_fn","localizationItems","componentKey","allComponentsLocalizationConstants","componentLocalizationConstants","propertyName","localizationConstant","LocalizationStore","fluentCompatibleComponentKey","fluentCompatiblePropertyName","holder","oldComponentKey","newComponentKey","fluentCompatibleOldComponentKey","fluentCompatibleNewComponentKey","PersistedFormVersion","propertiesToFix","reduceTree","callback","childKey","accumulator","globalDefaultLanguage","StoreFormContext","_Store","formViewerPropsStore","parentStore","parentComponentStore","parentStoreContext","_onLoadError","_templateMap","action","oldForm","dataSlice","projection","templateName","templateModel","createTemplateModel","getForm","formName","onLoadError_fn","factory","text","persistedForm","version","l","propsLanguage","Store","useDisposable","disposable","RawNotifier","Notifier","RawExistingStoreProvider","viewerRef","useImperativeHandle","ExistingStoreProvider","RawNewStoreProvider","storeFactory","NewStoreProvider","RawViewerStoreProvider","storeFromContext","ViewerStoreProvider","configure","divClass","SDiv","RawFormViewer","FormViewer","templateLoadErrorStyle","TemplateLoadError","useTemplate","TemplateProvider","Template","templateProps","templateViewerProps","overrideProps","templateProviderValue","templateStyleProperties","Slot","SlotContent","SlotPlaceholder","slotModel","RawSlotContent","slotPlaceholder","RawSlotPlaceholder","slotMeta","storeDataInParentForm","createTemplateMeta","fragmentModel","_View","models","_withCssLoader","_modelMap","_cssLoaders","_wrappers","wrapper","cssLoaderType","withCssLoader_fn","biDi","createView","_Definer","_updateWith","updateWith_fn","category","definer","propAns","cssAns","cssWrapperAns","valuedAnnotations","firstValuedAn","readOnlyAn","meta","opts","Definer","define","ErrorMessageStyle","DefaultErrorMessage","internalErrorMeta","screenMeta","repeaterModules","repeaterMeta","errorMessageMeta","templatesCategoryName","structureCategoryName","_BuilderView","builderComponents","_metaMap","_tooltipsMeta","_errorMeta","builderComponent","templates","BuilderView","IFormDataDeclaration","toLabeledValues","items","upper","upperFirst","loadResource","id","href","rel","reject","link","unloadResource","reactMajor","React","forwardRef","render","reactForwardRef"],"mappings":"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"}